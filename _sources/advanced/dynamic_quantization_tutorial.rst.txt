.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b"'s" b'adapted' b'unusually' b'Johnny' b'scientist' b'for' b'the' b'young' b'theatre' b',' b'who' b'feels' b'to' b'improve' b'the' b'game' b'like' b'elements' b'of'
    b'it' b',' b'masts' b'(' b'Algiers' b')' b'and' b'other' b'candidates' b'from' b'five' b'periods' b'lead' b'.' b'Winds' b'<unk>' b'Ledden' b',' b'Sacks' b','
    b'editor' b'entitled' b'6.Bg5' b',' b'<unk>' b',' b'BMG' b',' b'and' b'others' b',' b'the' b'induction' b'view' b'(' b'1105' b')' b',' b'the' b'<unk>'
    b'milking' b',' b'and' b'aircraft' b'being' b'defended' b'by' b'the' b'futile' b'old' b'schools' b',' b'which' b'less' b'perhaps' b'a' b'accusation' b'of' b'illness' b'.'
    b'But' b'the' b'other' b'young' b'draftees' b',' b'parietal' b'inscriptions' b'is' b'identified' b'in' b'state' b'Oceanographic' b',' b'and' b'the' b'highest' b'season' b'is' b'to'
    b'be' b'formed' b'in' b'Stratford' b',' b'and' b'ultimately' b'one' b'feature' b'appear' b'the' b'town' b'of' b'a' b'item' b'.' b'Common' b'individual' b'names' b'are'
    b'based' b'in' b'the' b'16th' b'@-@' b'century' b',' b'Louisiana' b'(' b'sometimes' b'instance' b')' b'was' b'introduced' b'within' b'Salisbury' b'and' b'that' b'members' b','
    b'Mac' b'obstacles' b',' b'Epstein' b',' b'and' b'retelling' b'on' b'the' b'reactor' b'.' b'<eos>' b'The' b'Four' b'successfully' b'known' b'pressures' b'of' b'Blue' b'carving'
    b'in' b'<unk>' b',' b'Peru' b',' b'and' b'taking' b'more' b'prominent' b'other' b'works' b',' b'serves' b'as' b'evidence' b'of' b'<unk>' b',' b'aggressive' b'warriors'
    b',' b'and' b'by' b'Starting' b'on' b'stage' b'the' b'island' b"'s" b'parents' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Development' b'=' b'=' b'<eos>' b'<eos>'
    b'<eos>' b'=' b'=' b'=' b'Temple' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Though' b'the' b'word' b'significantly' b',' b'the' b'vicar' b'(' b'died' b'alongside'
    b'Adventure' b'Secondary' b'Traphont' b')' b',' b'was' b'attracted' b'to' b'many' b'richly' b'actual' b'cake' b',' b'with' b'regard' b'to' b'St.' b'George' b'and' b'a'
    b'weekly' b'Bachmann' b'.' b'On' b'August' b'2' b',' b'2006' b',' b'it' b'became' b'often' b'found' b'for' b'his' b'distinction' b'to' b'dwell' b'up' b'so'
    b'to' b'hind' b';' b'the' b'Viking' b'starling' b'would' b'be' b'seen' b'for' b'his' b'final' b'year' b'.' b'Hartley' b"'s" b'trustees' b'are' b'probably' b'a'
    b'Healing' b'species' b',' b'operating' b'enough' b'towards' b'predominantly' b'the' b'glued' b'Sun' b',' b'the' b'Causeway' b'basement' b',' b'was' b'moved' b'to' b'northern' b'Chicago'
    b',' b'which' b'are' b'recovered' b',' b'there' b'is' b'no' b'evidence' b'to' b'study' b'premises' b'.' b'However' b',' b'more' b'than' b'those' b'of' b'three'
    b'or' b'six' b'birds' b'of' b'refurbishment' b'or' b'neck' b',' b'none' b'of' b'typical' b'light' b'state' b'.' b'Beginning' b'instrumentation' b',' b'the' b'kakapo' b'then'
    b'were' b'Mackinac' b',' b'even' b'only' b'discounted' b'in' b'much' b'of' b'four' b'games' b',' b'while' b'some' b'were' b'growing' b'for' b'its' b'remains' b'.'
    b'As' b'a' b'result' b'for' b'Shimitsu' b'an' b'year' b'before' b'towns' b',' b'incorporating' b'the' b'medieval' b'function' b'of' b'dwarfs' b',' b'there' b'have' b'25'
    b'terrestrial' b'prostitutes' b'that' b'were' b'never' b'later' b'published' b'.' b'In' b'the' b'first' b'century' b'to' b'glider' b'it' b',' b'the' b'kakapo' b'was' b'prepared'
    b'to' b'feudal' b'operas' b',' b'while' b'the' b'first' b'cross' b'colour' b',' b'the' b'inclusion' b'of' b'<unk>' b'imaginative' b'editorial' b',' b'is' b'slightly' b'known'
    b'to' b'help' b'@-@' b'island' b'that' b'are' b'worthy' b'of' b'Gaboon' b'Muslim' b',' b'perhaps' b'because' b'of' b'this' b'species' b',' b'and' b'much' b'are'
    b'visible' b'to' b'study' b'of' b'other' b'bird' b'earth' b'facilities' b'.' b'Whereas' b',' b'they' b'are' b'often' b'less' b'<unk>' b'than' b'until' b'a' b'passage'
    b'.' b'In' b'humans' b',' b'it' b'gave' b'prey' b'involved' b',' b'dating' b',' b'which' b'has' b'touches' b'their' b'resignation' b'.' b'In' b'general' b','
    b'the' b'County' b'Quebec' b'Council' b'eventually' b'developed' b'large' b'history' b'during' b'this' b'country' b',' b'including' b',' b'rather' b'than' b'one' b'1770s' b'until' b'his'
    b'expense' b'.' b'They' b'leave' b'their' b'body' b'on' b'29' b'January' b'.' b'Cadmium' b'Herschel' b'reopened' b'over' b'his' b'inspiration' b'by' b'infatuation' b'to' b'top'
    b'its' b'sister' b'Township' b':' b'the' b'1923' b'haven' b',' b'and' b'only' b'eternal' b'instruction' b'with' b'them' b',' b'Debate' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'Hall' b'6' b'=' b'=' b'<eos>' b'<eos>' b'Its' b'small' b'breeding' b'language' b'was' b'shot' b'on' b'a' b'crystalline' b'<unk>' b'.' b'Their' b'study'
    b'of' b'Haifa' b'may' b'be' b'numbered' b'in' b'at' b'least' b'three' b'parts' b'before' b'being' b'placed' b'in' b'England' b',' b'but' b'not' b'to' b'Cd'
    b'the' b'Austrians' b'Garrett' b'blotches' b'from' b'the' b'Muslim' b'Dynasty' b'.' b'This' b'figure' b'was' b'owned' b'by' b'sexual' b',' b'civilian' b',' b'<unk>' b','
    b'or' b'Arab' b'soft' b'facilities' b'.' b'<eos>' b'divination' b'Tullie' b'.' b'films' b'also' b'covered' b'Governor' b'Gray' b"'s" b'<unk>' b'Airport' b'\xe2\x80\x93' b'2012' b'.'
    b'In' b'1934' b'the' b'Art' b'Island' b'leaders' b'has' b'a' b'684' b'average' b'of' b'Everett' b'patrols' b',' b'and' b'Applied' b'June' b'3' b',' b'England'
    b',' b'though' b'the' b'second' b'game' b'which' b'will' b'be' b'effectively' b'beyond' b'work' b'.' b'By' b'the' b'official' b'pulsar' b',' b'likely' b'of' b'Ages'
    b'in' b'a' b'object' b'similar' b'to' b'ecclesiastical' b'governmental' b'measurements' b'.' b'A' b'small' b'starling' b'of' b'common' b'starlings' b'who' b'have' b'achieved' b'auction' b'in'
    b'size' b'inside' b'runs' b'damaged' b'popular' b'Citra' b'species' b',' b'which' b'could' b'not' b'be' b'assigned' b'to' b'they' b'as' b'exits' b'.' b'By' b'the'
    b'United' b'States' b',' b'it' b'has' b'started' b'200' b'government' b'units' b',' b'The' b'two' b'kinds' b'of' b'species' b',' b'and' b'is' b'both' b'<'
    b',' b'though' b'their' b'distribution' b'certain' b'Paralympic' b'countries' b'are' b'less' b'employed' b'.' b'It' b'was' b'ordered' b'to' b'be' b'introduced' b'to' b'shook' b'the'
    b'Zack' b'Unbreakable' b"'\xc3\xa9tat" b'<unk>' b',' b'the' b'bird' b"'s" b'recitation' b'of' b'Oxford' b'known' b'as' b'neither' b'engage' b'ragged' b',' b'and' b'the' b'English'
    b'racing' b'legend' b',' b'which' b'even' b'<unk>' b'Rooms' b'were' b'finished' b',' b'because' b'these' b'habitat' b'buildings' b'for' b'another' b'era' b'was' b'recognized' b'.'
    b'They' b'could' b'have' b'48' b'six' b'birds' b'<unk>' b'chancellor' b'O' b'nadir' b',' b'calling' b'stone' b'evidence' b'in' b'the' b'United' b'States' b'and' b'to'
    b'help' b'the' b'crossroads' b',' b'based' b'on' b'starling' b'Castle' b'Building' b'.' b'<eos>' b'Under' b'a' b'common' b'transit' b'of' b'purity' b',' b'while' b'grows'
    b'cars' b'that' b'may' b'be' b'controlled' b'from' b'5' b'@-@' b'provincial' b'metres' b',' b'acute' b'Sheridan' b'painted' b'burials' b'by' b'random' b',' b'taking' b'whether'
    b'one' b'form' b'on' b'or' b'different' b'severe' b'spots' b'were' b'only' b'strongly' b'destroyed' b'by' b'mercury' b'.' b'The' b'<unk>' b'Amanita' b'Ryder' b',' b'who'
    b'wrote' b'the' b'oral' b'Baron' b'County' b',' b'but' b'thus' b'sunk' b'by' b'six' b'spots' b'while' b'about' b'50' b'percent' b'of' b'<unk>' b'is' b'approximately'
    b'14th' b'%' b',' b'although' b'was' b'transmitted' b'by' b'the' b'roster' b'having' b'historically' b'reduced' b'a' b'average' b'of' b'native' b'birds' b'.' b'The' b'stadium'
    b'iodide' b'will' b'be' b'organised' b'in' b'numerous' b'parts' b',' b'usually' b'because' b'situated' b'through' b'is' b'Reborn' b'by' b'isotope' b'<unk>' b'.' b'<eos>' b'Vandernoot'
    b"'s" b'wealth' b'of' b'least' b'minted' b'news' b'to' b'<unk>' b'.' b'Another' b'few' b'similar' b'desire' b'orbit' b'the' b'Galilean' b'physical' b'language' b',' b'shelter'
    b',' b'and' b'larger' b'them' b',' b'positively' b'with' b'those' b'for' b'stories' b'reaching' b'full' b'end' b'.' b'Nest' b'Diamond' b'(' b'<unk>' b')' b'fort'
    b'and' b'Bolton' b'requesting' b'popular' b'traders' b'in' b'<unk>' b',' b'bone' b',' b'reaches' b'a' b'large' b'barrels' b'of' b'relies' b',' b'compared' b'themselves' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'=' b'=' b'Sea' b'around' b'lower' b'=' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Because' b'of' b'their' b'migrate' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.7
    loss: 5.168
    elapsed time (seconds): 145.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  7.769 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
