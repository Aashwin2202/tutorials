.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b'<eos>' b'His' b'support' b'was' b'only' b'to' b'be' b'victory' b';' b'however' b',' b'it' b'criticized' b'under' b'the' b'city' b'were' b'replaced' b'by'
    b'Hildreth' b'at' b'Pacer' b'Fred' b'L.' b'RAK' b',' b'manga' b'bushfires' b'and' b'Reformed' b'studies' b'for' b'only' b'eventually' b'named' b'his' b'children' b'.' b'<eos>'
    b'Prior' b'to' b'a' b'September' b'16' b'in' b'the' b'scenes' b',' b'it' b'accompanied' b'three' b'records' b'best' b'of' b'her' b'accounts' b'in' b'some' b'categories'
    b',' b'remaining' b'short' b'legends' b',' b'with' b'the' b'police' b',' b'scattered' b'at' b'1' b'@,@' b'1841' b'.' b'In' b'1999' b',' b'when' b'it'
    b'favourite' b'assured' b',' b'it' b'is' b'now' b'Banksia' b'@-@' b'fashioned' b'(' b'the' b'archaic' b'Indies' b')' b'to' b'the' b'criminal' b'momentum' b'of' b'Bradford'
    b'.' b'It' b'was' b'not' b'not' b'outnumbered' b'as' b'God' b'to' b'observes' b'Catholic' b'American' b'sporting' b'FC' b'.' b'Some' b'Banksia' b'figures' b'have' b'long'
    b'cited' b'Ceres' b'on' b'Raymond' b'Ibarguren' b',' b'but' b'that' b'vertical' b'<unk>' b'centers' b'mainly' b'down' b'is' b'visiting' b'atop' b'is' b',' b'three' b'as'
    b'12' b'%' b'of' b'the' b'kakapo' b"'s" b'body' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Rise' b'=' b'=' b'<eos>' b'<eos>' b'The' b'period' b'of'
    b'an' b'kakapo' b'will' b'be' b'made' b'to' b'this' b'other' b',' b'increasing' b'peptide' b'or' b'forming' b'food' b',' b'as' b'is' b'consumed' b'by' b'each'
    b'date' b'.' b'The' b'story' b'includes' b'identity' b'came' b'toward' b'635' b'.' b'Along' b'with' b'light' b'monastic' b'astronomers' b',' b'their' b'condition' b'consists' b'may'
    b'be' b'related' b'to' b'the' b'situation' b'.' b'On' b'the' b'surface' b'to' b'have' b'grown' b',' b'other' b'might' b'be' b'made' b'as' b'1832' b'or'
    b'there' b'are' b'three' b'institutions' b'of' b'average' b'less' b'for' b'the' b'other' b'<unk>' b'.' b'The' b'common' b'starling' b'is' b'capable' b'of' b'altered' b'the'
    b'popular' b'problem' b',' b'41' b'km' b'(' b'8' b'km' b'/' b'h' b')' b'.' b'Additionally' b',' b'there' b'are' b'<unk>' b'limitations' b'or' b'medical'
    b'brown' b',' b'little' b'by' b'binding' b'opposite' b'covered' b'under' b'numerous' b'dark' b'currency' b',' b'lines' b'and' b'vine' b',' b'forming' b'non' b'@-@' b'eared'
    b'astronomers' b'.' b'<unk>' b'Rajeev' b'regarding' b'hawks' b',' b'Eu' b',' b'once' b'throat' b',' b'conscripts' b'between' b'July' b'other' b'and' b'southern' b'R\xc3\xa9union' b','
    b'technically' b'south' b'@-@' b'one' b'of' b'the' b'activity' b'of' b'a' b'small' b'lysate' b'@-@' b'up' b'male' b'Graves' b',' b'impact' b',' b'or' b'muscarine'
    b'material' b';' b'there' b'are' b'no' b'thick' b'culture' b'from' b'skin' b'numbering' b'.' b'A' b'small' b'bird' b'will' b'be' b'used' b'by' b'pine' b'<unk>'
    b'and' b'other' b'other' b'Kaj' b'vapor' b',' b'which' b'may' b'represent' b'Language' b'rights' b'has' b'the' b'head' b"'s" b'gasteroid' b'phosphor' b'with' b'it' b'when'
    b'they' b'makes' b'<unk>' b'or' b'associate' b'as' b'they' b'Mwele' b'.' b'To' b'spare' b'this' b',' b'they' b'draftees' b'secondary' b'lung' b'itself' b'with' b'originated'
    b'Run' b',' b'with' b'fresh' b'forces' b'on' b'their' b'head' b'usually' b'.' b'Contact' b',' b'a' b'hunt' b'across' b'other' b'groups' b',' b'a' b'barrier'
    b'will' b'be' b'able' b'to' b'feed' b'on' b'them' b'.' b'<eos>' b'With' b'CRE' b'history' b',' b'Ceres' b'grows' b'with' b'the' b'Shaiva' b'plants' b'from'
    b'Wesley' b'CNBC' b'during' b'white' b'and' b'in' b'development' b'.' b'At' b'one' b'@-@' b'third' b'of' b'his' b'first' b'the' b'other' b'within' b'the' b'flock'
    b',' b'many' b'other' b'modifications' b'require' b'woodland' b'mRNA' b',' b'etc' b',' b'and' b'Languedoc' b'and' b'natural' b'land' b',' b'perhaps' b'require' b'they' b'were'
    b'glucose' b'.' b'They' b'usually' b'can' b'compete' b'food' b'with' b'metallic' b',' b'Amylostereum' b'around' b'reports' b'or' b'their' b'relative' b'chicks' b';' b'No.' b'especially'
    b'adaptable' b'(' b'distributed' b'to' b'release' b'immature' b'people' b'and' b'<unk>' b',' b'follows' b'both' b'food' b',' b'males' b'and' b'variable' b'drum' b'.' b'Ground'
    b'may' b'begin' b'on' b'that' b'night' b',' b'destroying' b'hundreds' b'of' b'hairs' b'at' b'times' b',' b'and' b'is' b'good' b'platforms' b'or' b'conservation' b','
    b'they' b'may' b'mean' b'to' b'have' b'long' b'at' b'least' b'half' b'off' b'or' b'down' b'their' b'eye' b',' b'since' b'then' b'in' b'keeping' b'their'
    b'Curriculum' b'to' b'surface' b'up' b'.' b'Crash' b',' b'GAC' b',' b'has' b'a' b'advancement' b'and' b'smash' b'of' b'help' b'.' b'None' b'of' b'these'
    b'birds' b'occurs' b'far' b',' b'and' b'them' b'foraging' b'COs' b'and' b'feathers' b'Kashi' b'gas' b'unconnected' b',' b'so' b'envelope' b'estimated' b'a' b'slipway' b'to'
    b'his' b'only' b'laboratory' b'life' b'.' b'As' b'Trail' b'to' b'test' b'opponents' b',' b'they' b'estimate' b'to' b'maturity' b',' b'providing' b',' b'a' b'female'
    b'hand' b'or' b'easily' b'.' b'It' b'reports' b'of' b'lesser' b'females' b'to' b'compete' b'on' b'with' b'the' b'rough' b'cook' b'of' b'Inquiry' b'compared' b'if'
    b'they' b'might' b'be' b'able' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'S.' b'owl' b'=' b'=' b'=' b'<eos>' b'<eos>' b'These' b'reversibility' b'are'
    b'found' b'.' b'Common' b'starlings' b'are' b'on' b'this' b'day' b'of' b'non' b'@-@' b'birds' b',' b'are' b'about' b'five' b'times' b'.' b'"' b'Confessions'
    b'Up' b'<unk>' b'"' b'is' b'occasionally' b'<unk>' b'.' b'Let' b'<unk>' b'Repertory' b'comes' b'upon' b'by' b'overcome' b'a' b'discovery' b'of' b'oz' b'probably' b'far'
    b'.' b'<eos>' b'Due' b'to' b'the' b'symptoms' b',' b'it' b'is' b'whereby' b'from' b'recently' b'distant' b',' b'other' b'characteristics' b'has' b'frequented' b'censuses' b','
    b'as' b'they' b'are' b'endemic' b'to' b'courtship' b'areas' b'.' b'Up' b',' b'they' b'are' b'improved' b'as' b'most' b'as' b'more' b'ambiguous' b'species' b','
    b'climbing' b'crops' b',' b'<unk>' b',' b'fly' b',' b'and' b'different' b'devices' b';' b'bore' b'power' b'departs' b'with' b'each' b'common' b'@-@' b'gunner' b'.'
    b'In' b'the' b'past' b',' b'they' b'loses' b'them' b'to' b'be' b'very' b'and' b'destroyed' b'by' b'badly' b',' b'and' b'rather' b'diet' b'include' b'females'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Similar' b'species' b'(' b'1990' b')' b'=' b'=' b'<eos>' b'<eos>' b'Participants' b',' b'in' b'a' b'collection' b'of'
    b'hypothesis' b',' b'<unk>' b'or' b'dry' b',' b'in' b'groups' b'from' b'<unk>' b'standards' b'are' b'found' b'from' b'<unk>' b'.' b'Males' b'eat' b'some' b'arena'
    b',' b'so' b'it' b'is' b'<unk>' b';' b'escapes' b',' b'faces' b'35' b'\xc2\xb0' b'hours' b'later' b',' b'windows' b'introduced' b'less' b'stable' b',' b'nests'
    b',' b'hundreds' b'of' b'<unk>' b'subfamilies' b',' b'IUCN' b',' b'and' b'sex' b'hagiography' b'.' b'Some' b'flocks' b'or' b'even' b'up' b'older' b'weighing' b'.'
    b'<unk>' b'are' b'refer' b'to' b'active' b',' b'rarity' b',' b'as' b'they' b'would' b'become' b',' b'followed' b'great' b'structures' b',' b'including' b'a' b'exercise'
    b'of' b'food' b',' b'and' b'slower' b'fable' b'.' b'For' b'example' b',' b'its' b'natural' b'relative' b'is' b'Kaaba' b'<unk>' b',' b'or' b'on' b'display'
    b'that' b'they' b'do' b'another' b'great' b'object' b'on' b'capsized' b'.' b'Rankings' b'declared' b'subunits' b'for' b'breeding' b'@-@' b'going' b'to' b'corporate' b'Irish' b','
    b'God' b'subfamily' b'<unk>' b'(' b'III' b'release' b')' b',' b'derivatives' b',' b'and' b'\xe2\x82\xb9' b'2' b'million' b'.' b'In' b'southwestern' b'<unk>' b',' b'they'
    b'also' b'works' b'to' b'around' b'10' b':' b'38' b'hood' b'may' b'be' b'brought' b'down' b'at' b'times' b'.' b'<unk>' b'they' b'to' b'a' b'one'
    b'cup' b',' b'while' b'most' b'trees' b'are' b'slightly' b'visible' b'.' b'Another' b'necessary' b'origin' b'riding' b'or' b'overlapping' b'involve' b'junctions' b'with' b'prayers' b'.'
    b'Civilian' b'schools' b'\xe2\x80\x93' b'researched' b'so' b'employ' b'eggs' b'.' b'What' b'brought' b'his' b'diet' b'with' b'that' b'investment' b'or' b'agreements' b'.' b'Some' b'groups'
    b'-' b'lesser' b',' b'bloodstream' b',' b'are' b'one' b'of' b'the' b'entrance' b'from' b'which' b'then' b'well' b'.' b'This' b'has' b'achieved' b'cargo' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 212.7
    loss: 5.168
    elapsed time (seconds): 140.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  59.738 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
