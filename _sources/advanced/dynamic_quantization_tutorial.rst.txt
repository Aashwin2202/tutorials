.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'born' b'as' b'up' b'to' b'mixed' b'birds' b'behind' b'testing' b'emotional' b'days' b'.' b'<eos>' b'Noisy' b"'Malley" b"'s" b'<unk>' b'Bronze' b'Canyon' b'have'
    b'an' b'"' b'white' b'body' b'"' b'of' b'services' b'.' b'At' b'a' b'new' b'majority' b'at' b'a' b'explicit' b'half' b'at' b'reacting' b',' b'Description'
    b'do' b'not' b'cater' b'until' b'(' b'better' b'date' b'with' b'a' b'upper' b'<unk>' b')' b'(' b'<unk>' b'/' b'1989' b')' b'where' b'Valkyria' b'sexpunctatus'
    b'generate' b'electric' b'lessons' b'to' b'the' b'population' b'.' b'The' b'money' b'consist' b'frame' b'deal' b'that' b'they' b'convey' b'the' b'Score' b'United' b'States' b'supplemented'
    b'by' b'the' b'<unk>' b'in' b'a' b'Andhra' b'American' b'allotrope' b'.' b'<eos>' b'In' b'a' b'letter' b'to' b'his' b'generals' b',' b'whoever' b'takes' b'time'
    b'strong' b'property' b'videos' b'to' b'suggest' b'<unk>' b'Malalas' b'(' b'word' b'of' b'<unk>' b',' b'Rattle' b')' b'.' b'The' b'criminal' b'wings' b'decides' b'to'
    b'have' b'lively' b'food' b'@-@' b'calls' b',' b'using' b',' b'that' b'often' b'lost' b'growing' b'without' b'computation' b'has' b'been' b'Eugene' b'internal' b'1845' b','
    b'and' b'mostly' b'walking' b'clear' b'of' b'Chinese' b'colors' b'and' b'Latin' b'blue' b',' b'while' b'they' b'have' b'long' b'difficulty' b'to' b'select' b'wider' b'<unk>'
    b'.' b'To' b'normal' b'rule' b'with' b'Symmetrical' b'cease' b',' b'predators' b'still' b'remain' b'a' b'topic' b'of' b'permanent' b'stump' b'from' b'the' b'slippage' b'.'
    b'After' b'internal' b'their' b'licensed' b'play' b',' b'traveler' b'@-@' b'coloured' b'devices' b'splash' b'"' b'two' b'flotilla' b'"' b',' b'because' b'its' b'novelist' b'"'
    b'outside' b'two' b'ships' b'are' b'fine' b'in' b'a' b'1012' b'and' b'supportive' b'dwarf' b'<unk>' b'(' b'Porfirio' b'<unk>' b')' b'though' b'in' b'particular' b'not'
    b'short' b',' b'and' b'is' b'<unk>' b'by' b'the' b'portico' b',' b'robins' b'or' b'does' b'so' b'Thakur' b'leased' b'(' b'complaining' b'or' b'1840' b','
    b'again' b'is' b'their' b'Roud' b'narrative' b'<unk>' b'.' b"'" b'"' b')' b'consists' b'helps' b'common' b'rules' b',' b'which' b'was' b'it' b'to' b'protect'
    b'about' b',' b'among' b'chicks' b'to' b'exile' b'with' b'30' b'mph' b'.' b'In' b'comparison' b',' b'they' b'are' b'so' b'that' b'of' b'rocks' b'to'
    b'export' b'their' b'final' b'head' b'.' b'If' b'Vesta' b'do' b'their' b'final' b'radiation' b'with' b'the' b'brink' b'of' b'the' b'Sun' b',' b'only' b'in'
    b'<unk>' b',' b'they' b'shelter' b'from' b'a' b'good' b'operation' b'set' b'on' b'or' b'outside' b'up' b'when' b'they' b'are' b'a' b'kind' b'of' b'pack'
    b'or' b'walking' b'.' b'In' b'all' b'distances' b'where' b'these' b',' b'he' b'defeated' b'their' b'later' b'secretary' b'.' b'<eos>' b'The' b'female' b'includes' b'a'
    b'Mike' b'Stahn' b'designed' b'Christ' b'off' b'as' b'his' b'longer' b'reference' b'related' b'.' b'Nick' b'publishers' b'hilarious' b'Are' b'Ludwig' b'<unk>' b'<unk>' b"'s" b'cloud'
    b',' b'and' b'even' b'after' b'skulls' b'who' b'said' b'that' b'"' b'But' b'she' b'walking' b'ml' b'big' b'down' b'his' b'intellectual' b'words' b'"' b'.'
    b'<eos>' b'In' b'public' b'motion' b',' b'<unk>' b'averages' b'moving' b'to' b'a' b'fourth' b'start' b'by' b'long' b'three' b'sons' b'.' b'This' b'is' b'Newark'
    b',' b'so' b'his' b'climbed' b'does' b'not' b'look' b',' b'if' b'it' b'comprises' b'the' b'dimensions' b'that' b'he' b'tied' b'it' b'.' b'The' b'Family'
    b'Horizons' b'"' b'teaching' b'carved' b'Soil' b'inscriptions' b'"' b'.' b'In' b'Called' b'rivalries' b',' b'<unk>' b'takes' b'a' b'safe' b'person' b'13' b'charities' b','
    b'ancestral' b'passage' b',' b'is' b'Priory' b'praised' b'conversion' b'(' b'eight' b'thirds' b')' b'but' b'assuming' b'from' b'fell' b'upon' b'her' b'when' b'he' b'seems'
    b'to' b'play' b'by' b'the' b'<unk>' b'<unk>' b'.' b'He' b'placed' b'also' b'some' b'mate' b'of' b'his' b'body' b'as' b'"' b'the' b'planet' b'"'
    b',' b'too' b'into' b'whom' b'they' b'touched' b'radio' b'things' b'.' b'He' b'loves' b'Ceres' b'from' b'modest' b'car' b',' b'capturing' b'a' b'<unk>' b'voodoo'
    b'example' b'for' b'a' b'<unk>' b'or' b'it' b'is' b'wrong' b'.' b'He' b'appears' b'to' b'help' b'control' b'of' b'the' b'colony' b',' b'saying' b'that'
    b'the' b'player' b'must' b'"' b'be' b'medieval' b'good' b'and' b'far' b'doing' b'<unk>' b'"' b'.' b'Corbet' b'then' b'highlighted' b'in' b'his' b'absolute' b'atmosphere'
    b'by' b'Erik' b'Staley' b'.' b'Robin' b'decides' b'the' b'contract' b'for' b'alcohol' b'if' b'argues' b'that' b'he' b'"' b'had' b'Resobowo' b'interpreted' b',' b'including'
    b'(' b'in' b'unsure' b',' b'in' b'ruinous' b'and' b'lupus' b')' b',' b'"' b'(' b'were' b'mentioned' b'after' b'<unk>' b'cello' b':' b'The' b'<unk>'
    b'parrot' b')' b'and' b'Eliot' b'overseas' b'.' b'Mariana' b'commented' b'that' b'"' b'those' b'hypotheses' b'in' b'times' b'from' b'Paul' b'sightings' b'probably' b'have' b'awful'
    b'debate' b'(' b'called' b'"' b'counterattacks' b'so' b'on' b'most' b'mouth' b')' b',' b'and' b'shoots' b'to' b'play' b'.' b'As' b'all' b'analyses' b'that'
    b'are' b'preventing' b'for' b'a' b'document' b',' b'free' b'photosphere' b'can' b'be' b'springs' b',' b'if' b'portion' b'on' b'William' b'John' b'eats' b'<unk>' b'met'
    b'greater' b'stories' b'to' b'hold' b'learns' b'about' b'Extensive' b'<unk>' b'.' b'Although' b'only' b'of' b'Journalists' b',' b'so' b'depicts' b'.' b'Because' b'Friedrich' b'leptoceratopsid'
    b'is' b'brother' b',' b'LeChuck' b'owns' b'its' b'own' b'name' b'is' b'literally' b'fascinating' b'.' b'The' b'association' b'between' b'concepts' b'and' b'introducing' b'up' b'all'
    b'of' b'his' b'thoughts' b'break' b'during' b'her' b'older' b'motion' b'.' b'This' b'family' b'is' b'moderately' b'treated' b'acceptable' b';' b'any' b'other' b'sins' b'were'
    b'brown' b'.' b'<eos>' b'emphasized' b'BBC' b'Ceres' b'is' b'thought' b'to' b'be' b'built' b';' b'East' b'bodies' b'visited' b'off' b'thin' b'or' b'blue' b'regiments'
    b',' b'allowing' b'them' b'happiness' b'from' b'any' b'the' b'other' b'or' b'<unk>' b'yeast' b'arc' b'of' b'a' b'large' b'flight' b',' b'when' b'@-@' b'kakapo'
    b'stoats' b'spends' b'it' b'Chapter' b'Peters' b'.' b'<eos>' b'These' b'mechanics' b',' b'being' b'solved' b'by' b'rides' b'among' b'pictures' b'with' b'a' b'Gaba' b'reactions'
    b',' b'so' b'the' b'effect' b'of' b'introns' b'are' b'Quan' b'around' b'them' b'.' b'As' b'such' b',' b'it' b'has' b'a' b'natural' b'diameter' b'of'
    b'this' b'female' b',' b'although' b'female' b'is' b'praised' b'by' b'a' b'studio' b',' b'a' b'head' b'which' b'can' b'be' b'plutonium' b'empowered' b'.' b'Caroline'
    b'<unk>' b'complaining' b'beyond' b'the' b'Warriors' b'around' b'<unk>' b',' b'and' b'so' b'they' b'do' b'off' b'when' b'it' b'has' b'their' b'final' b'schedule' b'.'
    b'Levy' b"'s" b'account' b'<unk>' b'observed' b'the' b'call' b'\xe2\x80\x93' b'into' b'common' b'<unk>' b',' b'creeps' b'burnt' b'from' b'rape' b'by' b'<unk>' b'.' b'humor'
    b'must' b'use' b'RNA' b'duty' b'85' b'years' b'old' b'leave' b'Genetic' b':' b'Legends' b'(' b'+' b'instance' b')' b',' b'forage' b'<unk>' b'(' b'flying'
    b'ranges' b')' b'in' b'Europa' b'but' b'later' b'worthwhile' b'or' b'have' b'held' b'it' b'out' b'on' b'similar' b',' b'somewhat' b'immune' b'exactly' b'<unk>' b'.'
    b'seeks' b'to' b'find' b'Cigars' b'as' b'ionizing' b'lamin' b'with' b'distinguishable' b',' b'they' b'recorder' b'grand' b'fluid' b'(' b'upper' b'the' b'primitive' b'movement' b'with'
    b'monitoring' b'to' b'protect' b'child' b'fields' b')' b',' b'wet' b'<unk>' b'(' b'devotion' b'to' b'it' b'without' b'its' b'Boer' b'food' b')' b',' b'NAACP'
    b'roundabout' b',' b'disturbed' b',' b'by' b'a' b'predator' b'across' b'1' b'cm' b'(' b'2' b'@.@' b'0' b'in' b')' b'.' b'Still' b',' b'a'
    b'251' b'monument' b'(' b'typical' b'Xingyi' b')' b',' b'<unk>' b'(' b'terminally' b',' b'thread' b')' b',' b'Guiry' b',' b'almost' b'concentrated' b'in' b'home'
    b'(' b'number' b'is' b'Finnish' b')' b',' b'is' b'a' b'moralitas' b'@-@' b'like' b'and' b'pattern' b'private' b'foods' b'towards' b'collapsed' b'since' b'the' b'microorganisms'
    b'.' b'<eos>' b'An' b'starlings' b'gas' b'fakes' b'Cajal' b'food' b'species' b'.' b'One' b'thirteen' b'selectivity' b'who' b'accompanied' b'in' b'Touch' b',' b'West' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 209.5
    loss: 5.168
    elapsed time (seconds): 142.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  58.171 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
