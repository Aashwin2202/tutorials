.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Airborne' b'colonies' b'as' b'their' b'sons' b'of' b'genes' b'a' b'decisive' b'total' b'of' b'Recording' b'History' b'that' b'were' b'with' b'the' b'M\xc4\x81ori' b'.' b'They'
    b'face' b'after' b'insubordination' b',' b'<unk>' b'1964' b',' b'a' b'Chinese' b'improvement' b'through' b'art' b'Bean' b'.' b'<eos>' b'<unk>' b'compounds' b'for' b'Colony' b'are'
    b'Cyrillic' b'in' b'the' b'fusion' b'(' b'R' b'instruction' b')' b'kitchens' b',' b'which' b'find' b'up' b'home' b'to' b'old' b'communities' b',' b'such' b'as'
    b'The' b'International' b'gut' b'.' b'In' b'December' b'1996' b',' b'at' b'the' b'University' b'of' b'The' b'Christiana' b'History' b',' b'Bono' b'has' b'represent' b'helps'
    b'or' b'introduced' b'it' b'to' b'6' b'@.@' b'5' b'km' b'(' b'8' b'@.@' b'4' b'in' b')' b'and' b'flooding' b'with' b'throwing' b'a' b'DDoS'
    b'circulation' b'of' b'carbon' b',' b'as' b'/' b'25' b'\xe2\x80\x93' b'80' b'.' b'Writing' b'on' b'the' b'100' b'roof' b',' b'Entire' b'barren' b',' b'it'
    b'is' b'a' b'neutral' b'mosaic' b'average' b'discovery' b',' b'and' b'planned' b'the' b'outside' b'limit' b'of' b'Ceres' b'are' b'the' b'decay' b'of' b'how' b'they'
    b'are' b'high' b'.' b'<eos>' b'<eos>' b'=' b'=' b'<unk>' b'=' b'=' b'<eos>' b'<eos>' b'The' b'drinking' b'range' b'of' b'Venus' b'in' b'males' b'were'
    b'completed' b'in' b'some' b'murders' b'including' b'violence' b',' b'including' b'4' b'@.@' b'4' b'%' b',' b'with' b'cougars' b'being' b'more' b'less' b'hostile' b'with'
    b'William' b'Rashid' b'in' b'2008' b'.' b'Although' b'they' b'are' b'considered' b'of' b'sea' b',' b'the' b'Kakapo' b'starling' b'is' b'powerless' b'by' b'Iron' b'Training'
    b'at' b'a' b'beak' b'from' b'152Eu' b'.' b'The' b'Australian' b'starling' b'was' b'Hoysala' b'by' b'Hampshire' b'Catherine' b'in' b'1070' b',' b'hypothesis' b'head' b'.'
    b'<unk>' b'applies' b'by' b'the' b'media' b'were' b'rounded' b'west' b',' b'in' b'publications' b'steep' b'capital' b'shop' b'musicians' b'over' b'those' b'of' b'rectangular' b'degrees'
    b',' b'resulting' b'in' b'Russia' b'.' b'They' b'escaping' b'Suvarnabhumi' b'<unk>' b'on' b'land' b',' b'as' b'they' b'have' b'predicted' b':' b'<eos>' b'Because' b'two'
    b'distinct' b'people' b'evolve' b'on' b'<unk>' b'\xe2\x80\x94' b'but' b'in' b'Let' b'and' b"'" b'Day' b',' b"'" b'with' b'fused' b'pair' b'of' b'<unk>' b','
    b'keratin' b',' b'on' b'a' b'giant' b'police' b'on' b'high' b',' b'false' b',' b'goats' b'and' b'cheese' b'in' b'or' b'<unk>' b'.' b'As' b'all'
    b'as' b'religions' b'hectares' b',' b'bathing' b'the' b'species' b'are' b'"' b'armed' b'linear' b'm' b'"' b'is' b'normally' b'successful' b'.' b'The' b'catalysis' b'of'
    b'former' b'starlings' b'in' b'Northern' b'Ireland' b'however' b'Christian' b'cougar' b',' b'with' b'a' b'population' b'of' b'stunningly' b',' b'nesting' b'clergy' b'and' b'disability' b'O'
    b'la' b'IV' b',' b'<unk>' b'missiles' b',' b'and' b'other' b'life' b'with' b'its' b'flight' b',' b'in' b'mid' b'@-@' b'1964' b',' b'about' b'20'
    b'economy' b'.' b'As' b'none' b'of' b'the' b'series' b"'s" b'names' b',' b'they' b'may' b'be' b'broken' b'by' b'occurrence' b'by' b'making' b'most' b'of'
    b'his' b'existence' b',' b'and' b'a' b'subject' b'who' b'has' b'been' b'with' b'century' b'food' b'supply' b'of' b'rapid' b'starling' b'.' b'isotopes' b'are' b'endemic'
    b',' b'they' b'said' b'much' b'owls' b'.' b'Napol\xc3\xa9on' b'seems' b'to' b'be' b'full' b'in' b'late' b',' b'the' b'King' b"'s" b'grandfather' b'\xe2\x80\x99' b's'
    b'son' b'of' b'a' b'<unk>' b'activity' b"'re" b'vocal' b'.' b'<eos>' b'Most' b'flesh' b'status' b'were' b'introduced' b'to' b'signal' b'it' b'agencies' b'would' b'be'
    b'burned' b'.' b'It' b'has' b'also' b'been' b'reported' b'that' b'the' b'<unk>' b'inhabitants' b'<unk>' b'when' b'males' b'Egyptian' b'sites' b'be' b'destroyed' b'.' b'For'
    b'its' b'private' b'labour' b'stores' b'of' b'<unk>' b',' b'<unk>' b'for' b'Great' b'Church' b'sections' b'inappropriate' b'notes' b',' b'although' b'ideas' b',' b'Jains' b'and'
    b'cracks' b',' b'had' b'been' b'accepted' b'in' b'Wallis' b'populations' b'.' b'He' b'both' b'agreed' b'to' b'reconcile' b'adults' b'such' b'as' b'falcons' b',' b'textured'
    b'a' b'item' b'Tawny' b'hockey' b'rocks' b'Astraeus' b'<unk>' b',' b'which' b'terminated' b'power' b'in' b'the' b'lower' b'New' b'York' b'status' b'and' b'with' b'109'
    b'more' b'teams' b'(' b'on' b')' b':' b'$' b'4' b'million' b'Heaney' b'and' b'six' b',' b'and' b'Palisades' b',' b'magnate' b'Calais' b'compared' b'to'
    b'the' b'Zagreb' b'Clifford' b'Conflict' b'.' b'It' b'has' b'been' b'operationally' b'used' b'as' b'supreme' b'species' b'Chicago' b',' b'when' b'a' b'three' b'@-@' b'Orthodox'
    b'Pilot' b'reagent' b',' b'which' b'is' b'transplant' b'by' b'the' b'technical' b'Republic' b'of' b'262' b'to' b'base' b'settlers' b'.' b'A' b'Rebellion' b'of' b'electric'
    b'foods' b'have' b'yet' b'widely' b'involved' b'Helgenberger' b',' b'although' b'dog' b',' b'typical' b'in' b'dusk' b'reported' b'they' b'may' b'be' b'transmitted' b'for' b'individuals'
    b',' b'whose' b'pilot' b'or' b'ceremonial' b'Captain' b'"' b'<unk>' b'tables' b'"' b'.' b'Others' b'explain' b'transcription' b'and' b'likely' b'southern' b'bell' b'visits' b'with'
    b'the' b'bird' b'during' b'a' b'combined' b'coat' b'.' b'The' b'Kashi' b'majority' b'of' b'travelers' b'were' b'CD' b',' b'forming' b'for' b'new' b'or' b'even'
    b'indicate' b'fever' b'and' b'apparent' b'triangles' b'to' b'its' b'wing' b'.' b'The' b'second' b'common' b'clerics' b'have' b'also' b'come' b'with' b'Europe' b'(' b'including'
    b'smaller' b'type' b'of' b'contraception' b'for' b'areas' b')' b',' b'covered' b'conditions' b'and' b'flash' b'practices' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Kings'
    b'have' b'Moritzian' b'behaviour' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Northumberland' b'Greg' b'galericulata' b'in' b'M.' b'Burgoyne' b',' b'Ceres' b'(' b'<unk>' b'season' b','
    b'background' b'al' b'al' b'transitional' b')' b'was' b'an' b'rare' b'meadow' b'spores' b'and' b'individual' b'WCAs' b',' b'along' b'by' b'Pakistan' b'to' b'mount' b','
    b'showing' b'acceptance' b'to' b'New' b'Zealand' b'as' b'one' b'of' b'the' b'long' b'popular' b'and' b'population' b'types' b'.' b'In' b'these' b'<unk>' b',' b'the'
    b'kakapo' b'was' b'acquired' b'by' b'<unk>' b'<unk>' b'at' b'<unk>' b',' b'Alvin' b'Milton' b',' b'Green' b'heat' b',' b'are' b'as' b'part' b'of' b'their'
    b'gruesome' b'motion' b',' b'and' b'it' b'was' b'lost' b'to' b'combat' b'fertilizers' b'and' b'joined' b'by' b'leaflets' b'by' b'1882' b'.' b'Another' b'approaches' b'on'
    b'this' b'declines' b'of' b'different' b'differentiation' b'lies' b'in' b'his' b'own' b'areas' b'at' b'stomach' b'foot' b'(' b'2' b'@.@' b'4' b'in' b')' b'around'
    b'the' b'nominate' b'Castle' b"'s" b'midst' b'.' b'These' b'forms' b'include' b'standing' b',' b'probably' b'called' b'for' b'their' b'Nuclear' b'Hammett' b',' b'totaled' b'booms'
    b'at' b'<unk>' b'ledges' b',' b'a' b'<unk>' b'bite' b'for' b'<unk>' b',' b'unwittingly' b'director' b'John' b'<unk>' b',' b'Van' b'<unk>' b',' b'during' b'1790'
    b'known' b'as' b'pure' b',' b'saints' b',' b'announcements' b',' b'iteration' b'underground' b',' b'plainly' b'@-@' b'Fruit' b',' b'<unk>' b',' b'<unk>' b',' b'Peak'
    b',' b'hampering' b',' b'ranks' b'or' b'<unk>' b',' b'often' b'preventing' b'food' b'appellations' b'.' b'The' b'diaspora' b'cannot' b'be' b'demonstrated' b'by' b'a' b'short'
    b'change' b'to' b'them' b'.' b'This' b'mixture' b'of' b'qualifying' b',' b'heating' b',' b'or' b'rosellas' b'rather' b'than' b'as' b'they' b'feed' b',' b'and'
    b'<unk>' b'clothes' b'are' b'analyzed' b'.' b'One' b'of' b'those' b'of' b'eight' b'children' b',' b'<unk>' b'secluded' b'ranges' b',' b'made' b'for' b'the' b'<unk>'
    b'majority' b'kakapo' b',' b'and' b'does' b'not' b'be' b'its' b'way' b'at' b'one' b'year' b'.' b'The' b'small' b'unfavorable' b'courtship' b'supply' b'<unk>' b'('
    b'<unk>' b')' b'small' b'subspecies' b'on' b'the' b'bricks' b'are' b'white' b'.' b'There' b'is' b'some' b'species' b'that' b'result' b'in' b'Irish' b'territory' b','
    b'this' b'appears' b'into' b'fat' b',' b'killing' b'the' b'<unk>' b',' b'particularly' b'1075' b'.' b'They' b'engendered' b'John' b'mantelli' b'shipped' b'the' b'first' b'spring'
    b'to' b'perform' b'rather' b'the' b'fungal' b'amounts' b'are' b'among' b'the' b'some' b'degradation' b'.' b'The' b'species' b'increases' b'on' b'3' b'April' b'2006' b'balancing'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 220.7
    loss: 5.168
    elapsed time (seconds): 140.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  6.990 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
