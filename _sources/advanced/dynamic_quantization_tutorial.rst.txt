.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'his' b'distinctive' b'troubles' b'in' b'a' b'low' b'@-@' b'tale' b'solution' b',' b'though' b'he' b'found' b'a' b'easy' b'relationship' b'of' b'authors' b'against' b'in'
    b'Halle' b'.' b'Like' b'<unk>' b',' b'the' b'sponsors' b'was' b'held' b'against' b'him' b'the' b'<unk>' b'Survey' b'of' b'Leinster' b'.' b'During' b'September' b'21'
    b',' b'1918' b',' b'the' b'Elder' b'found' b'a' b'prominent' b'Super' b"'Malley" b'Darius' b'P.' b'KNS' b'computer' b'by' b'one' b'piece' b'BoM' b"'s" b'1'
    b'@.@' b'5' b'%' b'of' b'twelve' b'weeks' b',' b'and' b'six' b'additional' b'symbols' b'due' b'to' b'participate' b'on' b'safeguard' b'areas' b'.' b'<eos>' b'Three'
    b'abundant' b'blocks' b'on' b'the' b'rising' b'parking' b'dollar' b'are' b'removed' b'by' b'accurate' b'funds' b'.' b'<unk>' b'from' b'the' b'6' b'@,@' b'Awali' b'long'
    b'tons' b'(' b'3' b'@,@' b'000' b')' b'of' b'Lake' b'Snelling' b'(' b',' b'iron' b'sections' b'as' b'shorter' b'Catholic' b'planet' b'island' b',' b'and'
    b'a' b'records' b'team' b'envisaged' b'inevitably' b')' b',' b'with' b'2' b'in' b'(' b'66' b'\xc2\xb0' b')' b'and' b'5' b'curriculum' b',' b'and' b'Sanz'
    b"'s" b'monoxide' b'body' b'and' b'pre' b'@-@' b'player' b'(' b'<unk>' b')' b'.' b'Another' b'odor' b'breakup' b'designed' b'to' b'earth' b'.' b'When' b'increasing'
    b',' b'it' b'is' b'Dublin' b'and' b'often' b'trained' b',' b'that' b'the' b'planet' b'couldn' b"'t" b'not' b'address' b'beetles' b'as' b'well' b'as' b'his'
    b'old' b'beak' b'.' b'It' b'has' b'one' b'piece' b',' b'and' b'it' b'is' b'controlled' b'by' b'William' b'K.' b'@-@' b'Arab' b'diagram' b',' b'with'
    b'the' b'forest' b"'s" b'John' b'System' b'(' b'baptised' b'collection' b'to' b'draw' b'to' b'a' b'tenor' b')' b'.' b'<eos>' b'Prior' b'to' b'<unk>' b','
    b'Parker' b'is' b'fewer' b'lines' b'out' b'crushed' b'with' b'images' b';' b'one' b'face' b'workers' b'were' b'raised' b'so' b'on' b'the' b'organization' b'.' b'The'
    b'show' b'itself' b'has' b'first' b'argued' b'they' b'can' b'be' b'tested' b'.' b'Much' b'of' b'these' b'are' b'visible' b'again' b',' b'or' b'in' b'fact'
    b'from' b'the' b'conclave' b'Chairman' b'and' b'bowlers' b'traced' b'evidence' b',' b'or' b'off' b'to' b'end' b'clinical' b'vehicles' b'when' b'How' b'it' b'is' b'.'
    b'The' b'continental' b'Republic' b'of' b'Cambridge' b',' b'which' b'are' b'unlikely' b'by' b'bunch' b'as' b'"' b'Red' b'scared' b'"' b',' b'is' b'so' b'called'
    b'a' b'banana' b'distance' b'by' b'transport' b'for' b'an' b'other' b'volume' b'.' b'Because' b'it' b'reaches' b'their' b'sister' b'as' b'they' b'other' b'climax' b'to'
    b'bridge' b',' b'and' b'what' b'will' b'run' b'around' b'this' b'other' b'species' b'.' b'They' b'have' b'five' b'more' b'short' b'lines' b';' b'while' b'with'
    b'their' b'return' b'or' b'yield' b',' b'if' b',' b'I' b'pagan' b'kakapo' b'fires' b'completely' b'and' b'pound' b'calls' b',' b'they' b'are' b'even' b'<unk>'
    b'that' b'if' b'classifications' b'who' b'have' b'club' b'proteins' b'screen' b'of' b'meteorites' b'.' b'When' b'other' b'characters' b'do' b'thunderstorm' b'one' b'ranging' b',' b'possessed'
    b'charges' b'exhibit' b'their' b'intensity' b'to' b'control' b'or' b'die' b'.' b'<eos>' b'According' b'to' b'his' b'aggression' b'movement' b',' b'in' b'2013' b',' b'it'
    b'seems' b'to' b'lose' b'real' b'@-@' b'body' b'movements' b'as' b'they' b'were' b'otherwise' b'267' b'.' b'It' b'will' b'be' b'able' b'to' b'approve' b'another'
    b'or' b'because' b'they' b'were' b'a' b'<unk>' b'.' b'This' b'puts' b'an' b'physical' b'Prom' b'for' b'these' b'eye' b'intervals' b',' b'but' b'also' b'<unk>'
    b',' b'that' b'forcing' b'an' b'generally' b'walk' b'.' b'This' b'sex' b'account' b'primarily' b'will' b'be' b'sold' b'on' b'their' b'supernatural' b'moves' b'as' b'they'
    b'will' b'accomplish' b'Cortland' b',' b'taking' b'to' b'contribute' b'to' b'human' b'religions' b'.' b'Barbuda' b'may' b'be' b'steadily' b'allowed' b'in' b'between' b'the' b'gills'
    b'directed' b'by' b'their' b'liver' b'.' b'They' b'also' b'involved' b'M.' b'geologists' b'as' b'discarded' b'is' b'seen' b'.' b'<unk>' b'by' b'hatching' b'associated' b'on'
    b'to' b'assemble' b'scarf' b'after' b'they' b'rapidly' b'feel' b'.' b'They' b'thus' b'sings' b'them' b'they' b'may' b'the' b'bare' b'female' b'objects' b'flesh' b'by'
    b'black' b',' b'nature' b',' b'and' b'their' b'precision' b';' b'"' b'The' b'bird' b'of' b'theorem' b'is' b'most' b'of' b'Homarus' b'unless' b'even' b'serve'
    b'as' b'soon' b'worked' b'around' b'a' b'consult' b'shirt' b'.' b'"' b'Inside' b'that' b'six' b'mammals' b'that' b'who' b'come' b'with' b'from' b'suppression' b'from'
    b'the' b'Gi\xc3\xa3' b'Classic' b'Tabash' b'Manual' b'typical' b',' b'nitrogen' b'sat' b'in' b'invertebrates' b'.' b'The' b'edifice' b'believe' b',' b'"' b'The' b'animal' b'seems'
    b'to' b'come' b'up' b'another' b'or' b'thus' b'on' b'a' b'behavior' b',' b'except' b'it' b',' b'generally' b'any' b'this' b'major' b'practice' b'to' b'have'
    b'"' b'.' b'With' b'example' b'Walpole' b'represents' b'her' b',' b'(' b'1' b'\xe2\x80\x93' b'16' b'@.@' b'83' b'years' b')' b',' b'kakapo' b'crops' b','
    b'and' b'Muslims' b'(' b'primarily' b'signing' b',' b'shocking' b'Sterling' b'combination' b'ball' b'factors' b'or' b',' b'fatigue' b'as' b'grasses' b'of' b'their' b'doubt' b'.'
    b'In' b'order' b',' b'there' b'it' b'population' b'an' b'number' b'of' b'fear' b',' b'enormous' b'Denys' b',' b'and' b'insects' b'representing' b'four' b'more' b'Merry'
    b'wives' b'down' b'the' b'Earth' b',' b'which' b'do' b'not' b'occupy' b'<unk>' b'.' b'Though' b'recent' b'they' b'allow' b',' b'they' b'can' b'be' b'treated'
    b'as' b'food' b'them' b'before' b'saved' b'.' b'Odaenathus' b'wrote' b'that' b'they' b'are' b'an' b'"' b'Ras' b'"' b',' b'though' b'invisible' b'may' b'be'
    b'18' b'kilometres' b'and' b'he' b'weren' b"'t" b'be' b'broadly' b'rather' b'cellular' b'.' b'While' b'1351' b'might' b'<unk>' b'positioned' b'habitat' b'or' b'<unk>' b','
    b'the' b'inner' b'membrane' b'is' b'rectilinear' b'as' b'early' b'as' b'transcend' b'.' b'<eos>' b'In' b'2009' b',' b'Ceres' b'declared' b'<unk>' b'type' b';' b'his'
    b'launching' b'plumage' b'calls' b'on' b'her' b'<unk>' b'efforts' b'of' b'high' b',' b'ashes' b',' b'with' b'Tennyson' b"'s" b'safe' b'maintenance' b'and' b'Triatominae' b'to'
    b'pin' b'their' b'hands' b'to' b'1674' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Modern' b'Mode' b'=' b'=' b'=' b'<eos>' b'<eos>' b'A' b'number'
    b'of' b'birds' b'are' b'<unk>' b'.' b'They' b'use' b'them' b'from' b'their' b'decree' b'\xc3\x9e\xc3\xb3rfinnr' b',' b'necessary' b'in' b'battle' b',' b'and' b'associated' b'up'
    b'of' b'<unk>' b'.' b'The' b'kakapo' b',' b'across' b'a' b'similar' b'eukaryotic' b'diameter' b',' b'means' b'that' b',' b'when' b'the' b'Patent' b'is' b'<unk>'
    b',' b'they' b'lose' b'statute' b'soils' b':' b'incomplete' b',' b'common' b'dark' b'areas' b',' b'on' b'temple' b',' b'symbolism' b',' b'to' b'expose' b'genes'
    b'of' b'Omar' b',' b'promote' b'for' b'males' b'and' b'will' b'<unk>' b'a' b'ring' b'prognosis' b'.' b'However' b',' b'to' b'reverse' b'the' b'body' b'that'
    b'can' b'eat' b'wild' b'rather' b'kinds' b'of' b'birds' b',' b'it' b'comes' b'.' b'This' b'is' b'generally' b'extended' b'to' b'participate' b'with' b'any' b'other'
    b'or' b'made' b'them' b'through' b'ice' b'.' b'Within' b'example' b',' b'males' b'recorded' b'underground' b'contracts' b'such' b'as' b'Electronic' b'<unk>' b',' b'who' b'wears'
    b'the' b'same' b'processes' b'in' b'some' b'other' b'roosts' b'.' b'<eos>' b'Water' b'predation' b'develop' b'displays' b'with' b'six' b'other' b'predators' b',' b'pass' b'to'
    b'color' b'if' b'typically' b'into' b'pinkish' b'acids' b',' b'<unk>' b'or' b'disadvantages' b'draw' b'for' b'food' b'.' b'For' b'this' b'skeletal' b',' b'mRNA' b','
    b'<unk>' b',' b'large' b',' b'evolutionary' b',' b'ages' b',' b'warnings' b'Alexander' b'microscopy' b',' b'moult' b'and' b'Manuel' b'.' b'The' b'first' b'minute' b'may'
    b'be' b'common' b';' b'unlicensed' b'<unk>' b'(' b'<unk>' b')' b'are' b'prohibited' b'.' b'<eos>' b'Extensive' b'spiders' b'and' b'movement' b'were' b'reported' b'to' b'be'
    b'<unk>' b'.' b'<unk>' b'Z.' b'cell' b'can' b'be' b'unique' b'down' b'affected' b'by' b'their' b'<unk>' b'needs' b'even' b'bulkheads' b',' b'so' b'dimensions' b'on'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 215.9
    loss: 5.168
    elapsed time (seconds): 145.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  7.898 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
