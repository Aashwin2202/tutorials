.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'with' b'<unk>' b'(' b'especially' b'nicknames' b',' b'Re' b',' b'often' b'giving' b',' b'and' b'"' b'Always' b'Taylor' b'"' b')' b',' b'but' b'PA'
    b'Vingti\xc3\xa8me' b'collaborated' b'from' b'Port' b'RAK' b'for' b'a' b'100' b'%' b'or' b'act' b'they' b'were' b'over' b'debate' b'.' b'The' b'current' b'pressures' b'sing'
    b'during' b'the' b'previous' b'series' b'of' b'1910' b'are' b'<unk>' b'by' b'other' b'central' b'Yu' b':' b'Right' b'<eos>' b'.' b'=' b'=' b'California' b'magazine'
    b'been' b'expelled' b'acting' b'as' b'both' b'hydride' b'.' b'<eos>' b'All' b'of' b'a' b'few' b'to' b'"' b'are' b'repetitive' b'antagonist' b'"' b'that' b'was'
    b'a' b'associate' b'of' b'charity' b'Pakistan' b'.' b'The' b'fakes' b'cast' b'is' b'led' b'as' b'album' b'as' b'was' b'heard' b'to' b'Ca2' b',' b'and'
    b'a' b'mission' b'was' b'not' b'greatly' b'unemployed' b',' b'due' b'to' b'Comet' b'as' b'far' b'(' b'colour' b')' b'.' b'According' b'to' b'New' b'Zealand'
    b',' b'Theakston' b'sought' b'the' b'song' b"'s" b'one' b'volume' b'the' b'main' b'...' b'miner' b'Everything' b'\xe2\x80\x93' b'planned' b'to' b'hold' b'for' b'the' b'world'
    b'we' b'knowing' b',' b'"' b'rather' b'assent' b'short' b',' b'<unk>' b',' b'dignity' b'.' b'"' b'In' b'an' b'breeding' b'tour' b'55' b'@-@' b'metre'
    b'clubs' b'in' b'the' b'early' b'nationalist' b'Catholic' b'fiction' b',' b'martial' b'American' b'stories' b',' b'1268' b'descriptions' b',' b'<unk>' b',' b'wind' b'birth' b','
    b'Iphig\xc3\xa9nie' b'tournaments' b'work' b',' b'and' b'marking' b'examples' b'of' b'New' b'Zealand' b'.' b'Noisy' b'miners' b'in' b'mixed' b',' b'sometimes' b',' b'<unk>' b','
    b',' b'identified' b'reception' b'to' b'upper' b'data' b'in' b'Ireland' b'.' b'For' b'Korda' b',' b'<unk>' b',' b'iron' b',' b'and' b'yellow' b',' b'do'
    b'not' b'indecent' b'buy' b'and' b'<unk>' b'with' b'natural' b'imagery' b',' b'mounted' b'rapid' b'trees' b'.' b'An' b'aspect' b'of' b'further' b'genera' b'was' b'rich'
    b'.' b'Members' b',' b'up' b'at' b'Trinity' b'Europe' b'with' b'Bone' b'Thomas' b'Martyn' b'structured' b',' b'were' b'not' b'considered' b'in' b'some' b'of' b'their'
    b'literary' b'works' b'and' b'Hathor' b'.' b'<eos>' b'However' b',' b'following' b'conditioned' b'reformers' b'by' b'at' b'least' b'two' b'were' b'converted' b'to' b'play' b'.'
    b'Tears' b'could' b'be' b'stamped' b'on' b'Metromedia' b',' b'and' b'as' b'a' b'greater' b',' b'seemingly' b'when' b'they' b'gain' b'by' b'a' b'gap' b'@-@'
    b'up' b',' b'regardless' b'of' b'Europeans' b'even' b'drive' b'.' b'Bandicoot' b'working' b'on' b'a' b'letter' b'to' b'others' b'itself' b',' b'irises' b'to' b'45'
    b'metres' b'(' b'2' b'mi' b')' b'of' b'50' b'mph' b'(' b'0' b'@.@' b'8' b'.' b')' b'and' b'weakening' b'light' b'(' b'58' b'@.@'
    b'79' b'in' b')' b'350' b'or' b'50' b'by' b'8' b':' b'50' b'@.@' b'38' b'to' b'5' b'@.@' b'4' b')' b'.' b'The' b'nesting'
    b'race' b'is' b'pale' b'intense' b'large' b'injuries' b',' b'as' b'well' b'as' b'second' b'as' b'a' b'adults' b'to' b'set' b'and' b'have' b'full' b'access'
    b'to' b'over' b'50' b'years' b'ago' b'.' b'This' b'ornamented' b'is' b'measured' b'in' b'<unk>' b'for' b'curved' b'to' b'announce' b'their' b'defeats' b'.' b'Some'
    b'factors' b'have' b'unclear' b'aware' b'closed' b'by' b'adults' b'that' b'stood' b'daily' b'away' b'.' b'Due' b'to' b'about' b'twenty' b'million' b'residents' b',' b'more'
    b'than' b'have' b'a' b'Magnum' b'likelihood' b'or' b'easily' b'.' b'Most' b'chicks' b'form' b'little' b'center' b',' b'most' b'small' b'rough' b'color' b',' b'and'
    b'Shylock' b',' b'Taff' b'shelf' b',' b'and' b'peripheral' b'banding' b'.' b'<eos>' b'The' b'same' b'wing' b'needs' b'consisted' b'of' b'nine' b'children' b',' b'including'
    b'20' b'@.@' b'2' b',' b'8' b'@.@' b'5' b',' b'8' b'or' b'32' b'@.@' b'5' b'by' b'archaeologists' b',' b'and' b'brook' b'ocean' b','
    b'with' b'various' b'figures' b'.' b'A' b'approximate' b'Brett' b'boat' b'has' b'heaviest' b'it' b'and' b'retaining' b'in' b'final' b'sanctioned' b'.' b'It' b'methods' b'up'
    b'with' b'population' b',' b'or' b'sternum' b',' b'one' b'they' b'coherent' b'sports' b'range' b',' b'deeper' b'smooth' b'and' b'created' b'long' b'or' b'more' b'compact'
    b'predators' b'.' b'The' b'deaths' b'of' b'New' b'Zealand' b',' b'Romania' b'and' b'Ukraine' b',' b'includes' b'responds' b',' b'one' b'of' b'the' b'longer' b'eye'
    b'.' b'The' b'individual' b'peak' b'with' b'layers' b'Some' b'feedback' b',' b'moving' b'commitment' b'to' b'a' b'erratic' b'regions' b'.' b'As' b'complex' b'can' b'take'
    b'a' b'4' b'@,@' b'000' b'kilometers' b'(' b'39' b'@,@' b'500' b'to' b'9' b'm' b')' b'of' b'1' b'years' b',' b'that' b'of' b'females'
    b'and' b'other' b'or' b'wings' b'highlighted' b'strumming' b',' b'with' b'acids' b'on' b'and' b'from' b'29' b'\xe2\x80\x93' b'10' b'to' b'8' b'@.@' b'8' b'.'
    b'Despite' b'the' b'<unk>' b'pure' b'insular' b',' b'females' b'are' b'very' b'rarely' b'considered' b'.' b'A' b'female' b'still' b'has' b'fewer' b'Saxon' b'rate' b'.'
    b'In' b'cases' b'in' b'1800' b',' b'their' b'Brighton' b'Kentwood' b'Californian' b'pursuers' b'<unk>' b',' b'it' b'is' b'delivers' b'by' b'Detroit' b'.' b'The' b'executing'
    b'disruption' b'near' b'a' b'territory' b'has' b'a' b'wider' b'(' b'see' b'mass' b')' b'of' b'lover' b',' b'while' b'double' b'starlings' b',' b'which' b'is'
    b'also' b'unclear' b',' b'the' b'female' b',' b'after' b'@-@' b'old' b'resulting' b'or' b'shallow' b'partner' b',' b'are' b'widely' b'withheld' b'.' b'Males' b'can'
    b'earn' b'the' b'male' b'of' b'eucalypts' b'in' b'nursery' b'areas' b',' b'such' b'as' b'Oliver' b'<unk>' b'(' b'1995' b')' b',' b'surrounded' b'in' b'as'
    b'Methodist' b'or' b'Tasmania' b'.' b'Caledonia' b'is' b'less' b'injured' b'.' b'Mick' b'<unk>' b'was' b'close' b'by' b'executive' b'media' b'historian' b'prints' b';' b'other'
    b'undertail' b'depends' b'a' b'short' b'brilliant' b'cycle' b'with' b'<unk>' b',' b'pine' b'CCU' b',' b'resin' b'Brian' b',' b'Lambeosaurus' b',' b'onion' b'deer' b','
    b'<unk>' b'Curator' b',' b'<unk>' b'a' b'mints' b'continents' b';' b'they' b'divided' b'a' b'good' b'eye' b'where' b'they' b'form' b'the' b'pertaining' b'to' b'a'
    b'path' b'.' b'It' b'is' b'an' b'player' b'on' b'the' b'ground' b'of' b'salmon' b'leukemia' b'\xe2\x80\x93' b'<unk>' b'.' b'While' b'it' b'has' b'been' b'experimental'
    b'or' b'Advisory' b',' b'rarely' b'environments' b',' b'high' b'or' b'specific' b'expenses' b',' b'companies' b'who' b'are' b'certainly' b'effective' b'to' b'abuse' b'her' b'they'
    b'can' b'suggest' b'so' b'being' b',' b'"' b'overt' b'@-@' b'like' b',' b'resulting' b'with' b'inhabitants' b'"' b',' b'and' b'Nicole' b"'s" b'greatest' b'of'
    b'pay' b'and' b'lipstick' b'Blues' b'.' b'Each' b'controls' b'is' b'dominated' b'with' b'virtues' b'based' b'on' b'a' b'<unk>' b',' b'including' b'Drawing' b'by' b'<unk>'
    b'that' b'may' b'satisfied' b'protein' b'@-@' b'shaped' b'.' b'Both' b'changes' b'ruled' b'them' b'between' b'<unk>' b',' b'Gallagher' b',' b'<unk>' b',' b'<unk>' b','
    b'tissue' b',' b'Peck' b'Uses' b'with' b'<unk>' b'and' b'holds' b'another' b'distinct' b'to' b'<unk>' b'programme' b'.' b'Examples' b'can' b'be' b'very' b'nice' b','
    b'largely' b'even' b'low' b'up' b'or' b'stayed' b'around' b'once' b'.' b'In' b'small' b'el' b'A' b'variety' b'of' b'fire' b',' b'they' b'suggest' b'that'
    b'they' b'sings' b'icy' b'and' b'erect' b'.' b'They' b'possessed' b'less' b'.' b'Unlike' b'this' b'other' b',' b'foraging' b'with' b'Mhalsa' b"'s" b'body' b'is'
    b'disposed' b'of' b'current' b'territorial' b'gray' b',' b'attached' b'to' b'teeth' b'that' b'show' b',' b'ratio' b'alone' b',' b'fraction' b'for' b'many' b'proteins' b','
    b'they' b'spouse' b'more' b'distinct' b'or' b'1927' b',' b'also' b'convection' b'.' b'I' b'flowed' b'it' b'<unk>' b'scattered' b'.' b'This' b'might' b'have' b'been'
    b'very' b'more' b'mature' b'(' b'law' b')' b'.' b'The' b'slightly' b'overt' b',' b'most' b'Bengal' b'portico' b'\xe2\x80\x93' b'M.' b'collisions' b'(' b'All\xc4\x81h' b')'
    b'is' b'possibly' b'trapped' b'into' b'cross' b'nests' b'and' b'therefore' b'Justin' b'Chapman' b'(' b'Corey' b'drunkards' b')' b'and' b'utilize' b'the' b'island' b'.' b'In'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 237.0
    loss: 5.168
    elapsed time (seconds): 151.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  34.942 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
