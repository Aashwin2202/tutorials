.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'upon' b'to' b'escape' b'.' b'Thus' b':' b'"' b'Mahabharata' b'"' b'was' b'placed' b'as' b'a' b'connection' b'between' b'Barry' b'and' b'53' b'backstage' b'.'
    b'Howard' b'proposes' b'it' b'has' b'been' b'introduced' b'to' b'women' b'Majel' b'as' b'Fortuna' b'"' b'94' b'ports' b'when' b'critics' b'placed' b'a' b'impacting' b'severe'
    b'sense' b'of' b'control' b'and' b'a' b'planet' b'.' b'However' b',' b'it' b'is' b'trying' b'to' b'speak' b'for' b'that' b'1882' b',' b'but' b'about'
    b'more' b'much' b'direction' b'what' b'comes' b'into' b'him' b'exhausting' b'this' b'God' b'for' b'Hutchings' b'.' b'But' b'they' b'came' b'sense' b',' b'but' b'is'
    b'informed' b'place' b'?' b'the' b'Haugesund' b"'" b'imaginative' b'room' b'"' b'occurred' b'in' b'Burbank' b'in' b'late' b'17' b'in' b'2008' b'(' b'since' b'1235'
    b',' b'has' b'little' b'difficulty' b')' b'.' b'<eos>' b'In' b'<unk>' b',' b'volumes' b'online' b'1115' b'textures' b',' b'which' b'painted' b'an' b'different' b'response'
    b'for' b'insects' b'.' b'But' b'electric' b',' b'intermittent' b',' b'and' b'small' b'treatment' b',' b'care' b'records' b'with' b'resembles' b'chances' b'and' b'also' b'be'
    b'killed' b'.' b'Some' b'of' b'the' b'deer' b'are' b'active' b'.' b'Virginia' b'Babyface' b'from' b'containers' b'beauty' b'.' b'It' b'could' b'be' b'surely' b'to'
    b'find' b'their' b'maximum' b'degrees' b'by' b'harassed' b'Walpole' b'.' b'Much' b'master' b'may' b'be' b'misunderstood' b'by' b'<unk>' b'and' b'<unk>' b',' b'bags' b'and'
    b'denied' b',' b'and' b'that' b'stir' b',' b'they' b'exit' b'exciting' b'to' b'the' b'murder' b'.' b'<eos>' b'.' b'=' b'Eva' b'Man' b"'" b'creation'
    b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'Credits' b'=' b'=' b'<eos>' b'<eos>' b'Because' b'open' b'(' b'\xe2\x88\x92' b'14' b',' b'2015' b')' b';'
    b'A' b'side' b'of' b'length' b'now' b'trapped' b'in' b'the' b'Civil' b'Heritage' b'@-@' b'Atlantic' b'cinema' b',' b'a' b'indoor' b'instrumentation' b'under' b'Formula' b'Americans'
    b'through' b'Hawaii' b'on' b'a' b'Iphig\xc3\xa9nie' b'coming' b'in' b'other' b'groups' b'shells' b'and' b'ends' b'works' b'throughout' b'the' b'second' b'and' b'early' b'decades' b'of'
    b'the' b'glider' b'Convention' b'.' b'This' b'is' b'the' b'Telugu' b'language' b'between' b'its' b'two' b'<unk>' b'jail' b'which' b'are' b'known' b'.' b'It' b'is'
    b'also' b'rare' b'by' b'hopping' b'@-@' b'consuming' b'responsible' b'from' b'their' b'seater' b'relationship' b'.' b'With' b'other' b'placement' b',' b'boiled' b',' b'it' b'was'
    b'likely' b'located' b'on' b'3' b'September' b'2004' b'.' b'By' b'as' b',' b'a' b'founder' b'of' b'contemporary' b'starling' b',' b'the' b'Northern' b'Augustan' b'Republic'
    b',' b'is' b'formed' b'for' b'the' b'European' b'tense' b'bodies' b',' b'so' b'to' b'be' b'more' b'put' b'degrees' b'to' b'quatrain' b"'" b'individual' b'self'
    b'@-@' b'thrash' b'tiles' b'.' b'By' b'a' b'extra' b'review' b'of' b'seven' b'other' b'starlings' b',' b'the' b'kakapo' b'suddenly' b'de' b"'Malley" b'declared' b'this'
    b'exit' b',' b'but' b'found' b'as' b'260' b'on' b'<unk>' b'to' b'gather' b'him' b'.' b'In' b'the' b'Republic' b'of' b'Mexico' b',' b'Skye' b'established'
    b'sanitation' b'<unk>' b',' b'but' b'not' b'launched' b'in' b'1852' b'with' b'they' b'feeds' b'(' b'free' b'to' b'their' b'2007' b'Manchester' b'Fury' b'<unk>' b'+'
    b'3' b'@-@' b'favourite' b')' b'genus' b'as' b'after' b'other' b'features' b'of' b'fungal' b'extravagance' b',' b'and' b'new' b'agents' b'will' b'be' b'found' b'.'
    b'Seven' b'humans' b'from' b'syndrome' b'\xc2\xb0' b'million' b'are' b'planned' b'during' b'Manzanillo' b',' b'but' b'it' b'was' b'un' b'millimeters' b'as' b'he' b'was' b'10'
    b'years' b'old' b',' b'further' b'the' b'favorite' b'capital' b'site' b'for' b'revenue' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Politics' b'cases' b'=' b'='
    b'=' b'<eos>' b'<eos>' b'Controversy' b'Thomas' b'listened' b'AJ' b'hospitality' b',' b'a' b'large' b'known' b'recreation' b'Spencer' b'worked' b'in' b'<unk>' b',' b'a' b'well'
    b'percent' b'of' b'young' b'starling' b',' b'and' b'learning' b'from' b'a' b'number' b'of' b'13' b'\xc2\xb0' b'<unk>' b'(' b'approximately' b'1' b'@.@' b'4' b'million'
    b'yards' b')' b'.' b')' b'began' b'made' b'a' b'1989' b'mode' b'between' b'common' b'and' b'two' b'<unk>' b'.' b'Similar' b'works' b'have' b'only' b'last'
    b'grown' b'titles' b'of' b'their' b'plan' b'.' b'These' b'areas' b'he' b'for' b'males' b'in' b'the' b'United' b'States' b'as' b'schooling' b'Malaysia' b'.' b'<eos>'
    b'transits' b'agreed' b'to' b'be' b'tracks' b'to' b'be' b'Byblos' b'.' b'<eos>' b'=' b'=' b'=' b'Female' b'woman' b'=' b'=' b'=' b'<eos>' b'<eos>'
    b'Crash' b'galericulata' b'the' b'roughly' b'Mashtots' b'"' b'iguanodonts' b'<eos>' b'McCay' b'upward' b'\xe2\x80\x93' b'hand' b'over' b'the' b'millimetre' b'of' b'various' b'roads' b'and' b'valid'
    b'probably' b'many' b'forms' b'at' b'Matthew' b'<unk>' b'instead' b',' b'"' b'before' b'the' b'greatest' b'possible' b'of' b'his' b'third' b'stellar' b'colony' b'officially' b'\xe2\x80\x94'
    b'and' b'<unk>' b'in' b'1986' b'.' b'The' b'sector' b'multi' b'@-@' b'introduced' b'queen' b'Garc\xc3\xada' b'Patrick' b'for' b'a' b'first' b'computer' b'mediocre' b'series' b'.'
    b'The' b'term' b'territory' b'stimulation' b'included' b'Point' b'XII' b'and' b'Barry' b'of' b'Porto' b'dimension' b'and' b'Roy' b'<unk>' b'.' b'Several' b'his' b'two' b'private'
    b'orchestral' b'schools' b'involving' b'<unk>' b'outward' b',' b'because' b'of' b'other' b'concentrations' b'of' b'flans' b',' b'on' b'the' b'island' b'.' b'Her' b'entire' b'gravity'
    b'on' b'the' b'coastline' b'of' b'European' b'colonisation' b'travel' b'to' b'Intermediate' b',' b'however' b',' b'used' b'flooding' b'across' b'late' b'fact' b'.' b'It' b'is'
    b'signs' b'of' b'the' b'only' b'of' b'its' b'two' b'volumes' b'stands' b'in' b'demand' b',' b'containing' b'a' b'brief' b'misfortune' b',' b'it' b'has' b'scrapped'
    b'<unk>' b'on' b'10' b'\xe2\x81\x84' b'4' b'by' b'10' b'@.@' b'5' b'kilometres' b'(' b'3' b'@.@' b'6' b'in' b')' b'in' b'length' b'\xe2\x80\x94' b'they'
    b'couldn' b"'t" b'be' b'found' b'into' b'long' b'main' b'or' b'early' b'New' b'Zealand' b'.' b'Also' b'Paul' b'Rajamouli' b'flocked' b'his' b'as' b'a' b'consistent'
    b'symbol' b'by' b'the' b'bowls' b';' b'"' b'backlash' b'"' b'could' b'be' b'heard' b'for' b'Fork' b'attacks' b'and' b'Viking' b'travel' b',' b'leading' b'to'
    b'many' b'<unk>' b'architect' b'Until' b'the' b'Second' b'World' b'War' b',' b'immediately' b'in' b'<unk>' b'and' b'layers' b'(' b'Sir' b'filtering' b'Merrill' b')' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'Release' b'=' b'=' b'<eos>' b'<eos>' b'Jordan' b"'s" b'reign' b'in' b'those' b'of' b'these' b"'l" b'studies' b'is' b'being'
    b'thought' b'to' b'be' b'in' b'various' b'areas' b'since' b'the' b'second' b'century' b'.' b'The' b'human' b'light' b'age' b'of' b'a' b'Lower' b'planet' b','
    b'which' b'was' b'a' b'village' b'with' b'the' b'Badge' b'Sam' b'considered' b'the' b'royal' b'details' b'.' b'The' b'southern' b'1970s' b'must' b'be' b'confused' b'for'
    b'flies' b',' b'and' b'insisted' b'for' b'a' b'flock' b'appointed' b'showing' b'their' b'meaning' b'.' b'According' b'to' b'<unk>' b',' b'the' b'nearby' b'Viscount' b'comprised'
    b'it' b'to' b'Mariah' b'Brown' b'of' b'mimicry' b'and' b'disliked' b'Egyptian' b'acre' b',' b'and' b'his' b'apparently' b'food' b'scheme' b',' b'including' b'predators' b','
    b'producing' b'waving' b'as' b'rip' b'by' b'the' b'flip' b'founder' b'or' b'could' b'be' b'subdue' b'.' b'According' b'to' b'Astrov' b'such' b'as' b'About' b'50'
    b'million' b'years' b',' b'length' b'of' b'testing' b'below' b'forms' b'solar' b'and' b'earning' b'access' b'to' b'ground' b'pollution' b'.' b'They' b'subsequently' b'usually' b'Brill'
    b'mistook' b'carcinogenic' b',' b'facing' b'large' b'Ottomans' b'.' b'Future' b'<unk>' b'(' b'<unk>' b'Itchy' b')' b'is' b'playable' b'in' b'Ireland' b',' b'his' b'authority'
    b'until' b'Idaho' b'is' b'burned' b'for' b'1' b'@.@' b'5' b'metres' b'(' b'8' b'@.@' b'0' b'ft' b')' b'from' b'anger' b'.' b'In' b'1901'
    b',' b'angle' b',' b'acquired' b'with' b'dedication' b'and' b'shaping' b'\xe2\x80\x94' b'foul' b',' b'instead' b'such' b'as' b'"' b'eagerly' b'"' b',' b'incorporates' b'a'
    b'introduced' b'shapes' b'member' b'sentences' b'.' b'Large' b'natural' b'species' b'make' b'the' b'species' b'characteristics' b'and' b'grassy' b'relationships' b'for' b'picture' b'and' b'grounds' b'.'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 214.3
    loss: 5.168
    elapsed time (seconds): 141.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  3.515 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
