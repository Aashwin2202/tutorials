.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'assassinated' b'a' b'work' b'after' b'The' b'end' b'of' b'the' b'show' b',' b'2014' b',' b'as' b'one' b'of' b'the' b'storm' b"'s" b'two' b'9N'
    b'sergeant' b'and' b'5' b'@.@' b'5' b'%' b'He' b'used' b'carbon' b';' b'on' b'a' b'Singapore' b'weekend' b'with' b'new' b'proportion' b',' b'Formula' b"'Malley"
    b',' b'drinking' b'.' b'<eos>' b'The' b'kakapo' b'was' b'marked' b'by' b'Captain' b'Johnson' b',' b'which' b'was' b'taught' b'to' b'pursue' b'his' b'studio' b'position'
    b'as' b'a' b'planet' b',' b'by' b'a' b'game' b'@-@' b'third' b'bank' b'known' b'to' b'written' b'each' b'rate' b'of' b'243' b'%' b'of' b'casino'
    b'troops' b'.' b'The' b'jewels' b'passes' b'and' b'a' b'female' b'Boom' b'Bang' b'authority' b'was' b'unlocked' b'in' b'five' b'games' b'in' b'the' b'first' b'half'
    b'of' b'100' b'wins' b'.' b'The' b'storm' b'transits' b'can' b'be' b'credited' b'like' b'a' b'new' b'series' b'of' b'certain' b'downloadable' b'birds' b',' b'taking'
    b'other' b'performances' b'to' b'be' b'intent' b'in' b'Super' b'One' b'!' b'Nikita' b'Eternity' b'his' b'fall' b'to' b'meet' b'for' b'video' b'game' b'games' b'such'
    b'as' b'or' b'mottled' b'@-@' b'game' b'studies' b'.' b'The' b'convention' b'one' b'McElroy' b'was' b'performed' b'by' b'pinkish' b'<unk>' b'and' b'other' b'aspects' b'share'
    b'a' b'short' b'television' b'connection' b'to' b'events' b'.' b'Twenty' b'token' b'spent' b'a' b'few' b'years' b'ago' b'.' b'O' b"'Malley" b'promised' b'twenty' b'to'
    b'act' b'to' b'beat' b'other' b'kinds' b'of' b'games' b',' b'heaven' b',' b'and' b'<unk>' b'Estate' b'.' b'<eos>' b'changeup' b'that' b'capacity' b'constitute' b'that'
    b'they' b"'ve" b'formed' b'as' b'to' b'continue' b'game' b'(' b'and' b'disrespect' b')' b'for' b'in' b'Palestine' b'.' b'Two' b'years' b'before' b'one' b'type'
    b'is' b'controlled' b'by' b'his' b'new' b'22e' b'heroine' b',' b'an' b'quantity' b'of' b'Superman' b'rose' b'sizes' b'.' b'Church' b'process' b'was' b'critical' b'and'
    b'announced' b'"' b'theorized' b'Got' b"'" b'[' b'I' b']' b'bronze' b'.' b'"' b'Along' b'into' b'an' b'special' b'BKI' b',' b'Jagannadh' b'drew' b'"'
    b'The' b'Christian' b'Extinction' b'to' b'let' b'police' b'purpose' b'of' b'examination' b'shortly' b'"' b'.' b'He' b'criticized' b'the' b'game' b'in' b'the' b'history' b'of'
    b'241' b'in' b'a' b'first' b'year' b',' b'stating' b'stories' b',' b'but' b'also' b'gave' b'it' b'to' b'sing' b'that' b'"' b'their' b'desire' b'to'
    b'beat' b'trouble' b'had' b'filled' b',' b'or' b'making' b'me' b'again' b'all' b'to' b'those' b'off' b'or' b'Parliament' b'"' b'.' b'<eos>' b'The' b'game'
    b'was' b'likely' b'received' b'positive' b'platinum' b'by' b'critics' b'on' b'4' b'April' b'1882' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Moro' b'with' b'Surrender'
    b'=' b'=' b'=' b'<eos>' b'<eos>' b'Up' b'Games' b',' b'Somerset' b'Am' b'!' b"'" b'Crash' b'de' b'Chevaliers' b',' b'the' b'mother' b',' b'observed'
    b'Ha' b'I' b'for' b'the' b'FISA' b'film' b'.' b'The' b'Villa' b'and' b'Kh\xc3\xa1nh' b'video' b'rated' b'reorganized' b'mostly' b'to' b'give' b'it' b'.' b'Bill'
    b'traveled' b'back' b'for' b'a' b'152' b'years' b'after' b'they' b'rehearsing' b'for' b'any' b'other' b'time' b'.' b'On' b'September' b'29' b',' b'2011' b','
    b'No.' b'79' b',' b'at' b'all' b'promised' b'(' b'IR8' b')' b'appeared' b'at' b'<unk>' b'UTC' b'on' b'the' b'possibility' b'of' b'commercial' b'activity' b'and'
    b'day' b'into' b'Mexico' b'@-@' b'dong' b'into' b'Melbourne' b'.' b'It' b'was' b'generally' b'possible' b'to' b'be' b'hundreds' b'of' b'northwards' b'.' b'Around' b'a'
    b'type' b'of' b'$' b'500' b'million' b'in' b'2006' b'Walpole' b'ran' b'with' b'further' b'powers' b'prior' b'to' b'scenes' b'were' b'high' b'and' b'become' b'as'
    b'rains' b'to' b'be' b'too' b'distant' b'.' b'interacting' b'to' b'one' b'warning' b',' b'travellers' b'<unk>' b'other' b'names' b'were' b'swept' b'in' b'a' b'strong'
    b'conditions' b'system' b',' b'effects' b'to' b'gain' b'it' b'in' b'granite' b',' b'with' b'proof' b'at' b'its' b'peak' b'bed' b'of' b'peak' b'mph' b','
    b'to' b'Omar' b'until' b'17' b':' b'00' b'p.m.' b'.' b'Within' b'some' b'hours' b'after' b'passing' b'in' b'its' b'suffrage' b',' b'Omar' b'began' b'with'
    b'another' b'role' b'as' b'a' b'eye' b'.' b'A' b'gift' b'was' b'more' b'special' b',' b'and' b'noted' b'that' b'resembled' b'6' b'million' b'years' b'universally'
    b'.' b'Soon' b'at' b'Moses' b'0000' b',' b'its' b'ruling' b'move' b'to' b'each' b'other' b'and' b'three' b'wild' b',' b'left' b'several' b'westward' b'homes'
    b'.' b'Despite' b'winning' b'severe' b'flooding' b',' b'many' b'were' b'killed' b'.' b'Due' b'to' b'a' b'severe' b'and' b'small' b'power' b',' b'tropical' b'storm'
    b'control' b'offerings' b'and' b'Vanderbilt' b',' b'however' b',' b'were' b'still' b'damaged' b'it' b'.' b'Beyond' b'materials' b'were' b'found' b'dermal' b';' b'it' b'generally'
    b'became' b'<unk>' b'uphold' b'.' b'The' b'general' b'difference' b'in' b'the' b'subtropical' b'development' b'began' b',' b'though' b'some' b'speeds' b'doing' b'construction' b'around' b'the'
    b'center' b'of' b'supplies' b',' b'Nobody' b"'s" b'center' b',' b'Pandit' b'Omar' b',' b'sustained' b'very' b'than' b'ten' b'explanation' b'of' b'weakest' b'birds' b'.'
    b'<unk>' b'envisioned' b'in' b'capital' b'areas' b'for' b'<unk>' b'in' b'late' b'orbit' b'.' b'Recent' b'records' b'were' b'lost' b'before' b'their' b'observation' b'on' b'<unk>'
    b'arise' b'only' b'on' b'exchange' b',' b'thereby' b'as' b'because' b'Oregon' b'states' b'100' b'%' b'of' b'the' b'non' b'@-@' b'war' b'status' b'were' b'especially'
    b'part' b'.' b'This' b'problem' b'could' b'be' b'recorded' b'in' b'B\xc3\xacnh' b'Vegas' b'following' b'constitutional' b'chord' b',' b'inner' b'Austria' b',' b'and' b'low' b'pages'
    b'.' b'<eos>' b'Montagu' b'in' b'Ypres' b'moved' b'to' b'their' b'duration' b'after' b'striking' b'all' b'.' b'Together' b'it' b'also' b'influenced' b'consumes' b',' b'when'
    b'it' b'has' b'only' b'located' b'with' b'several' b'visitors' b'.' b'This' b'access' b'to' b'races' b'were' b'high' b',' b'however' b'as' b'a' b'fully' b'<unk>'
    b'.' b'The' b'same' b'tower' b'survives' b'has' b'since' b'been' b'exhausted' b'.' b'Located' b'down' b'of' b'their' b'pitch' b',' b'birds' b'operated' b'elaborate' b'treatise'
    b'An' b'Miriam' b'Brown' b',' b'another' b'<unk>' b',' b'and' b'remained' b'on' b'the' b'Dublin' b'Temple' b'.' b'Also' b',' b'it' b'has' b'resigning' b'Dania'
    b'Bullet' b',' b'at' b'<unk>' b',' b'in' b'the' b'National' b'Oil' b'Center' b'(' b'seems' b'to' b'be' b'described' b'as' b'"' b'John' b'der' b'Rudolph'
    b'<unk>' b'"' b')' b'.' b'In' b'addition' b',' b'it' b'has' b'been' b'mentioning' b'too' b'more' b'weaker' b'than' b'each' b'entirety' b'or' b'confront' b'to'
    b'be' b'champions' b'deliveries' b',' b'transcription' b'water' b'and' b'sank' b'.' b'A' b'One' b'of' b'these' b'for' b'land' b',' b'Totten' b'explored' b'annually' b'with'
    b'isolated' b'wood' b'flowers' b'across' b'the' b'population' b',' b'but' b'occasionally' b'established' b'over' b'$' b'9' b'million' b'per' b'million' b'K' b'Irish' b'across' b'it'
    b'.' b'It' b'was' b'altar' b'in' b'forests' b',' b'and' b'in' b'early' b'November' b'1931' b',' b'prostrate' b'lies' b'with' b'Zygoballus' b'City' b',' b'with'
    b'Philip' b'David' b'James' b'as' b'regard' b'to' b'four' b'European' b'antagonists' b'.' b'In' b'this' b'same' b'year' b',' b'Ross' b'80' b'%' b'species' b'('
    b'over' b'5' b'@.@' b'5' b'%' b'at' b'965' b'metres' b')' b',' b'sculptures' b',' b'Op.' b'<unk>' b',' b'sago' b'mints' b',' b'conifer' b'and'
    b'Houghton' b'.' b'The' b'upper' b'spots' b'include' b'situated' b'by' b'power' b'ideals' b';' b'other' b'measures' b'have' b'been' b'found' b'"' b'Chennselaig' b'1737' b'"'
    b',' b'and' b'that' b'they' b'could' b'"' b'defeat' b'to' b'9' b'@,@' b'<unk>' b',' b'3' b'@.@' b'5' b'%' b',' b'four' b'years' b'"'
    b'.' b'<unk>' b'to' b'negotiate' b'additional' b'attention' b'to' b'"' b'Ulster' b'quality' b'"' b',' b'the' b'breech' b'of' b'Ceres' b'is' b'only' b'functional' b','
    b'and' b'into' b'eating' b'even' b'placid' b'law' b'with' b'Irish' b',' b'restraints' b'Lawson' b'ridiculous' b'about' b'fraud' b'in' b'202' b',' b'confirmed' b'Central' b'Government'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 223.4
    loss: 5.168
    elapsed time (seconds): 144.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  14.467 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
