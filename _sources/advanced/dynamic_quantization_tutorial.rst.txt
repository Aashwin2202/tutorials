.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'including' b'extensive' b'bonds' b'associated' b'two' b'in' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'At' b'the' b'1920s' b','
    b'full' b'passengers' b'received' b'culture' b'in' b'a' b'length' b',' b'stating' b'all' b'of' b'the' b'Dooley' b'used' b'by' b'most' b'other' b'<unk>' b',' b'voice'
    b'appealed' b'to' b'rooms' b'and' b'cars' b'.' b'The' b'northern' b'half' b'of' b'Kells' b'gave' b'their' b'first' b'albums' b'in' b'a' b'March' b'2' b','
    b'2006' b'reception' b'about' b'being' b'alive' b'in' b'the' b'diagnosis' b'that' b'many' b'of' b'its' b'books' b'were' b'"' b'set' b'"' b'.' b'He' b'making'
    b'college' b'metals' b'support' b',' b'and' b'O' b'Boom' b'!' b'Hall' b'was' b'the' b'corresponding' b'character' b'after' b'early' b';' b'Kyle' b'Robert' b'Javier' b'had'
    b'compiled' b'finals' b'in' b'IAU' b'Florida' b',' b'then' b'in' b'the' b'series' b'@-@' b'bank' b'.' b'The' b'two' b'male' b'series' b'in' b'the' b'game'
    b':' b'The' b'2010' b'Tide' b'built' b'the' b'Special' b'Show' b'Festival' b',' b'Raffles' b'who' b'reported' b'what' b'his' b'task' b'was' b'much' b'<unk>' b'or'
    b'used' b'measurements' b'until' b'four' b'main' b'Emmy' b'audio' b'characters' b',' b'which' b'was' b'also' b'listed' b'on' b'August' b'22' b',' b'2005' b'.' b'strength'
    b'performed' b'Jean' b'Walk' b'a' b'public' b'company' b'in' b'Major' b'Boom' b'Jam' b'Side' b'selection' b'(' b'award' b'Entertainment' b"'s" b'Child' b'on' b'June' b'15'
    b',' b'2001' b')' b'in' b'1998' b'.' b'In' b'the' b'same' b'year' b',' b'wind' b'uncertainty' b'saw' b'significant' b'interest' b'.' b'reports' b'subsequently' b'tried'
    b'to' b'find' b'a' b'deal' b'of' b'presbyterian' b'@-@' b'American' b'African' b'starlings' b'Having' b',' b'including' b'1' b'%' b',' b'one' b'million' b'mile' b','
    b'fully' b'<unk>' b'at' b'home' b'.' b'In' b'the' b'middle' b'that' b'Caesar' b'were' b'<unk>' b'to' b'the' b'command' b'.' b'Following' b'what' b'CPHC' b'twelve'
    b'games' b'were' b'planned' b'to' b'go' b'to' b'3D' b',' b'Silence' b'delayed' b'high' b',' b'waterline' b',' b'prevented' b'against' b'young' b'pages' b'and' b'was'
    b'able' b'to' b'be' b'free' b'because' b'they' b'are' b'<unk>' b'.' b'Unlike' b'this' b'reviewer' b'Ellerbee' b',' b'who' b'had' b'familiar' b'Echmarcach' b'with' b'households'
    b',' b'"' b'Girls' b'conquered' b'<unk>' b'"' b'and' b'"' b'The' b'wonderful' b'planet' b'of' b'the' b'Indus' b'Yankees' b'concept' b'"' b'.' b'In' b'1933'
    b'it' b'was' b'hired' b'that' b'their' b'final' b'game' b'was' b'its' b'introduction' b'to' b'Ottawa' b',' b'Pettit' b'noted' b'"' b'big' b'write' b'negatively' b'on'
    b'a' b'<unk>' b'solving' b'<unk>' b'strikeouts' b'and' b'<unk>' b'that' b'the' b'last' b'name' b'took' b'place' b'up' b'on' b'that' b'time' b'"' b'.' b'Maria'
    b'was' b'described' b'in' b'Parks' b':' b'Greatest' b'MVP' b'and' b'The' b'Crash' b'Race' b',' b'a' b'18th' b'@-@' b'century' b'book' b',' b'a' b'arid'
    b'councillor' b'pining' b'in' b'attributed' b'to' b'the' b'practice' b'of' b'The' b'game' b'.' b'Of' b'Omar' b',' b'a' b'longtime' b'work' b'helped' b'in' b'21'
    b'August' b'2006' b',' b'following' b'the' b'kakapo' b'1210' b'of' b'life' b'in' b'thirty' b'@-@' b'March' b'2010' b'.' b'After' b'a' b'release' b'from' b'Chicago'
    b',' b'Paramount' b'Airport' b'watched' b'O' b"'Malley" b',' b'North' b'Carolina' b',' b'and' b'the' b'<unk>' b'Reef' b'in' b'1765' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'catches' b'title' b'=' b'=' b'<eos>' b'<eos>' b'Crash' b'Boom' b'Bang' b'!' b'had' b'performed' b'on' b'August' b'6' b',' b'2010' b'.' b'The'
    b'title' b'substantial' b'sets' b'of' b'several' b'players' b'in' b'bands' b'lumber' b'Sidon' b'in' b'"' b'Everything' b'Places' b'"' b'states' b'were' b'criticized' b'by' b'series'
    b'of' b'Clan' b'The' b'Relations' b';' b'this' b'means' b'was' b'by' b'outrage' b'and' b'Tessa' b"'s" b'marriage' b'over' b'home' b'territory' b'ascent' b'.' b'It'
    b'may' b'be' b'directly' b'written' b'by' b'aggressive' b'and' b'driving' b',' b'disregard' b'Airlines' b'Sakamoto' b'as' b'accompanies' b'what' b'interacts' b'in' b'other' b'Burza' b','
    b'a' b'combination' b'that' b'affects' b'funeral' b',' b'more' b'than' b'it' b'Martinez' b',' b'to' b'be' b'ignored' b'by' b'art' b',' b'made' b'in' b'part'
    b'on' b'April' b'73' b',' b'1969' b'.' b'According' b'to' b'an' b'9' b'@-@' b'pounders' b'three' b'years' b'after' b'he' b'fell' b'for' b'an' b'game'
    b',' b'in' b'2014' b',' b'Mosley' b'was' b're' b'@-@' b'released' b'.' b'"' b'Work' b'"' b'is' b'poor' b'a' b'sport' b',' b'and' b'pushes'
    b'that' b'U2' b"'s" b'start' b'for' b'knight' b'.' b'UCI' b'considered' b'a' b'binary' b'setting' b'of' b'issues' b'before' b'his' b'death' b'in' b'premiere' b'and'
    b'Travelling' b'their' b'boys' b',' b'so' b'when' b'when' b'most' b'of' b'the' b'recalls' b'or' b'<unk>' b'<unk>' b'one' b'rate' b',' b'the' b'emotions' b'of'
    b'the' b'revelation' b'players' b'is' b'mainly' b'telling' b'soft' b'solo' b'into' b'any' b'material' b',' b'though' b'Raffles' b'women' b'also' b'began' b'to' b'Particularly' b'them'
    b'more' b'far' b'.' b'When' b'"' b'it' b'is' b'always' b'thoroughly' b'clear' b'you' b'are' b'amazing' b'if' b'.' b'"' b'acquainted' b'for' b'Ryan' b'bass'
    b'in' b'the' b'book' b',' b'and' b'for' b'few' b'years' b',' b'little' b'people' b'bring' b'exclusively' b'showing' b'query' b'in' b'the' b'same' b'process' b'.'
    b'<eos>' b'The' b'two' b'American' b'inscriptions' b'class' b'which' b'are' b'his' b'lower' b'ultra' b'climate' b'as' b'three' b'parrot' b'(' b'including' b'45' b'or' b'90'
    b'%' b',' b'and' b'6' b'@.@' b'5' b')' b',' b'1' b'\xe2\x80\x93' b'5' b'%' b',' b'nine' b'or' b'5' b'@.@' b'38' b'in' b')'
    b'.' b'Despite' b'additional' b'tracks' b'that' b'represents' b'fundamentally' b'tales' b',' b'the' b'average' b'at' b'Dr.' b'brownish' b'Station' b'is' b'present' b'.' b'<eos>' b'General'
    b'Boom' b'Bang' b'al' b':' b'<eos>' b'advise' b'five' b'unlikely' b'works' b',' b'or' b'unresolved' b'flexibility' b',' b'while' b'Polish' b',' b'rolling' b',' b'and'
    b'future' b'proficient' b'sets' b'both' b'large' b'experiments' b'for' b'the' b'football' b',' b'with' b'some' b'remaining' b'American' b'<unk>' b',' b'and' b'crack' b'and' b'backgrounds'
    b'(' b'<unk>' b')' b',' b'whom' b'those' b'occupies' b'ectomycorrhizae' b'(' b'1651' b')' b',' b'there' b'are' b'speculation' b'a' b'partial' b'competition' b'of' b'one'
    b'person' b'.' b'O' b"'t" b'last' b'everything' b'on' b'a' b'profound' b'incident' b'and' b'is' b'kept' b',' b'either' b'.' b'weekends' b'normally' b'missing' b'at'
    b'<unk>' b',' b'Lena' b'to' b'sing' b'before' b'a' b'necessity' b'of' b'etymology' b';' b'they' b'manages' b'to' b'lead' b'.' b'<eos>' b'Previously' b',' b'they'
    b"'ve" b'interest' b'to' b'young' b'crowns' b'having' b'hand' b',' b'but' b'as' b'became' b'their' b'longer' b'training' b'if' b'the' b'high' b'calls' b'on' b'other'
    b'aspects' b'of' b'microtubules' b'were' b'reaches' b'there' b'.' b'The' b'most' b'immortal' b'theme' b'from' b'1908' b'emerged' b'in' b'aliens' b',' b'on' b'2' b'June'
    b'1945' b',' b'and' b'across' b'which' b'about' b'three' b'years' b'if' b'being' b'<unk>' b'.' b'Since' b'this' b',' b'five' b'eggs' b'in' b'previously' b'dried'
    b'messenger' b'Ace' b'Bang' b',' b'and' b'the' b'farms' b'run' b',' b'an' b'bride' b'represents' b'equal' b'association' b'to' b'Christian' b'@-@' b'toed' b'<unk>' b'or'
    b'lawyers' b'(' b'TV' b')' b'or' b'the' b'rituals' b"'s" b'supervision' b'(' b'sun' b'station' b')' b',' b'meaning' b'that' b'early' b'or' b'order' b'into'
    b'more' b'common' b'sodium' b'observations' b',' b'As' b'with' b'they' b'are' b'Courier' b'was' b'pulled' b'to' b'fall' b'the' b'infamous' b'arc' b'of' b'2D' b'.'
    b'The' b'dispute' b'between' b'its' b'behaviour' b'and' b'their' b'Anglican' b'brothers' b'and' b'forestry' b',' b'attempting' b'to' b'GB' b'a' b'irregularly' b'pest' b'.' b'The'
    b'Children' b"'" b'abbot' b'delivers' b'Van' b'la' b'la' b'!' b'\xe2\x80\x93' b'<unk>' b'vessel' b'III' b',' b'which' b'has' b'fails' b'to' b'Lu' b'the' b'Viscount'
    b',' b'where' b'it' b'can' b'have' b'Niall' b'rhyming' b'Oswald' b'and' b'the' b'series' b'who' b'carried' b'it' b'Julian' b'Penn' b',' b'who' b'chose' b'the'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 220.8
    loss: 5.168
    elapsed time (seconds): 144.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  11.148 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
