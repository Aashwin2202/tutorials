.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b'Thousand' b',' b'the' b'Black' b',' b'Why' b'(' b'Joshua' b')' b',' b'<unk>' b'(' b'<unk>' b')' b',' b'Shandong' b'(' b'Re' b'wild'
    b'S.' b'Krajowa' b')' b',' b'Of' b'whom' b'the' b'Republic' b'of' b'1917' b'companies' b'challenged' b'and' b'west' b'million' b'involvement' b'on' b'Immortals' b"'s" b'work'
    b'as' b'well' b'as' b'Toulon' b'credits' b'the' b'wide' b'lunar' b'sex' b'system' b'and' b'a' b'period' b',' b'a' b'ongoing' b'designer' b'is' b'given' b'to'
    b'severe' b'rains' b'.' b'<eos>' b'Common' b'starlings' b'is' b'straight' b'for' b'respective' b'flooding' b'.' b'These' b'are' b'derided' b'as' b'Chambers' b'Palmyrene' b',' b'although'
    b'only' b'an' b'network' b'accumulating' b'fruit' b'intertwine' b'alienated' b'.' b'These' b'molecular' b'ones' b'often' b'enhance' b'nest' b'plumage' b',' b'as' b'Zhishen' b'as' b'being'
    b'"' b'six' b'Juste' b'"' b'.' b'It' b'compares' b'about' b'their' b'measurements' b',' b'thus' b'as' b'they' b'do' b'the' b'preservation' b'of' b'multiple' b'thirds'
    b'of' b'communication' b'.' b'If' b'<unk>' b'is' b'under' b'images' b'from' b'obtain' b'a' b'neutron' b',' b'or' b'0600' b'sharing' b'the' b'last' b'outward' b'Militia'
    b'fabulous' b'of' b'India' b'.' b'In' b'the' b'moralitas' b'is' b'these' b',' b'triviality' b'\xe2\x80\x94' b'says' b'<unk>' b'.' b'<eos>' b'Most' b'areas' b'required' b'two'
    b'<unk>' b'or' b'people' b',' b'and' b'also' b'suggested' b'for' b'their' b'large' b'little' b'Castle' b'and' b'<unk>' b'this' b'species' b'.' b'The' b'surviving' b'this'
    b'bit' b'is' b'derived' b'around' b'high' b',' b'and' b'the' b'occurrence' b'of' b'a' b'pair' b'of' b'<unk>' b',' b'or' b'so' b'to' b'a' b'extensive'
    b'eye' b'Napol\xc3\xa9on' b'(' b'similar' b'half' b')' b'\xe2\x80\x94' b'/' b'are' b'a' b'seemingly' b'reinforcing' b'rDNA' b'.' b'<eos>' b'Astraeus' b'relationship' b'is' b'larger' b'to'
    b'help' b'this' b',' b'12' b':' b'44' b'.' b'It' b'is' b'true' b'that' b'advertisements' b'have' b'been' b'found' b'.' b'<eos>' b'The' b'kakapo' b'is'
    b'called' b'part' b'of' b'their' b'most' b'generated' b'cell' b',' b'the' b'head' b'in' b'India' b'.' b'<eos>' b'outermost' b'plants' b'are' b'derived' b',' b'so'
    b'it' b'has' b'common' b'quantities' b'of' b'food' b'.' b'These' b'compound' b'cottages' b'can' b'be' b'hard' b'nationwide' b',' b'and' b'provide' b'abridged' b'Potter' b'@-@'
    b'shaped' b'themes' b'to' b'be' b'that' b'and' b'eggs' b',' b'although' b'others' b'do' b'not' b'eat' b'debuting' b'across' b'Buddhism' b'.' b'A' b'unusual' b'<unk>'
    b'on' b'Guru' b'Maslin' b'or' b'tissue' b'symbol' b',' b'which' b'can' b'have' b'also' b'<unk>' b'with' b'poison' b',' b'ice' b',' b'and' b'<unk>' b','
    b'bull' b'or' b'feeding' b'as' b'<unk>' b',' b'although' b'may' b'be' b'required' b'to' b'negotiate' b'most' b'of' b'them' b'destroyed' b'up' b'rates' b'by' b'top'
    b'dust' b'during' b'them' b'.' b'Another' b'discovery' b'hurt' b'their' b'nuclei' b'and' b'other' b'groups' b'with' b'precipitation' b'properly' b'.' b'Once' b'they' b'evolved' b'into'
    b'a' b'larger' b'defensive' b',' b'tree' b',' b'1850' b',' b'and' b'practical' b'observations' b'of' b'cells' b'.' b'There' b'are' b'first' b'assaulted' b'modification' b'by'
    b'A.' b'this' b'other' b'bird' b',' b'that' b'may' b'become' b'presumed' b'.' b'<eos>' b'For' b'2' b'kilometres' b'(' b'so' b'@.@' b'60' b'km' b')'
    b'with' b'their' b'length' b'is' b'either' b'freshwater' b',' b'although' b'they' b'do' b'not' b'affect' b'male' b'eggs' b'to' b'.' b'Whilst' b'of' b'monitoring' b','
    b'adder' b'enough' b'a' b'wide' b'nebula' b'for' b'mass' b'magnitude' b'.' b'<eos>' b'Early' b'mushrooms' b'may' b'be' b'reduced' b'gliders' b',' b'providing' b'some' b'Sati'
    b',' b'some' b'sources' b'do' b'not' b'balance' b'.' b'Because' b'they' b'also' b'have' b'moored' b'regeneration' b',' b'they' b'their' b'turn' b'also' b'beak' b'.'
    b'By' b'all' b'casual' b'attacks' b'there' b'have' b'no' b'fat' b'majority' b'.' b'As' b'Keamy' b'remixed' b'apparent' b',' b'they' b'can' b'handle' b'or' b'leave'
    b'it' b',' b'but' b'from' b'the' b'easy' b'ribosomal' b',' b'they' b'can' b'have' b'been' b'44' b'@.@' b'9' b'\xe2\x80\x93' b'5' b'long' b'.' b'It'
    b'has' b'7' b'yellow' b'rows' b'employees' b'of' b'the' b'population' b',' b'several' b'or' b'five' b'more' b'alone' b',' b'making' b'it' b'to' b'April' b'7'
    b'(' b'9' b'%' b'of' b'bearing' b'foraging' b')' b'and' b'one' b'aggressive' b'other' b'Quasi' b'rings' b'.' b'The' b'orbital' b'energy' b'(' b'/' b'260'
    b')' b'suggested' b':' b'APL' b'endeavor' b',' b'europium' b',' b'Ghana' b',' b'behaviour' b',' b'and' b'hours' b'that' b'mis' b'god' b'<unk>' b'.' b'In'
    b'terms' b',' b'common' b'momentum' b'may' b'contain' b'their' b'dorsal' b'food' b'is' b'reduced' b',' b'although' b'that' b'pave' b'or' b'outflow' b',' b'the' b'ultimate'
    b'starling' b'may' b'exist' b'with' b'expressing' b'their' b'transport' b'.' b'They' b'were' b'transcribed' b'from' b'Cortland' b',' b'so' b'it' b'is' b'breeds' b'to' b'have'
    b'been' b'trapped' b'throughout' b'any' b'other' b'bird' b'.' b'If' b'many' b'they' b'can' b'result' b'the' b'same' b'failure' b',' b'they' b'often' b'occasionally' b'accumulate'
    b'.' b'Gradually' b',' b'so' b'recovering' b'out' b'a' b'eggs' b'or' b'effectiveness' b'process' b',' b'it' b'is' b'postulated' b'for' b'victims' b',' b'depleted' b','
    b'water' b'jewellery' b'and' b'replica' b'of' b'the' b'eggs' b'away' b'from' b'<unk>' b'or' b'sea' b'when' b'they' b'should' b'have' b'bathing' b'rule' b'they' b'were'
    b'aware' b'of' b'them' b':' b'long' b'birds' b'at' b'orbit' b'have' b'expected' b'any' b'species' b'of' b'females' b'.' b'<eos>' b'Common' b'starlings' b'<unk>' b'their'
    b'space' b'as' b'it' b'is' b'its' b'Tides' b'of' b'their' b'back' b',' b'so' b'they' b'best' b'are' b'less' b'often' b'tranquilizer' b'.' b'Adding' b'high'
    b',' b'other' b'shapes' b'tried' b'may' b'engage' b'in' b'suggests' b'.' b'Success' b'making' b'them' b'that' b'anything' b'expected' b'it' b'has' b'a' b'cumulative' b'well'
    b'.' b'Ceres' b'prefer' b'the' b'structural' b'power' b'and' b'significant' b'eggs' b'of' b'R\xc3\xa9union' b'.' b'Another' b'<unk>' b'character' b'is' b'relatively' b'greater' b'from' b'these'
    b'parts' b'of' b'the' b'rainforests' b'Helgenberger' b',' b'which' b'may' b'be' b'confused' b'from' b'juveniles' b'on' b'wood' b',' b'some' b'<unk>' b',' b'or' b'movement'
    b'.' b'This' b'suggests' b'that' b'this' b'will' b'be' b'solved' b'.' b'Later' b'contact' b'upon' b'cases' b',' b'they' b'are' b'sweet' b'generally' b'to' b'be'
    b'closes' b':' b'they' b'may' b'be' b'<unk>' b'damaged' b',' b'if' b'some' b'birds' b'do' b'not' b'discriminate' b',' b'stars' b'fled' b'to' b'they' b'move'
    b'to' b'occupational' b'.' b'Moreover' b',' b'farms' b',' b'pretty' b'well' b'@-@' b'degree' b'reachability' b'is' b'allowed' b'.' b'There' b'are' b'male' b'snakes' b','
    b'even' b'as' b'higher' b'as' b'as' b',' b'Lennie' b'one' b',' b'or' b'reduce' b'another' b'or' b'interactions' b'.' b'They' b'present' b'or' b'the' b'same'
    b'day' b'nor' b'when' b'they' b'Dheera' b'being' b'electricity' b'.' b'Almost' b'one' b'that' b'of' b'<unk>' b'a' b'slight' b'heat' b',' b'while' b'averaging' b','
    b'R\xc3\xa9union' b'is' b'consecrated' b'by' b'long' b'areas' b'with' b'preventing' b'life' b',' b'although' b'any' b'shows' b'compounds' b'were' b'insufficient' b'.' b'<eos>' b'In' b'architects'
    b',' b'Eurasia' b'take' b'the' b'eggs' b',' b'as' b'they' b'may' b'be' b'strong' b'in' b'areas' b'.' b'Research' b'satisfied' b'birds' b'that' b'birds' b'cookbooks'
    b'about' b'calculation' b'heavier' b'from' b'corresponded' b'to' b'contracting' b'paths' b'.' b'They' b'talk' b'behind' b'their' b'head' b'until' b'a' b'tree' b'or' b'has' b'even'
    b'been' b'seen' b'by' b'black' b',' b'<unk>' b',' b'while' b'they' b'carbon' b'suddenly' b'.' b'Though' b'they' b'suggest' b'they' b'must' b'be' b'to' b'provoke'
    b',' b'and' b'they' b'that' b'choose' b'until' b'one' b'Sami' b'of' b'Ceres' b'.' b'<eos>' b'Where' b'their' b'feathers' b'in' b'forests' b'susceptible' b'as' b'some'
    b'as' b'three' b',' b'but' b'are' b'burnt' b'in' b'Ireland' b'.' b'It' b'is' b'unclear' b',' b'moored' b',' b'<unk>' b',' b'open' b'thread' b','
    b'mechanical' b'left' b'failure' b',' b'organised' b'or' b'<unk>' b'plain' b'food' b'.' b'The' b'teeth' b'are' b'unknown' b'from' b'deep' b'feral' b'bird' b'male' b'levels'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.4
    loss: 5.168
    elapsed time (seconds): 142.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  5.762 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
