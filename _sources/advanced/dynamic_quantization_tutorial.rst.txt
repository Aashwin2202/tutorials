.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Castro' b'Ketawa' b'and' b'the' b'other' b'short' b'instruments' b'in' b'British' b'flooding' b'would' b'marry' b'a' b'celestial' b'wrapping' b'comfortable' b'for' b'no' b'such' b'British'
    b'<unk>' b'.' b'However' b',' b'O' b"'Malley" b'factor' b'its' b'administration' b'tears' b'.' b'Occasionally' b',' b'in' b'2015' b'Mr.' b'glycolysis' b',' b'referral' b'as'
    b'an' b'strung' b'species' b',' b'can' b'write' b'<unk>' b'excavations' b'in' b'finding' b'oil' b',' b'and' b'Velpeau' b'halted' b'once' b',' b'let' b'Northern' b'or'
    b'different' b'goddesses' b',' b'including' b'return' b'of' b'public' b'export' b')' b'.' b'<eos>' b'Several' b'Christian' b'Hairan' b'Perth' b"'s" b'perceived' b'?' b'@-@' b'by'
    b'@-@' b'death' b'attachment' b'for' b'a' b'Argentines' b'began' b'for' b'1742' b'.' b'By' b'all' b'majority' b'in' b'Boston' b',' b'it' b'has' b'been' b'reasonable'
    b'that' b'Odaenathus' b'was' b'who' b'goes' b'back' b'from' b'his' b'crafts' b'government' b'"' b'thousand' b'months' b'old' b',' b'and' b'in' b'fact' b'a' b'<unk>'
    b'will' b'be' b'consumed' b'directly' b'an' b'kind' b'of' b'in' b'Oxford' b'.' b'This' b'will' b'be' b'<unk>' b'and' b'burned' b'down' b'from' b'his' b'atmosphere'
    b'.' b'"' b'In' b'Bloom' b',' b'the' b'Antiquaries' b'Mark' b'Board' b'wanted' b'not' b'imparted' b'in' b'his' b'own' b'moons' b',' b'and' b'on' b'September'
    b'3' b',' b'1931' b'was' b'confirmed' b'on' b'several' b'occasions' b'who' b'replied' b'the' b'most' b'publicized' b'<unk>' b',' b'<unk>' b'seemingly' b'and' b'speaking' b'the'
    b'lawsuit' b'to' b'be' b'<unk>' b'.' b'<eos>' b'A' b'third' b'portion' b'of' b'"' b'The' b'wealthiest' b'<unk>' b'of' b'oversight' b'"' b'is' b'known' b'to'
    b'be' b'controlled' b'by' b'Edgar' b'watching' b'independently' b'.' b'Like' b'this' b',' b'fans' b'who' b'might' b'seem' b'to' b'recruit' b'quarrels' b'from' b'<unk>' b'beliefs'
    b',' b'among' b'such' b'series' b'between' b'their' b'previous' b'headquarters' b',' b'divers' b',' b'and' b'<unk>' b'motion' b'and' b'facilities' b'from' b'Djedkare' b'.' b'<eos>'
    b'Unlike' b'his' b'stories' b'on' b'their' b'towards' b'@-@' b'oriented' b'depictions' b'of' b'his' b'hilltop' b'and' b'other' b'events' b',' b'where' b'13' b'players' b'fired'
    b'growing' b',' b'Kody' b'<unk>' b'sat' b'on' b'a' b'member' b'of' b'interest' b',' b'inscriptions' b',' b'Halloween' b',' b'and' b'spruce' b',' b'Finland' b'and'
    b'proliferation' b'.' b'<unk>' b'(' b'or' b'Adding' b'in' b'August' b',' b'Ireland' b')' b'received' b'that' b'just' b'natural' b'bird' b'who' b'takes' b'the' b'way'
    b'Verse' b'by' b'representative' b'of' b'Guided' b'activists' b',' b'respectively' b'.' b'This' b'eighth' b'growing' b'running' b',' b'with' b'many' b'smaller' b'claims' b'behind' b'another'
    b',' b'March' b'28' b',' b'at' b'the' b'start' b'of' b'a' b'member' b',' b'which' b'lies' b'on' b'cal' b'comparisons' b'.' b'The' b'fort' b'location'
    b'first' b'held' b'verse' b',' b'citing' b'her' b'by' b'.' b'"' b'is' b'Broom' b"'s" b'head' b'family' b'film' b'there' b'is' b'a' b'tool' b'a'
    b'sense' b'of' b'paper' b',' b'le' b'Mortimer' b'&' b'R' b'prominent' b':' b'nuclear' b'-' b'praising' b'him' b',' b'people' b'he' b'knows' b'in' b'cruel'
    b'beyond' b'entering' b'a' b'grand' b'figure' b'(' b'354' b'/' b'now' b',' b'"' b'and' b'the' b'fractured' b',' b'filled' b'europium' b'<unk>' b'in' b'<unk>'
    b')' b'\xe2\x80\x94' b'seeing' b'it' b'<unk>' b'of' b',' b'deliberately' b'Col.' b'SbCl' b'H' b'<unk>' b'(' b'known' b'as' b'1596' b')' b',' b'14' b'('
    b'<unk>' b')' b',' b'"' b'mistletoe' b':' b"'" b'II' b'<unk>' b'!' b'I' b'<unk>' b'lead' b'at' b'1000' b'or' b'most' b'males' b'in' b'tales'
    b'[' b'or' b']' b'but' b'<unk>' b'far' b',' b'/' b'its' b'male' b'abusive' b'well' b'be' b'perhaps' b'think' b'"' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'Legacy' b'=' b'=' b'<eos>' b'<eos>' b'Howard' b'Horizons' b',' b'who' b'Kitana' b'joked' b'that' b'<unk>' b'nor' b'publishing' b'around' b'"' b'Kuehn' b'birds'
    b'from' b'a' b'American' b'Mississippi' b'"' b',' b'said' b'the' b'meaning' b'was' b'a' b'<unk>' b'rapid' b'flying' b'factor' b',' b'and' b'reviving' b'the' b'series'
    b"'s" b'gift' b'to' b'<unk>' b'a' b'variant' b'.' b'As' b'of' b'1920' b',' b'the' b'preview' b'ranging' b'down' b'of' b'about' b'7' b'minutes' b','
    b'so' b'Jupiter' b'felt' b'that' b'scientists' b"'" b'singing' b'titles' b'and' b'most' b'"' b'noteworthy' b'tasks' b'(' b'requiring' b'increasing' b'or' b'even' b'nice' b'known'
    b'as' b'<unk>' b'<unk>' b'in' b'anything' b'become' b'from' b'Jallon' b'.' b'"' b')' b'describe' b'"' b'Nigel' b'"' b'(' b'Denny' b'agnostic' b')' b'and'
    b'"' b'The' b'bold' b'Us' b'"' b')' b'(' b'The' b'meaning' b'of' b'<unk>' b'Party' b')' b'and' b'other' b'Coombs' b',' b'represents' b'God' b'voices'
    b'known' b'as' b'multiple' b'birds' b'.' b'The' b'roll' b'Hughes' b'is' b'stated' b'to' b'be' b'until' b'response' b'to' b'each' b'male' b'or' b'algal' b'spelling'
    b',' b'because' b'characters' b'such' b'as' b'<unk>' b',' b'Laureate' b',' b'Chambers' b',' b']' b'<unk>' b',' b'Borland' b',' b'presidency' b',' b'<unk>' b','
    b'and' b'<unk>' b';' b'Op.' b'in' b'absence' b'at' b'personal' b'times' b'.' b'Although' b'they' b'barely' b'think' b'that' b'they' b'were' b'convinced' b'they' b'could'
    b'they' b'be' b'separate' b'to' b'die' b',' b'so' b'in' b'respect' b',' b'women' b'evoke' b'595' b',' b'rarely' b'take' b'sheath' b'a' b'way' b'that'
    b'or' b'as' b'follows' b'to' b'identify' b'Mrs' b'Croix' b'from' b'social' b'<unk>' b'or' b'Kombat' b"'" b'article' b',' b'and' b'person' b'"' b'moved' b'that'
    b'it' b'is' b'afraid' b'that' b'it' b'are' b'Manheim' b'granny' b'.' b'"' b'Dr.' b'<unk>' b'suggests' b'that' b'the' b'architectural' b'sex' b'into' b'the' b'adult'
    b',' b'<unk>' b',' b'is' b'therefore' b'willing' b'to' b'be' b'earlier' b'destroyed' b'.' b'In' b'this' b'context' b',' b'legal' b'apparent' b'@-@' b'tree' b'leaves'
    b'by' b'Kitsune' b',' b'are' b'perhaps' b'seen' b'as' b'confident' b'to' b'collect' b'a' b'repetition' b'visit' b'and' b'impede' b'wee' b'investments' b'.' b'Sand' b'.'
    b'To' b'become' b'very' b'common' b',' b'there' b'is' b'particular' b'claim' b'that' b'they' b'can' b'cause' b'limited' b'evidence' b'.' b'Another' b'number' b'of' b'dozen'
    b',' b'Bocks' b',' b'<unk>' b',' b'without' b'head' b';' b'on' b'indiscriminate' b'types' b'of' b'good' b'billions' b',' b'and' b'sue' b'may' b'have' b'been'
    b'scathing' b',' b'with' b'some' b'eight' b'different' b'parks' b'.' b'marriage' b',' b'according' b'to' b'these' b'<unk>' b'or' b'green' b',' b'<unk>' b',' b'aboard'
    b'@-@' b'particles' b',' b'and' b'genetic' b'@-@' b'gravity' b'of' b'their' b'<unk>' b'among' b'<unk>' b',' b'centered' b'on' b'a' b'wide' b'life' b'.' b'When'
    b'he' b'considered' b'his' b'<unk>' b',' b'they' b'dismissed' b',' b'with' b'some' b'supernatural' b'tails' b'from' b'that' b'century' b'citing' b'.' b'As' b'a' b'successful'
    b'lover' b'of' b'exceptions' b',' b'Ceres' b'used' b'by' b'<unk>' b'and' b'<unk>' b',' b'often' b'carpenters' b'in' b'Strife' b'.' b'They' b'automatically' b'that' b'unresolved'
    b'techniques' b'are' b'usually' b'planning' b'.' b'Almost' b'one' b'widely' b'mRNA' b'with' b'them' b'between' b'<unk>' b'upbeat' b'by' b'foxes' b'and' b'plantations' b',' b'<unk>'
    b'so' b'Rover' b'<eos>' b'M.' b'Abby' b'strive' b'over' b'.' b'The' b'typesetters' b'difference' b'on' b'Intifada' b'seen' b'in' b'their' b'boxes' b'cultures' b'must' b'be'
    b'after' b'good' b'autobiographies' b'and' b'motion' b'.' b'As' b'<unk>' b',' b'she' b'looked' b'to' b'illustrate' b'batsmen' b'from' b'a' b'lesser' b'hardness' b'.' b'John'
    b'shine' b'overbearing' b'support' b'and' b'remove' b'literature' b'.' b'portals' b'stormed' b'to' b'forested' b'.' b'As' b'the' b'male' b'soon' b'gets' b'up' b'and' b'at'
    b'events' b'it' b'enters' b'movement' b',' b'her' b'currents' b'determines' b'them' b'to' b'be' b'string' b'for' b'.' b'He' b'occurs' b'on' b'to' b'have' b'their'
    b'hand' b'objective' b'after' b'Usher' b"'s" b'female' b'calls' b'the' b'coast' b'of' b'them' b'.' b'They' b'flooded' b'it' b'as' b'unable' b'to' b'engage' b'.'
    b'It' b'can' b'be' b'as' b'.' b'<eos>' b'Large' b'starlings' b'explain' b'amidships' b'and' b'groups' b'tearful' b'slowly' b',' b'design' b',' b'reliability' b'and' b'<unk>'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 210.2
    loss: 5.168
    elapsed time (seconds): 139.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  55.609 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
