.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'in' b'his' b'place' b',' b'with' b'Fort' b'Betjeman' b',' b'educated' b'and' b'deterioration' b'in' b'the' b'later' b'reserve' b'year' b'.' b'They' b'found' b'public'
    b'the' b'capillitia' b'/' b'established' b'as' b'a' b'whole' b',' b'and' b'many' b'letters' b'exist' b'so' b'for' b'its' b'lifetime' b'labelled' b'power' b'crush' b'it'
    b'to' b'take' b'their' b'usual' b'Key' b'was' b'not' b'a' b'considerable' b'underparts' b'.' b'When' b'sending' b'liberate' b'his' b'cultivation' b',' b'this' b'would' b'be'
    b'needed' b'to' b'Oxford' b'within' b'the' b'ground' b'against' b'orbit' b'.' b'The' b'Haggerty' b'"' b'Ledger' b'"' b'As' b'"' b'the' b'Irish' b'abandoned' b'forms'
    b'"' b',' b'echoed' b'Independent' b'poets' b',' b'and' b'"' b'<eos>' b'definitely' b'(' b'filmmaking' b')' b'Apparently' b'much' b'Pascal' b'settlement' b',' b'I' b'stormed'
    b'scary' b'else' b'that' b'will' b'be' b'part' b'of' b'the' b'planet' b'"' b'.' b'Other' b'focused' b'in' b'Zombie' b'R.' b'wrote' b'that' b'as' b'faculty'
    b'gotten' b'on' b'26' b'May' b'1123' b',' b'they' b'started' b'their' b'death' b'called' b'"' b'<unk>' b'"' b'and' b'"' b'<unk>' b'"' b'.' b'The'
    b'King' b'Mark' b'coniferous' b'Jonny' b'Boom' b'!' b'II' b'changed' b'on' b'the' b'very' b'smaller' b'run' b'from' b'all' b'of' b'recalled' b'for' b'two' b'years'
    b'boost' b'he' b'was' b'heavily' b'released' b'as' b'other' b'<unk>' b',' b'and' b'the' b'governor' b'of' b'artists' b'introduced' b'favourable' b'titles' b'Mantell' b"'s" b'position'
    b'.' b'<eos>' b'sir' b'from' b'3' b'February' b'@-@' b'century' b'Crash' b'de' b'Bang' b'!' b',' b'Australia' b',' b'and' b'was' b'published' b'largely' b'in'
    b'successes' b',' b'<unk>' b'and' b'embark' b'on' b'service' b'by' b'excessive' b'titles' b',' b'to' b'create' b'a' b'neglected' b'measure' b'to' b'54' b',' b'master'
    b'more' b'than' b'average' b'military' b'items' b'.' b'<eos>' b'The' b'importins' b'of' b'one' b'helium' b'horse' b'offerings' b'have' b'been' b'until' b'several' b'languages' b'ago'
    b'such' b'as' b'Heroes' b',' b'the' b'king' b'and' b'having' b'only' b'Benson' b'.' b'The' b'raiding' b'markets' b'tells' b'transits' b'of' b'heard' b'centers' b','
    b'considered' b'cloth' b'cultural' b'or' b'hosts' b',' b'Thirteen' b'remote' b',' b'in' b'the' b'fourth' b'setting' b'of' b'the' b'Western' b'Union' b'and' b'the' b'California'
    b'tofu' b'toy' b',' b'a' b'action' b'for' b'<unk>' b'.' b'It' b'presented' b'a' b'continuous' b'school' b',' b'known' b'as' b'sugar' b'privilege' b',' b'the'
    b'official' b'production' b'of' b'Stanley' b'in' b'Everglades' b'literature' b',' b'suggested' b'.' b'Subsequently' b',' b'since' b'trouble' b'Jamaica' b',' b'the' b'population' b'of' b'Ireland'
    b'in' b'the' b'19th' b'Division' b'was' b'published' b'in' b'video' b'movement' b'and' b'top' b'to' b'Earth' b'and' b'revenge' b'.' b'The' b'story' b'of' b'square'
    b'million' b'exile' b'were' b'never' b'facilitated' b'by' b'two' b'churches' b'as' b'a' b'security' b'plot' b'that' b'included' b'the' b'number' b'of' b'other' b'factors' b'.'
    b'Regarding' b'that' b'story' b',' b'with' b'its' b'work' b'to' b'rule' b'so' b'BET' b',' b'may' b'have' b'moved' b'.' b'There' b'have' b'been' b'demand'
    b'that' b'the' b'game' b'qualified' b'the' b'anthem' b'of' b'living' b'(' b'Middle' b':' b')' b'both' b'few' b'million' b'propaganda' b'(' b'39' b'in' b')'
    b',' b'and' b'likely' b'it' b'is' b'a' b'product' b'of' b'a' b'planet' b'for' b'a' b'"' b'hot' b'Stelae' b'"' b'.' b'<eos>' b'403' b'editor'
    b'Lloyd' b'Prasad' b'and' b'roughly' b'eight' b'in' b'the' b'Black' b'Bowl' b'took' b'place' b'into' b'their' b'protest' b'.' b'Dirt' b'becomes' b'duets' b',' b'and'
    b'only' b'researched' b'mammal' b'or' b'fame' b',' b'as' b'upset' b'efforts' b',' b'focusing' b'according' b'to' b'Calle' b',' b'steamboats' b',' b'and' b'social' b'relationships'
    b'.' b'Its' b'barrels' b'carved' b'down' b'in' b'his' b'own' b'sector' b'concentric' b'to' b'intersecting' b'<unk>' b',' b'in' b'similar' b'a' b'thinking' b'at' b'a'
    b'regular' b'parents' b'of' b'oral' b'communication' b'.' b'The' b'kakapo' b'marked' b'a' b'handful' b'of' b'seven' b'other' b'astronomers' b',' b'with' b'the' b'idea' b'can'
    b'not' b'have' b'either' b'built' b'.' b'<eos>' b'In' b'tomb' b'BC' b'originated' b'up' b'Dominican' b'Today' b',' b'<unk>' b'Crash' b'Beethoven' b'and' b'Count' b'.'
    b'Generally' b'in' b'Michigan' b',' b'with' b'racing' b',' b'he' b'has' b'by' b'propose' b',' b'.' b'"' b'Boy' b'"' b'is' b'specific' b'<unk>' b','
    b'which' b'worked' b'on' b'people' b'sculpted' b'up' b'between' b'either' b'over' b'12' b'years' b',' b'or' b'a' b'females' b';' b'grows' b'when' b'this' b'drop'
    b'with' b'any' b'remainder' b'at' b'an' b'horsepower' b'.' b'The' b'kakapo' b'is' b'that' b'they' b'are' b'broken' b'as' b'to' b'deploy' b'or' b'have' b'a'
    b'slow' b'attendant' b'.' b'After' b'i.e.' b',' b'the' b'female' b'may' b'use' b'in' b'Mount' b'Bailey' b"'s" b'(' b'1998' b')' b'Smith' b"'" b'Prairie'
    b'History' b'(' b'Wolves' b')' b'.' b'The' b'Dun' b'Johnson' b'(' b'especially' b'known' b'as' b'the' b'<unk>' b'complexes' b')' b'and' b'enters' b'in' b'this'
    b'past' b'or' b'climbing' b'range' b'with' b'has' b'fallen' b'in' b'time' b'.' b'sketch' b'feral' b'Tsar' b'<unk>' b',' b'such' b'as' b'the' b'skyscraper' b'transition'
    b',' b'Punta' b'Fouke' b'(' b'II' b')' b'.' b'Cajal' b'feature' b'on' b'the' b'same' b'name' b'but' b'some' b'meanwhile' b'have' b'long' b'code' b'.'
    b'M\xc4\x81ori' b'Flight' b'Hendrie' b'published' b'one' b'running' b'back' b'from' b'a' b'Mallory' b'involved' b'from' b'tents' b'on' b'Carpenter' b'and' b'bill' b'depict' b'displays' b'or'
    b'will' b'<unk>' b'the' b'attitude' b'of' b'Jefferson' b',' b'due' b'to' b'their' b'mother' b'<unk>' b'or' b'terror' b'in' b'his' b'<unk>' b'in' b'the' b'New'
    b'York' b'barons' b',' b'artificial' b'care' b',' b'<unk>' b'bearing' b'general' b'<unk>' b',' b'whereas' b'their' b'degree' b'have' b'done' b'so' b'making' b'as' b'pale'
    b',' b'when' b'unlike' b'folklore' b'of' b'maintaining' b'the' b'Tokyo' b'planet' b'boxes' b'to' b'have' b'occupied' b'it' b'in' b'the' b'area' b'.' b'No' b'groups'
    b'of' b'hands' b',' b'along' b'with' b'or' b'Australia' b'writes' b'that' b'as' b'well' b'as' b'this' b',' b'may' b'have' b'been' b'<unk>' b',' b'and'
    b'even' b'have' b'sent' b'everything' b',' b'they' b'are' b'desert' b'distributing' b'enough' b'to' b'come' b'to' b'junction' b'parallel' b'or' b'food' b'.' b'remove' b'at'
    b':' b'<unk>' b'in' b'Europe' b',' b'auxiliary' b'feeding' b'in' b'support' b'of' b'the' b'south' b'to' b'more' b',' b'and' b'sensibilities' b'caused' b'curve' b'because'
    b'they' b'do' b'maintenance' b'which' b'could' b'be' b'seen' b'to' b'play' b'.' b'<unk>' b'editors' b'such' b'as' b'fragment' b',' b'<unk>' b'review' b',' b'cycle'
    b'covers' b'clean' b'activity' b',' b'reinforced' b'since' b'the' b'palace' b'of' b'The' b'nuclear' b'United' b'States' b',' b'Florida' b',' b'peptide' b',' b'<unk>' b','
    b'general' b',' b'loudspeaker' b',' b'and' b'serves' b'a' b'night' b'national' b'range' b'that' b'serve' b'on' b'food' b'.' b'About' b'18' b'of' b'the' b'kakapo'
    b'have' b'both' b'been' b'of' b'rise' b'.' b'After' b'the' b'kakapo' b',' b'borders' b'have' b'also' b'cited' b'guarding' b'authority' b'.' b'On' b'October' b'26'
    b',' b'2010' b',' b'it' b'was' b'listed' b'with' b'alternative' b',' b'<unk>' b',' b'Marie' b',' b'Kass' b',' b'Belorussiya' b',' b'<unk>' b',' b'Devi'
    b',' b'<unk>' b',' b'a' b'number' b'of' b'monotheism' b',' b'provision' b',' b'and' b'speckles' b'were' b'translated' b'to' b'be' b'direct' b'.' b'A' b'regiment'
    b'necessary' b',' b'announced' b'for' b'a' b'bed' b'@-@' b'blown' b'in' b'any' b'quarter' b'faces' b'at' b'965' b',' b'<unk>' b'<unk>' b',' b'with' b'a'
    b'long' b'variety' b'of' b'signaling' b',' b'the' b'largest' b'Naked' b'issues' b'of' b'the' b'solar' b'capital' b',' b'and' b'instigated' b'they' b'can' b'alter' b'neither'
    b'the' b'same' b'first' b'other' b'.' b'Since' b'installing' b',' b'they' b'are' b'ill' b'in' b'Iona' b':' b'constitute' b'embrace' b'and' b'protester' b'treasure' b'sufficiently'
    b'in' b'way' b'that' b'they' b'were' b'a' b'wooden' b'matched' b'.' b'His' b'own' b'<unk>' b'has' b'shallow' b'ecological' b'and' b'accurately' b'anonymous' b',' b'leaving'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 215.9
    loss: 5.168
    elapsed time (seconds): 141.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  3.343 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
