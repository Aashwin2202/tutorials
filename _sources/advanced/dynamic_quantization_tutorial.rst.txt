.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'again' b'were' b'internationally' b'.' b'<unk>' b'though' b'in' b'his' b'first' b'race' b',' b'he' b'was' b'able' b'to' b'December' b'5' b',' b'initially' b'with'
    b'sheer' b'writers' b':' b'The' b'Bureau' b'of' b'American' b'Sichuan' b'has' b'a' b'expectation' b'of' b'who' b'ever' b'<unk>' b'at' b'050' b'Scientology' b',' b'but'
    b'accounted' b'to' b'the' b'Valanginian' b'lands' b'.' b'He' b'built' b'a' b'Spanish' b'language' b'in' b'supporting' b'threats' b'from' b'<unk>' b',' b'lacking' b'over' b'three'
    b'months' b'over' b'them' b',' b'or' b'then' b'carried' b'a' b'number' b'of' b'motion' b'Salem' b'at' b'indium' b'practices' b'.' b'Virginia' b'Foundation' b'has' b'stated'
    b'that' b'rape' b'in' b'2004' b'might' b'be' b'to' b'think' b'a' b'sense' b'of' b'buildings' b'on' b'Francisco' b'patent' b'records' b'led' b'in' b'1965' b'.'
    b'Mr.' b'Stewart' b'would' b'be' b'a' b'free' b'city' b'of' b'language' b'on' b'Xiangyang' b'.' b'cosmic' b'stories' b'were' b'formed' b'by' b'<unk>' b'<unk>' b'.'
    b'However' b',' b'it' b'was' b'once' b'debated' b'for' b'biographical' b'relations' b'extensively' b',' b'and' b'dated' b'three' b'or' b'five' b'earned' b'stories' b'.' b'They'
    b'brought' b'biblical' b'Rico' b',' b'so' b'there' b'is' b'debated' b'that' b'they' b'needed' b'to' b'run' b'and' b'\xc2\xb5g' b'processional' b',' b'which' b'Hawai\xca\xbbi' b'for'
    b'students' b'has' b'today' b'.' b'Over' b'his' b'date' b'of' b'a' b'scenario' b'within' b'the' b'2016' b'language' b',' b'Expert' b'distance' b'to' b'fifty' b'campaigns'
    b'away' b'in' b'England' b'.' b'The' b'winner' b'of' b'42' b'@.@' b'5' b'in' b'(' b'Skirmishes' b')' b'and' b'the' b'male' b'takes' b'his' b'one'
    b'of' b'the' b'year' b'with' b'far' b',' b'mostly' b'on' b'the' b'feeding' b'setting' b'as' b'described' b'by' b'other' b'inspecting' b'teams' b'.' b'<eos>' b'<eos>'
    b'<eos>' b'=' b'Omar' b'uncompromising' b'=' b'<eos>' b'<eos>' b'The' b'North' b'Koreans' b'Crowns' b',' b'Offshore' b'Special' b'saint' b',' b'and' b'Recreation' b',' b'is'
    b'very' b'commonly' b'sold' b'with' b'a' b'original' b',' b'the' b'highest' b'bolts' b'.' b'It' b'has' b'introduced' b'a' b'private' b'Liebmann' b'root' b',' b'a'
    b'180' b'%' b'previously' b'includes' b'unmanaged' b'BL' b',' b'present' b',' b'blue' b'and' b'mountain' b',' b'<unk>' b'(' b'<unk>' b')' b'crafted' b'(' b'402'
    b')' b'to' b'his' b'neighbors' b',' b'and' b'Barbados' b'Mayor' b'141' b'as' b'hemmemas' b'of' b'its' b'Mississippi' b'(' b'Queens' b'Child' b')' b'.' b'The'
    b'popular' b'coalitions' b'are' b'pale' b'more' b'than' b'since' b'it' b'.' b'As' b'a' b'star' b',' b'onwards' b'is' b'hasn' b'Soundscan' b',' b'which' b'is'
    b'trapped' b'upon' b',' b'sometimes' b'between' b'earlier' b'a' b'planet' b'as' b'a' b'electron' b'emperors' b'through' b'a' b'Romanesque' b',' b'while' b'he' b'saw' b'small'
    b'nets' b'in' b'stream' b';' b'bug' b'the' b'vegetables' b'to' b'be' b'the' b'first' b'to' b'surface' b'cream' b'@-@' b'head' b'prey' b'.' b'It' b'is'
    b'one' b'of' b'those' b'individual' b',' b'that' b'had' b'difficulty' b'its' b'affection' b'of' b'traditional' b'streaks' b'or' b'manipulating' b'.' b'inspiration' b'include' b'Odaenathus' b','
    b'does' b'has' b'a' b'population' b'of' b'Midway' b'long' b'.' b'A' b'female' b'and' b'tail' b'relief' b',' b'are' b'recommended' b'from' b'to' b'come' b'with'
    b'a' b'female' b',' b'while' b'the' b'aerodrome' b'is' b'the' b'old' b'pre' b'@-@' b'developed' b'chicks' b'size' b'to' b'11' b'centimetres' b'(' b'4' b'@.@'
    b'6' b'in' b')' b'tall' b'.' b'The' b'asteroid' b'raptors' b'may' b'be' b'twelfth' b'.' b'van' b'F.' b'photons' b'may' b'form' b'from' b'/' b'19'
    b'million' b'Shampain' b',' b'and' b'joined' b'fine' b'importance' b'.' b'The' b'envelope' b'proteins' b'also' b'migrate' b'to' b'the' b'west' b',' b'depending' b'on' b'<unk>'
    b'and' b'female' b'brown' b'@-@' b'grey' b',' b'touching' b'<unk>' b',' b'accuses' b'Ulaid' b'from' b'blue' b',' b'unlocks' b'grey' b'clockwise' b'(' b'phosphate' b','
    b'powerful' b',' b'1985' b')' b'stained' b'it' b'<unk>' b',' b'extirpated' b',' b'speckles' b'and' b'<unk>' b',' b'Brittany' b'query' b'and' b'Eurasia' b'.' b'Despite'
    b'the' b'naked' b'participants' b'(' b'reaching' b'night' b'since' b'1999' b',' b'the' b'green' b'wife' b'does' b'contain' b'four' b'or' b'17' b'seconds' b'early' b'.'
    b')' b'dams' b'are' b'a' b'first' b'fronted' b'@-@' b'male' b'skull' b',' b'with' b'ranges' b'three' b'greater' b'weeks' b'.' b'The' b'largest' b'common' b'starling'
    b'was' b'.' b'<eos>' b'Since' b',' b'with' b'its' b'electric' b'reproductive' b'into' b'Jerusalemite' b'plumage' b',' b'sexpunctatus' b'females' b',' b'a' b'female' b',' b'and'
    b'<unk>' b'dwarf' b'or' b'dark' b'dance' b'oil' b',' b'have' b'muscular' b'Romanesque' b',' b'<unk>' b',' b'clutch' b',' b'and' b'Llanedeyrn' b'.' b'Data' b'1666'
    b'that' b'Daniil' b'eats' b'<unk>' b'gradually' b'produced' b'generally' b'however' b'as' b'.' b'They' b'have' b'no' b'host' b'Celts' b'at' b'hell' b'.' b'In' b'addition'
    b',' b'they' b'leave' b'12' b'a.m.' b',' b'the' b'other' b'or' b'one' b'ground' b'or' b'those' b'blue' b'when' b'it' b'is' b'i.e.' b'that' b'it'
    b'lacks' b'be' b'descended' b'from' b'Fortuna' b'.' b'Once' b'found' b'uncertain' b'like' b'<eos>' b'<unk>' b'<unk>' b',' b'the' b'ecology' b'of' b'feeding' b'their' b'southwestward'
    b'fungus' b'on' b'12' b'September' b'1791' b',' b'and' b'in' b'addition' b'to' b'elements' b';' b'Ayrshire' b'has' b'apparently' b'risen' b'.' b'Peshkin' b'and' b'separates'
    b'ligatures' b'through' b'"' b'since' b'"' b'that' b'may' b'be' b'around' b'display' b'gills' b'will' b'be' b'greater' b'.' b'Martial' b'amounts' b'occur' b'against' b'<unk>'
    b'exposure' b'to' b'these' b'invertebrates' b',' b'which' b'was' b'written' b'each' b'.' b'Several' b'governing' b'soldiers' b'have' b'the' b'size' b'of' b'<unk>' b'mineurs' b'on'
    b'presents' b'when' b'wine' b',' b'some' b'elevations' b'are' b'open' b'twice' b'.' b'Banksia' b'house' b'suggests' b'that' b'humans' b'was' b'poor' b'obsolete' b'even' b','
    b'and' b'reliably' b'flocks' b'were' b'found' b'by' b'commandant' b'of' b'his' b'brooches' b'but' b'may' b'be' b'Ireland' b'collapsed' b'.' b'Ironically' b',' b'it' b'can'
    b'be' b'distinguished' b'by' b'Historia' b'High' b'sacs' b'so' b'.' b'With' b'these' b',' b'these' b'spots' b'are' b'controlled' b'by' b'message' b'.' b'For' b'this'
    b'other' b'meeting' b'involve' b'Pullo' b'chain' b'has' b'once' b'banned' b'or' b'complete' b',' b'with' b'other' b'other' b'passion' b'in' b'them' b'average' b'<unk>' b'or'
    b'\xe1\x83\xab' b'.' b'There' b'is' b'no' b'possible' b'evidence' b'that' b'both' b',' b'such' b'as' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'Coke' b','
    b'Arabia' b'(' b'corresponding' b')' b',' b'Andrzej' b'Goodwin' b',' b'A' b'communal' b'character' b',' b'Platte' b',' b'and' b'other' b'predators' b'include' b'their' b'<unk>'
    b'sacks' b':' b'oil' b',' b'Ukraine' b'at' b'2' b'\xc2\xb0' b'birds' b'Toya' b',' b'and' b'wine' b',' b'all' b'of' b'which' b'are' b'a' b'gait'
    b'between' b'which' b'five' b'eggs' b'bearing' b'metres' b'.' b'It' b'is' b'hewn' b'that' b'caused' b'a' b"'" b'first' b'<unk>' b'd' b'!' b'"' b'('
    b'Morning' b')' b'Orange' b'instead' b'and' b'is' b'the' b'existence' b'of' b'<unk>' b'.' b'ne' b'Nikolayev' b'do' b'not' b'find' b'some' b'prey' b'governments' b'of'
    b'their' b'food' b'.' b'Inside' b'regions' b',' b'they' b'are' b'guilty' b'of' b'latex' b'<unk>' b'.' b'<eos>' b'In' b'this' b'process' b',' b'many' b'commonly'
    b'replicated' b'White' b'to' b'flock' b'their' b'unusually' b'bird' b'factor' b'spiders' b',' b'but' b'is' b'often' b'able' b'to' b'be' b'olfactory' b'.' b'In' b'addition'
    b',' b'many' b'proponents' b'<unk>' b'<unk>' b',' b'approaches' b'<unk>' b',' b'marine' b'this' b'juveniles' b',' b'had' b'just' b'mild' b'wake' b',' b'with' b'they'
    b'feature' b'until' b'order' b'from' b'Australia' b',' b'<unk>' b',' b'trees' b',' b'<unk>' b',' b'Boles\xc5\x82aw' b',' b'<unk>' b',' b'unpaved' b'musical' b',' b'and'
    b'1855' b'.' b'<eos>' b'The' b'spawning' b'formula' b'of' b'a' b'plant' b'who' b'has' b'recorded' b'one' b'growing' b'areas' b':' b'intend' b'to' b'occur' b'on'
    b'disbanding' b'@-@' b'shore' b'\xe2\x80\x9c' b',' b'each' b'of' b'which' b'is' b'so' b'examples' b'of' b'nuclei' b'with' b'<unk>' b'or' b'enzymes' b'.' b'Following' b'the'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 214.2
    loss: 5.168
    elapsed time (seconds): 140.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  1.029 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
