.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'non' b'@-@' b'migratory' b'.' b'Perhaps' b'they' b'was' b'alleged' b'amongst' b'school' b'prints' b',' b'whereas' b'they' b'put' b'for' b'cattle' b'in' b'2006' b'for'
    b'full' b'Fantastic' b'Cynan' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'Religious' b'starlings' b'is' b'largely' b'found' b'from' b'Khandoba'
    b'debris' b'as' b'<unk>' b'.' b'There' b'are' b'galleys' b'<unk>' b'birds' b'for' b'<unk>' b',' b'"' b'age' b'Island' b'"' b',' b'by' b'particular' b','
    b'by' b'Rainn' b'Jeffries' b',' b'whiskey' b'a' b'collection' b'of' b'freedom' b'in' b'Chinese' b'drastic' b',' b'and' b'remake' b'Chadderton' b'(' b'<unk>' b')' b'.'
    b'As' b'one' b'of' b'the' b'International' b'<unk>' b',' b'<unk>' b'boiled' b'into' b'categories' b'at' b'a' b'conversation' b'that' b'talks' b'online' b'without' b'extinct' b'test'
    b'calls' b';' b'while' b'it' b'is' b'their' b'authority' b'until' b'the' b'compartments' b'and' b'element' b',' b'the' b'frequency' b'of' b'Best' b'output' b"'s" b'significant'
    b'male' b'can' b'be' b'<unk>' b',' b'only' b'under' b'changing' b'<unk>' b'@-@' b'Neck' b',' b'the' b'<unk>' b'"' b'22' b'to' b'160' b'km' b'('
    b'0' b'@.@' b'0' b'mi' b')' b',' b'and' b'Key' b'950' b'at' b'D.C.' b'.' b"'" b'They' b"'" b'bell' b'dealings' b',' b'straight' b','
    b'scheduled' b',' b'and' b'there' b'is' b'runs' b'spinal' b'direction' b'at' b'.' b'There' b'is' b'greatly' b'more' b'doubts' b'each' b'before' b'dark' b'cell' b'connections'
    b'in' b'long' b'awards' b',' b'in' b'which' b'the' b'fruit' b'tradition' b'continues' b',' b'so' b'at' b'least' b'these' b'styles' b',' b'it' b'is' b'set'
    b'for' b'example' b',' b'sometimes' b'again' b'electropop' b',' b'touched' b'during' b'the' b'pre' b'@-@' b'coniferous' b'closeness' b'to' b'provide' b'a' b'"' b'cynicism' b'of'
    b'gray' b'"' b'of' b'the' b'male' b'.' b'Each' b'version' b'of' b'the' b'Crimint' b'ideology' b',' b'Durham' b'moves' b'upwards' b'of' b'any' b'other' b'triple'
    b'species' b',' b'while' b'a' b'violet' b'or' b'circuits' b'makes' b'eggs' b'since' b'1960s' b'.' b'According' b'to' b'one' b'of' b'<unk>' b'sitting' b'on' b'to'
    b'illustrate' b'bodies' b'or' b'rhythms' b'.' b'Nonetheless' b',' b'this' b'male' b'of' b'the' b'body' b'spots' b'is' b'<unk>' b'.' b'A' b'intelligent' b'tree' b'of'
    b'developing' b'other' b'spots' b'may' b'be' b'found' b',' b'which' b'should' b'rounded' b'a' b'small' b'food' b'crisis' b'from' b'<unk>' b'move' b'until' b'force' b'.'
    b'Each' b'episode' b'was' b'killed' b'by' b'14' b'@.@' b'5' b'million' b'individuals' b',' b'1' b'@.@' b'15' b'%' b',' b'and' b'more' b'more' b'blue'
    b'leaves' b'.' b'<eos>' b'A' b'body' b'has' b'grown' b'the' b'35' b'metres' b'(' b'7' b'@.@' b'3' b'mi' b')' b'from' b'a' b'<unk>' b','
    b'although' b'serves' b'begins' b'for' b'lined' b'eggs' b',' b'the' b'largest' b'species' b'of' b'Irish' b'plumage' b'may' b'be' b'reduced' b'.' b'E.' b'differs' b'at'
    b'trackage' b'is' b'attributed' b'toward' b'hot' b'forests' b'.' b'A' b'<unk>' b'species' b'of' b'some' b'wickets' b'is' b'lb' b',' b'so' b'older' b',' b'despite'
    b'common' b'or' b'roost' b'by' b'the' b'bird' b'hand' b',' b'are' b'also' b'invoked' b'and' b'enlarged' b'depending' b'in' b'about' b'2' b'@.@' b'5' b'('
    b'5' b'@.@' b'8' b'\xe2\x80\x93' b'2' b'@.@' b'4' b'\xe2\x80\x93' b'32' b'in' b')' b'.' b'The' b'second' b'predators' b'of' b'Ceres' b'can' b'wherein' b'a'
    b'large' b',' b'Gaelic' b'brownish' b',' b'and' b'are' b'grants' b'detect' b'.' b'Since' b'24' b'\xe2\x80\x93' b'4' b',' b'birds' b',' b'females' b'may' b'occur'
    b'under' b'exclusively' b'or' b'up' b'.' b'It' b'are' b'still' b'used' b'or' b'weighed' b'until' b'discredited' b',' b'one' b'player' b'and' b'even' b'<unk>' b'severe'
    b'as' b'the' b'possession' b'of' b'460' b'areas' b'on' b'some' b'side' b'and' b'her' b'water' b'were' b'acceptable' b'.' b'If' b'other' b'chicks' b'may' b'consume'
    b',' b'and' b'they' b'<unk>' b'they' b'are' b'affected' b'by' b'<unk>' b',' b'they' b'entailed' b'.' b'A' b'depth' b'of' b'inside' b'eggs' b',' b'while'
    b'they' b'have' b'a' b'different' b'prey' b'of' b'mischief' b'.' b'This' b'claim' b'their' b'height' b'of' b'more' b'or' b'two' b'citizens' b'of' b'dwarf' b'"'
    b'The' b'man' b'of' b'males' b'"' b',' b'because' b'they' b'do' b'not' b'make' b'their' b'diet' b'that' b'they' b'are' b'injured' b'by' b'a' b'fused'
    b'of' b',' b'which' b'are' b'fewer' b'in' b'the' b'past' b',' b'which' b'<unk>' b'@-@' b'oh' b'or' b'health' b',' b'individual' b'themselves' b';' b'they'
    b'easily' b'shouted' b'different' b',' b'particularly' b'near' b'the' b'other' b'<unk>' b',' b'most' b'dozen' b'mating' b',' b'depending' b'in' b'a' b'four' b'@-@' b'19th'
    b'or' b'mechanical' b'cell' b'of' b'Europe' b',' b'and' b'establish' b'as' b'they' b'are' b'long' b'.' b'They' b'were' b'named' b'by' b'higher' b'species' b'of'
    b'colour' b'.' b'These' b'<unk>' b'are' b'easily' b'useful' b',' b'causing' b'them' b'on' b'a' b'large' b'beast' b'that' b'has' b'long' b'his' b'Irish' b'fellows'
    b'.' b'He' b'gather' b'up' b'+' b'42' b'on' b'Pitlake' b"'s" b'body' b'(' b'1' b'%' b'only' b'one' b'to' b'date' b')' b',' b'INS'
    b'Southeastern' b'and' b'm' b'.' b'When' b'any' b'over' b'these' b'prey' b'do' b'return' b'to' b'a' b'Telescope' b',' b'he' b'may' b'live' b'significant' b'damage'
    b',' b'emitted' b'to' b'20' b'@.@' b'1' b'\xc2\xb5m' b'layers' b'.' b'Their' b'length' b'for' b'the' b'female' b'Bigger' b'behind' b'3' b'\xc2\xb0' b'hundred' b','
    b'height' b'of' b'8' b'@.@' b'5' b'by' b'11' b'cm' b')' b'old' b',' b'which' b',' b'with' b'some' b'larger' b',' b'roll' b',' b'is'
    b'Flatts' b'.' b'As' b'females' b',' b'it' b'does' b'not' b'be' b'descended' b'alongside' b'a' b'sub' b'@-@' b'Marylebone' b'crest' b'(' b'flares' b')' b'of'
    b'an' b'dwarf' b'and' b'emission' b'that' b'they' b'are' b'ticks' b'that' b'they' b'lip' b'may' b'.' b'They' b'have' b'declined' b'in' b'her' b'numbers' b'of'
    b'dry' b'or' b'small' b'purposes' b',' b'particularly' b'people' b'or' b'out' b'by' b'birds' b',' b'so' b'usefulness' b',' b'fumes' b',' b'heat' b',' b'Shropshire'
    b',' b'country' b',' b'tumulus' b',' b'even' b'inexperienced' b'unintentionally' b',' b'nominally' b'undoubtedly' b',' b'sometimes' b'may' b'occur' b'.' b'This' b'species' b'resulted' b'until'
    b'the' b'males' b';' b'clicking' b',' b'even' b'social' b'light' b'females' b',' b'are' b'often' b'damaged' b',' b'wrong' b'after' b'extremes' b'of' b'three' b'sparsely'
    b'items' b'.' b'it' b'displays' b'themselves' b'from' b'their' b'small' b'skin' b',' b'even' b'regulated' b'by' b'their' b'food' b'spans' b'"' b'for' b'a' b'ancestral'
    b'power' b'"' b'at' b'trees' b'.' b'He' b'also' b'claims' b'when' b'the' b'<unk>' b'gunfight' b'extends' b'by' b'individual' b'and' b'by' b'any' b'species' b'of'
    b'supplying' b'feeding' b'pole' b'depths' b'than' b'the' b'water' b'access' b'to' b'<unk>' b',' b'resembling' b'her' b'only' b'triple' b'nature' b'superior' b'them' b'.' b'The'
    b'non' b'@-@' b'century' b'theorist' b'europium' b'in' b'<unk>' b'(' b'<unk>' b')' b'is' b'a' b'slightly' b'enthusiastic' b'domain' b'from' b'goddess' b'crake' b'and' b'Beirut'
    b'555' b'on' b'guitar' b',' b'because' b'a' b'natural' b'female' b'are' b'disciplined' b',' b'Firebrand' b',' b'observed' b',' b'and' b'Moskin' b'.' b'During' b'example'
    b',' b'it' b'is' b'thought' b'to' b'be' b'killed' b'under' b'a' b'wide' b'but' b'good' b'poem' b',' b'with' b'Clearmountain' b',' b'as' b'she' b'visits'
    b'part' b'of' b'them' b'.' b'The' b'female' b'will' b'also' b'Otherwise' b'short' b'while' b'often' b'mount' b'itself' b':' b'Krayoxx' b',' b'in' b'contrast' b'to'
    b'Bismarck' b',' b'he' b'continuously' b'conclude' b'that' b'Laz' b'man' b'.' b'In' b'selectivity' b'all' b'find' b'of' b'a' b'bird' b'or' b'individuals' b'abundant' b'medium'
    b',' b'they' b'do' b'leaves' b'attacks' b'.' b'They' b'clearly' b'also' b'parallel' b'to' b'enzyme' b'<unk>' b'(' b'<unk>' b')' b'where' b'nm' b'went' b'to'
    b'<unk>' b',' b'tricks' b'as' b'a' b'active' b'bare' b'caste' b',' b'taking' b'polyurethane' b'risk' b'where' b'he' b'compares' b'his' b'bias' b'of' b'food' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 214.1
    loss: 5.168
    elapsed time (seconds): 140.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  0.651 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
