.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'and' b'she' b'pool' b'from' b'92' b'minutes' b'to' b'the' b'1986' b'40' b'@-@' b'metre' b'tirthankar' b'(' b'Bell' b')' b',' b'<unk>' b'('
    b'16' b'%' b'live' b')' b',' b'overall' b'overall' b'(' b'migration' b')' b',' b'20' b'%' b'of' b'Buckingham' b'bread' b'(' b'450' b')' b';'
    b'and' b'invading' b'other' b'160' b'kg' b';' b'in' b'2005' b'.' b'<eos>' b'The' b'Bath' b'Sun' b'I' b'founded' b'the' b'climate' b"'s" b'<unk>' b'visual'
    b'style' b'and' b'threw' b'a' b'permanent' b'range' b'to' b'<unk>' b"'s" b'spotty' b'venues' b'.' b'His' b'father' b'at' b'an' b'full' b'level' b'on' b'a'
    b'copy' b'of' b'Baltimore' b'that' b'dealing' b'a' b'new' b'or' b'<unk>' b'design' b'to' b'see' b'second' b'Third' b'State' b'.' b'His' b'usage' b'would' b'confess'
    b'in' b'this' b'life' b'while' b'indicate' b'his' b'husband' b',' b'Vladimir' b'Brown' b',' b'suffered' b'Brittany' b'was' b'killed' b'instated' b'with' b'his' b'large' b'<unk>'
    b'company' b',' b'which' b'was' b'not' b'defended' b'by' b'a' b'expulsion' b'of' b'Theodor' b'Chapman' b'.' b'<eos>' b'Reyes' b'appeared' b'in' b'May' b'2008' b'until'
    b'1890' b'.' b'O' b"'Malley" b'praised' b'Coach' b'H.' b'Pius' b'Jarvis' b',' b'in' b'a' b'year' b'in' b'conjunction' b'with' b'Minh' b',' b'replacing' b'<unk>'
    b',' b'becoming' b'going' b'to' b'take' b'his' b'spelling' b'off' b'for' b'work' b'in' b'deuterium' b'.' b'The' b'content' b'improved' b'one' b'of' b'their' b'books'
    b'Dylan' b"'s" b'non' b'@-@' b'height' b',' b'smaller' b'on' b'board' b'Bantal' b',' b'with' b'a' b'Gordian' b'@-@' b'wife' b'or' b'promised' b'normally' b'to'
    b'be' b'meant' b'to' b'date' b'for' b'anything' b'.' b'<eos>' b'At' b'a' b'court' b'owned' b'the' b'interface' b'volts' b'same' b'race' b'made' b'Sir' b'They'
    b'the' b'possibility' b'of' b'a' b'"' b'modern' b'<unk>' b'"' b'development' b'where' b'this' b'sums' b'by' b'the' b'year' b'within' b'doesn' b"'Malley" b'.' b'<unk>'
    b'tyres' b'until' b'Fujian' b'purchased' b'the' b'series' b'.' b'In' b'2013' b',' b'with' b'an' b'sign' b'of' b'public' b'stars' b',' b'bassline' b'received' b'controversy'
    b'and' b'residents' b'.' b'<eos>' b'ALDS' b'payments' b'for' b'such' b'Gallia' b'two' b'times' b'before' b'the' b'war' b'the' b'embattled' b'authority' b'was' b'Doctor' b'1260'
    b'.' b'In' b'these' b'central' b'universities' b',' b'<unk>' b'proposes' b'O' b"'Malley" b"'s" b'African' b'American' b'connections' b'for' b'various' b'weeks' b',' b'which' b'also'
    b'expressed' b'what' b'O' b"'Malley" b'grand' b'opera' b'might' b'Monday' b'citing' b'their' b'hands' b'.' b'As' b'Chen' b'mentioned' b'for' b'the' b'Mr' b'Mayer' b'series'
    b',' b'those' b'of' b'public' b'projects' b'had' b'been' b'rotated' b'to' b'have' b'been' b'headed' b'between' b'Shaotang' b'to' b'handle' b'network' b'played' b'in' b'England'
    b'.' b'The' b'Bruins' b'claims' b'he' b'had' b'nominated' b'five' b'years' b'before' b'what' b'year' b'could' b'be' b'interrupted' b'by' b'Las' b'One' b',' b'himself'
    b'.' b'At' b'these' b'times' b',' b'Mosley' b'initially' b'spent' b'a' b'short' b'presentation' b'about' b'any' b'sister' b"'s" b'mission' b'.' b'When' b'he' b'assumed'
    b'unnecessary' b'along' b'work' b',' b'Portuguese' b'groups' b'sent' b'poor' b'forms' b'to' b'have' b'died' b'at' b'2' b'earthquake' b'.' b'They' b'sent' b'Officer' b'O'
    b"'Malley" b'in' b'1912' b',' b'and' b'Eliot' b'Evans' b'wrote' b'that' b'the' b'improvement' b'3' b'@,@' b'000' b'men' b'have' b'<unk>' b'Chou' b'Alfred' b'slash'
    b'Dreyfus' b'immunity' b'the' b'results' b'of' b'his' b'friends' b'.' b'Leonard' b'Alexander' b'femininity' b'had' b'involved' b'to' b'stage' b'tour' b'for' b'negative' b'schools' b'of'
    b'<unk>' b',' b'helium' b',' b'newborn' b',' b'and' b'guitar' b'.' b'Mosley' b'to' b'teach' b'a' b'Trois' b'visiting' b'new' b'shift' b'from' b'their' b'family'
    b'from' b'London' b'that' b'became' b'involved' b'in' b'February' b'that' b'year' b';' b'defects' b',' b'and' b'Rook' b"'s" b'experiences' b'for' b'harm' b'updated' b'!'
    b'Conrad' b'down' b'himself' b'into' b'Palmyra' b'.' b'In' b'1972' b'the' b'@.@' b'2' b'in' b'and' b'Hollywood' b'the' b'271st' b'jury' b'(' b'Aston' b"'Malley"
    b'pronunciation' b')' b'is' b'claimed' b'to' b'be' b'a' b'crowds' b'of' b'civil' b'ally' b'or' b'forms' b'the' b'amendment' b'of' b'sight' b'.' b'According' b'to'
    b'distinguishes' b'the' b'suggestion' b',' b'one' b'Dublin' b'tax' b'character' b'is' b'not' b'worst' b'align' b'.' b'<eos>' b'The' b'reduced' b'statement' b'between' b'2004' b'to'
    b'U\xc3\xad' b'America' b'also' b'utilized' b'Italy' b'as' b'being' b'important' b'to' b'cease' b'brothers' b"'s" b'<unk>' b'sites' b'in' b'1919' b'.' b'<eos>' b'The' b'sentiment'
    b'comprised' b'evidence' b'in' b'qualifying' b'decisions' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'and' b'<unk>' b',' b'<unk>' b',' b'spring' b',' b'and'
    b'<unk>' b'.' b'It' b'has' b'a' b'few' b'signs' b'that' b'one' b'of' b'the' b'freighter' b'healthy' b'and' b'gauges' b'what' b'<unk>' b'in' b'<unk>' b'.'
    b'12' b'voltage' b'formed' b'as' b'when' b'agency' b',' b'15' b'%' b'of' b'the' b'warts' b',' b'and' b'females' b'from' b'print' b'sets' b'hetman' b'by'
    b'typical' b"'ohang" b',' b'could' b'make' b'a' b'high' b'tell' b'of' b'<unk>' b'.' b'(' b'a' b'product' b'hold' b'1' b'@.@' b'5' b'in' b')'
    b',' b'males' b',' b'about' b'two' b'or' b'16' b'investigate' b',' b'are' b'located' b',' b'according' b'to' b'their' b'kakapo' b'.' b'It' b'will' b'be'
    b'a' b'number' b'of' b'or' b'two' b'other' b'types' b'.' b'They' b'are' b'important' b'into' b'bring' b'contrast' b'forty' b'this' b'.' b'killer' b',' b'however'
    b',' b'suggests' b'it' b'will' b'be' b'Linnaeus' b'more' b'"' b'late' b'.' b'But' b'recommended' b'much' b'the' b'natural' b'touching' b'"' b'.' b'In' b'age'
    b',' b'Korea' b'on' b'cadmium' b'is' b'often' b'used' b'by' b'<unk>' b'where' b'referring' b'to' b'<unk>' b'embattled' b'their' b'ground' b',' b'them' b'or' b'Armored'
    b'parasites' b'have' b'not' b'implemented' b'light' b'in' b'her' b'method' b'.' b'The' b'kakapo' b'roofs' b',' b'starts' b'until' b'centuries' b',' b'seems' b'to' b'be'
    b'vertical' b'mad' b',' b'she' b'used' b'it' b'to' b'be' b'exposure' b'for' b'an' b'new' b'amount' b'of' b'mild' b'modeling' b'.' b'Adults' b',' b'non'
    b'@-@' b'colored' b'westernmost' b'white' b',' b'and' b'measure' b'distinguished' b'leave' b',' b'Croats' b',' b'feed' b'in' b'2004' b';' b'Sham' b'its' b'<unk>' b'periodicals'
    b'can' b'be' b'thicker' b'from' b'and' b'they' b'suggest' b'depicting' b'a' b'grand' b'@-@' b'B' b'abilities' b'in' b'central' b'coniferous' b'countries' b'.' b'<eos>' b'<eos>'
    b'<eos>' b'=' b'Zygoballus' b'Doctor' b'advocates' b'2' b'Arcade' b'=' b'<eos>' b'<eos>' b'The' b'regular' b'Eastern' b'language' b'I' b'is' b'known' b'on' b'digital' b'106'
    b',' b'along' b'during' b'together' b'on' b'a' b'platforms' b'inactivity' b'in' b'the' b'United' b'States' b'.' b'It' b'has' b'been' b'suggested' b'that' b'they' b'feed'
    b'in' b'a' b'coyote' b'/' b'Kangley' b'on' b'the' b'island' b',' b'but' b'may' b'have' b'cost' b'large' b'observing' b',' b'focus' b'in' b'for' b'them'
    b'to' b'death' b'\xe2\x80\x94' b'their' b'<unk>' b'scales' b',' b'as' b'they' b'have' b'all' b'amongst' b'or' b'<unk>' b',' b'at' b'rap' b'Rude' b'.' b'developments'
    b'sings' b'it' b'preferred' b'their' b'early' b'section' b'of' b'Irish' b'prey' b',' b'and' b'ceased' b'out' b'to' b'be' b'outside' b'Henryson' b'technology' b'as' b'they'
    b'are' b'transported' b'on' b'appearing' b'between' b'1788' b'.' b'In' b'conjunction' b',' b'wind' b'areas' b'degenerated' b'for' b'them' b'.' b'In' b'particular' b',' b'signifying'
    b'jarred' b'branch' b'complaints' b',' b'inspired' b'by' b'long' b'<unk>' b'may' b'already' b'be' b'observed' b'.' b'They' b'then' b'are' b'colonised' b'on' b'an' b'color'
    b'flightless' b'was' b'missing' b'to' b'abnormal' b'flight' b'Kashgar' b',' b'overlooking' b'Montrose' b'and' b'fired' b'them' b'to' b'turn' b'to' b'be' b'confined' b'to' b'other'
    b'.' b'They' b'may' b'be' b'highly' b'unusual' b'.' b'Though' b'it' b'is' b'sounds' b'at' b'four' b'hostile' b',' b'would' b'be' b'caught' b'to' b'be'
    b'gear' b'.' b'They' b'were' b'joined' b'by' b'4' b'a.m.' b'<unk>' b'and' b'Behaviour' b'as' b'Dean' b'Benson' b'.' b'Kadokawa' b'reorganisation' b'may' b'be' b'most'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 218.8
    loss: 5.168
    elapsed time (seconds): 144.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  9.574 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
