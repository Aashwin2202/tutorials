.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b"'" b'Predynastic' b'stingray' b'(' b'"' b'Protection' b'milk' b'"' b'(' b'UN' b',' b'he' b'only' b'sometimes' b'there' b"'" b'evil' b'covering' b'<unk>' b'had'
    b'Palmyrenes' b'his' b'own' b'character' b';' b'Andr\xc3\xa9' b'Patrick' b'Levin' b'(' b'South' b'London' b')' b'said' b'the' b'following' b'year' b'"' b'The' b'year' b'to'
    b'be' b'not' b'incomplete' b'from' b'sacred' b'use' b'"' b',' b'which' b'they' b'were' b'widely' b'fond' b'from' b'a' b'copies' b'that' b'"' b'he' b'might'
    b'need' b'to' b'identify' b'[' b'I' b']' b'cannot' b'know' b'they' b"'ve" b'"' b'@-@' b'to' b'achieve' b'when' b'it' b'is' b'true' b'that' b'"'
    b'rigor' b'caninus' b'next' b'sometime' b'"' b'.' b'<eos>' b'The' b'physician' b"'s" b'Virginia' b'Service' b'(' b'played' b'a' b'day' b'of' b'Robyn' b')' b'is'
    b'a' b'member' b'of' b'synthesized' b'Jain' b'Buildings' b',' b'and' b'baptismal' b'arguing' b'they' b'<unk>' b'a' b'bank' b'and' b'the' b'wood' b'of' b'Angry' b'.'
    b'<unk>' b'regrets' b'that' b'females' b'affected' b'himself' b'in' b'1835' b'techniques' b'were' b'highly' b'displayed' b',' b'so' b'it' b'is' b'treated' b'Bullet' b'that' b'the'
    b'eight' b'spots' b':' b'<eos>' b'<unk>' b'"' b'fires' b'"' b'.' b'He' b'played' b'steamboats' b'from' b'only' b'20' b'years' b'are' b'if' b'other' b'stories'
    b'working' b'Telugu' b'as' b'a' b'transit' b',' b'\xe2\x80\x9c' b'Venus' b'accompanied' b'a' b'great' b'more' b'high' b'tale' b'.' b'Less' b'species' b'complains' b'may' b'be'
    b'lost' b'on' b'1' b'June' b'2006' b'that' b'been' b'like' b'because' b'though' b'800' b'%' b'other' b'observations' b'in' b'the' b'Polish' b'population' b'is' b'return'
    b'to' b'a' b'specially' b'bull' b',' b'having' b'a' b'extensive' b'body' b',' b'which' b'he' b'accepted' b'The' b'opposition' b'around' b'the' b'reggae' b'interpretations' b'.'
    b'There' b'are' b'dark' b'evidence' b',' b'or' b'quickly' b'(' b'content' b')' b',' b'but' b'even' b'as' b'"' b'a' b'man' b'who' b'cannot' b'minor'
    b'shells' b'.' b'"' b'They' b'observed' b'the' b'name' b'as' b'"' b'Pine' b'their' b'wonderful' b'darling' b'"' b'.' b'In' b'the' b'same' b'year' b'found'
    b'the' b'album' b'a' b'text' b'or' b'be' b'short' b'in' b'every' b'sear' b'step' b'by' b'the' b'Stanford' b'wife' b',' b'which' b'Jermaine' b'visits' b'into'
    b'diagonal' b'his' b'location' b'a' b'like' b',' b'but' b'he' b'has' b'trouble' b'.' b'This' b'has' b'evolved' b'in' b'<unk>' b'rate' b'technology' b'(' b'Shogakukan'
    b')' b';' b'a' b'mixture' b',' b'to' b'recognize' b'an' b'eye' b'ankle' b',' b'calls' b'a' b'dark' b'where' b'he' b'rose' b'a' b'all' b'trouble'
    b',' b'saying' b'that' b'he' b'the' b'"' b'vastly' b'to' b'hate' b'establishment' b'"' b'was' b'very' b'intimate' b'.' b'Mfume' b'described' b'1642' b'from' b'numbers'
    b',' b'and' b'B\xc3\xa9dard' b'seems' b'to' b'have' b'no' b'long' b'event' b'or' b'found' b'Kody' b'of' b'his' b'life' b'and' b'speaking' b'his' b'memories' b'to'
    b'select' b'its' b'authority' b'.' b'<eos>' b'The' b'earlier' b'plumage' b'anesthetic' b'Danny' b"'s" b'head' b'Evita' b',' b'The' b'Crash' b'Bandicoot' b'(' b'<unk>' b')'
    b'High' b'Man' b'(' b'Nowhere' b')' b',' b'relied' b'in' b'cabinet' b'with' b'3D' b'"' b'provision' b',' b'which' b'are' b'unique' b'closer' b'to' b'a'
    b'racetrack' b'.' b'raccoons' b'teaches' b'evaporation' b'and' b'Minervois' b'symptoms' b',' b'overcome' b'<unk>' b',' b'"' b'perhaps' b'precocial' b'by' b'me' b'.' b'The' b'Bearded'
    b'Age' b'started' b'in' b'tears' b'and' b'looks' b'to' b'2100' b'and' b'by' b'1955' b'to' b'mercenaries' b'.' b'The' b'fuss' b'horse' b'\xc2\xbd' b'designer' b'et'
    b'<unk>' b'(' b'Brian' b'Monday' b')' b'Menu' b'of' b'Dublin' b';' b'the' b'flooding' b'behaviour' b'at' b'a' b'Cathedral' b',' b'opener' b'regime' b',' b'and'
    b'leaves' b'die' b'female' b'hormones' b'and' b'humiliation' b'.' b'Four' b'other' b'molecules' b'represent' b'the' b'consorts' b'emphasizes' b',' b'Fire' b'Martyn' b'rekindle' b',' b'as'
    b'if' b'his' b'neck' b'may' b'be' b'successful' b'until' b'<unk>' b'or' b'Parvati' b'seen' b',' b'loaded' b'upon' b'the' b'event' b'condition' b'.' b'Mycena' b'Holden'
    b'decides' b'to' b'chimneys' b'indicate' b'that' b',' b'may' b'have' b'questioned' b'two' b'mechanism' b',' b'and' b'often' b'fall' b',' b'both' b'are' b',' b'he'
    b'used' b'his' b'wife' b'leaving' b'Consequence' b'.' b'Singing' b'believe' b'that' b'50s' b'and' b'K\xc5\x8dkaku' b"'" b'should' b'mediate' b'the' b'years' b'towards' b'the' b'race'
    b'.' b'"' b'Like' b'this' b'sense' b'is' b'in' b'1233' b'.' b'It' b'is' b'first' b'little' b',' b'speaking' b',' b'near' b'all' b'am' b'when'
    b"'honneur" b'will' b'be' b'<unk>' b'.' b'"' b'Brown' b'prohibits' b'that' b'when' b'despite' b'his' b'feet' b',' b'he' b'proposes' b'Thi' b"'s" b'plant' b'@-@'
    b'keeper' b'to' b'realize' b',' b'"' b'I' b'went' b'to' b'the' b'other' b'ways' b',' b'such' b'<unk>' b'he' b'is' b'capable' b'of' b'"' b','
    b'Defensive' b'<unk>' b'regions' b'and' b'lens' b'...' b'Ross' b'is' b'always' b'near' b'some' b'times' b'who' b'could' b'have' b'his' b'<unk>' b',' b'focusing' b'on'
    b'a' b'female' b'from' b'thick' b'to' b'eliminate' b'<unk>' b'to' b'lingerie' b'so' b'so' b'.' b'<eos>' b'<unk>' b'Lex' b'S.' b'M.' b"'Andrade" b'writes' b'her'
    b'children' b'out' b'of' b'1977' b'on' b'Walpole' b"'s" b'body' b'.' b'He' b'will' b'have' b'also' b'experienced' b'them' b'to' b'Festivals' b'in' b'1864' b';'
    b'his' b'drawing' b'may' b'hideout' b'so' b'misses' b',' b'nor' b'as' b'the' b'does' b'at' b'diary' b'at' b'night' b'.' b'whatever' b'the' b'angle' b'of'
    b'which' b'is' b'of' b'the' b'true' b'seas' b',' b'her' b'mixture' b'gilt' b'<unk>' b'masonry' b'should' b'often' b'fly' b'it' b'but' b'he' b'does' b'not'
    b'have' b'<unk>' b'.' b'He' b'finds' b'him' b'to' b'deliver' b'marching' b'Quan' b'sheep' b'instead' b'of' b'their' b'older' b'offspring' b'.' b'If' b'it' b'would'
    b'be' b'carved' b',' b'rods' b'can' b'also' b'be' b'distinguished' b'by' b'shaking' b'rats' b'.' b'<eos>' b'In' b'her' b'lifetime' b',' b'Adrenaline' b'preventing' b','
    b'Prpi\xc4\x87' b'be' b'made' b'very' b'evil' b'(' b'voiced' b'by' b'X' b')' b',' b'with' b'latex' b',' b'and' b'Korsvoll' b'.' b'<eos>' b'Sy\xc4\x81dv\xc4\x81da' b':'
    b'The' b'restlessness' b'resembling' b'him' b'independently' b',' b'Massachusetts' b',' b'ordered' b'with' b'five' b'different' b'raising' b'instruments' b',' b'the' b'innermost' b'starling' b'or' b'the'
    b'largest' b'form' b'of' b'its' b'mutualistic' b'<unk>' b',' b'as' b'is' b'a' b'child' b'@-@' b'shaped' b'independent' b'(' b'or' b'taught' b'being' b'Arab' b'as'
    b'kakapo' b',' b'unless' b'there' b'are' b'this' b'impression' b'for' b'It' b',' b'outside' b'whether' b'they' b'are' b'accustomed' b'to' b'Father' b'.' b'Puck' b'does'
    b'not' b'think' b'by' b'taking' b'his' b'return' b'to' b'make' b'people' b'of' b'stability' b'.' b'In' b'the' b'<unk>' b',' b'a' b'massive' b'form' b'suggested'
    b'that' b'a' b'verdict' b'controller' b'allowed' b'the' b'kakapo' b'upon' b'fluid' b'they' b'have' b'<unk>' b'idolatry' b'into' b'should' b'give' b'Liz' b'.' b'After' b'comparing'
    b',' b'many' b'vulnerable' b'notes' b'of' b'Ludlow' b'are' b'safe' b',' b'with' b'dense' b'being' b'needed' b'to' b'ideology' b'on' b'a' b'younger' b'relationship' b'outside'
    b'rating' b'.' b'They' b'may' b'regulate' b'pattern' b'that' b'<unk>' b'worn' b'they' b'must' b'see' b'a' b'head' b'when' b'it' b'leaves' b'.' b'<unk>' b','
    b'AC' b',' b'black' b'or' b'insects' b'are' b'most' b'easy' b'.' b'But' b'Sil' b"'s" b'life' b'with' b'precious' b'items' b'and' b'slice' b'about' b'the'
    b'other' b'stylish' b'wives' b'must' b'...' b'.' b'However' b',' b'Corbet' b'wrote' b'it' b'might' b'be' b'"' b'principally' b'Prize' b'"' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'Plot' b'=' b'=' b'<eos>' b'<eos>' b'Europium' b'first' b'abandoned' b'known' b'expanding' b'settlement' b'to' b'foul' b'bonds' b',' b'evolutionary' b',' b'and'
    b'temperatures' b'.' b'Instead' b',' b'alloys' b'have' b'also' b'been' b'known' b'to' b'achieve' b'small' b'bodies' b'such' b'as' b'<unk>' b'and' b'flattened' b',' b'cel'
    b',' b'and' b'eucalypts' b'.' b'Ceres' b'sounds' b'to' b'occasions' b',' b'as' b'they' b'needle' b'that' b'"' b'particularly' b'"' b'will' b'have' b'different' b'women'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.7
    loss: 5.168
    elapsed time (seconds): 145.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  8.095 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
