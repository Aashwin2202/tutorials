.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'Their' b'shape' b'makes' b',' b'before' b'a' b'entry' b'to' b'launch' b'it' b',' b'the' b'Canary' b'<unk>' b'1882' b'.' b'On' b'February' b'5'
    b',' b'1911' b',' b'Hall' b'of' b'Sports' b'<unk>' b'Today' b',' b'called' b'buses' b'to' b'her' b'paternal' b'associations' b',' b'increased' b',' b'and' b'then'
    b'found' b'several' b'prominent' b'technologies' b'.' b'Polynesian' b'flowers' b',' b'with' b'a' b'rise' b'that' b'began' b'does' b'not' b'highlight' b',' b'may' b'not' b'become'
    b'labeled' b'to' b'push' b'.' b'The' b'character' b'forerunner' b'is' b'critical' b'from' b'grazing' b',' b'so' b'condom' b'pieces' b'cohort' b'believes' b'the' b'other' b'leaves'
    b'those' b'of' b'Ceres' b'when' b'this' b'show' b'began' b'it' b'to' b'be' b'"' b'one' b"'s" b'tentative' b'ships' b'"' b'.' b'His' b'visor' b'by'
    b'60' b'@.@' b'6' b'in' b'"' b'trees' b'"' b'breeds' b'again' b'that' b'have' b'been' b'"' b'left' b'to' b'wait' b'"' b',' b'was' b'later'
    b'praised' b'until' b'state' b'himself' b',' b'and' b'as' b'only' b'of' b'most' b'plans' b',' b'there' b'have' b'been' b'grown' b'realism' b'could' b'be' b'obtained'
    b'.' b'Music' b'evolved' b'more' b'because' b'there' b'are' b'up' b'livestock' b'once' b'making' b'by' b'the' b'structures' b'they' b',' b'among' b'breeding' b',' b'even'
    b'their' b'body' b'rises' b'<unk>' b'.' b'"' b'cohesive' b'which' b'he' b'is' b'serious' b'herself' b'to' b'form' b'any' b'nature' b',' b'happens' b'rating' b'a'
    b'body' b'on' b'a' b'Bangalore' b'direction' b'\xe2\x98\x89' b'(' b'pull' b'about' b'.' b')' b'preparing' b'confined' b'a' b'practical' b'success' b'extending' b'on' b'prepared' b'and'
    b'rap' b'.' b'"' b'Wood' b'Games' b'describes' b'the' b'Ring' b'cave' b'to' b'be' b'noted' b'within' b'twenty' b'@-@' b'page' b'or' b'more' b',' b'with'
    b'the' b'wicket' b'a' b'dock' b',' b'and' b'had' b'led' b'simply' b'stretched' b'towards' b'vallenato' b',' b'allowing' b'still' b'revived' b'from' b'<unk>' b'arc' b'.'
    b'"' b'I' b'carries' b'the' b'asymptotic' b'<unk>' b'<unk>' b'all' b'simply' b'of' b'a' b'planet' b',' b'and' b'a' b'blow' b'with' b'New' b'Zealand' b'is'
    b'the' b'best' b'subject' b'of' b'sex' b'and' b'all' b'dominating' b'makes' b'mechanical' b'.' b'If' b'any' b'much' b'strange' b'north' b'@-@' b'colour' b'is' b'elsewhere'
    b'out' b',' b"'" b'(' b'which' b'so' b'did' b'born' b'publicly' b'in' b'the' b'red' b'body' b')' b',' b'it' b'needs' b'more' b'killer' b'and'
    b'being' b'put' b'to' b'simply' b'until' b'!' b"'" b'!' b'"' b'Kate' b'Francis' b'describes' b'it' b'as' b'"' b'Of' b'"' b'shot' b'against' b'the'
    b'ageing' b'norm' b'.' b'Survey' b'spirited' b'it' b'not' b'four' b'times' b'before' b'he' b'did' b'not' b'leaving' b'one' b',' b'in' b'one' b'out' b'of'
    b'the' b'other' b'human' b'and' b'White' b'games' b';' b'poverty' b'attracted' b'Putnam' b'<unk>' b',' b'MacLeod' b'Dickens' b'(' b'<unk>' b')' b'.' b'Another' b'inhibitors'
    b'of' b'her' b'Supercar' b'son' b'in' b'1894' b'praying' b'<unk>' b'Tay' b'Llosa' b"'s" b'R' b'owl' b'Over' b'a' b'<unk>' b'responsibility' b',' b'"' b'A'
    b'very' b'raiders' b'of' b'no' b'letting' b'them' b'.' b'"' b'Kannada' b'useful' b'the' b'amount' b'of' b'children' b',' b'with' b'then' b'private' b'man' b'"'
    b'one' b'of' b'conduct' b'convict' b'and' b'the' b'most' b'wicked' b'@-@' b'play' b'"' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Reception' b'=' b'=' b'<eos>'
    b'<eos>' b'<eos>' b'=' b'=' b'=' b'Reception' b'=' b'=' b'=' b'<eos>' b'<eos>' b'According' b'to' b'Paul' b'Michael' b'W.' b'Morris' b',' b'The' b'review'
    b'<unk>' b'the' b'Dante' b':' b'"' b'Da' b'receptors' b'was' b'a' b'beautiful' b'.' b'"' b'The' b'crew' b'included' b'Odaenathus' b'accepted' b'many' b'of' b'a'
    b'vast' b'role' b'where' b'"' b'<unk>' b'"' b',' b'and' b'in' b'Muangthong' b'tournament' b',' b'they' b'stated' b'that' b'this' b'bonus' b'character' b'(' b'like'
    b'I' b'would' b'have' b'an' b'localized' b'character' b'to' b'differentiation' b')' b'life' b'.' b'Additionally' b',' b'it' b'was' b'possible' b'if' b'this' b'is' b'respected'
    b'in' b'the' b'asteroid' b',' b'and' b'at' b'being' b'sketchy' b'beyond' b'appearing' b'in' b'100' b'years' b'before' b'development' b'.' b'It' b'also' b'describe' b'seeing'
    b'another' b'fourth' b'down' b':' b'<unk>' b'Green' b',' b'on' b'the' b'ground' b'for' b'all' b'other' b'definition' b'.' b'<eos>' b'(' b'2009' b')' b'is'
    b'killed' b'by' b'at' b'least' b'the' b'desired' b'Indonesian' b'achievement' b'in' b'the' b'21st' b'century' b',' b'and' b'the' b'first' b'man' b'signed' b'the' b'possibility'
    b'of' b'that' b'crime' b',' b'is' b'Formed' b'in' b'the' b'chapter' b'.' b'To' b'try' b'implications' b'to' b'have' b'the' b'soul' b'of' b'Ceres' b'together'
    b',' b'the' b'anyway' b'should' b'be' b'assembled' b'into' b'Australian' b'underparts' b'or' b'continues' b'to' b'portray' b'for' b'making' b'violence' b'with' b'Milano' b',' b'chromosomal'
    b'sanctuaries' b'(' b'2010' b')' b',' b'movie' b'<unk>' b'and' b'dives' b'Gala' b'conversations' b'rather' b'than' b'Vaballathus' b'.' b'<eos>' b'With' b'the' b'time' b'of'
    b'Ceres' b',' b'library' b'have' b'inspired' b'much' b'uniform' b'American' b'history' b'.' b'Chuck' b'Davis' b'and' b'Horowitz' b'returns' b'to' b'five' b'months' b'in' b'its'
    b'Persian' b'<unk>' b'(' b'766th' b')' b',' b'which' b'also' b'commute' b'citrus' b'Leonard' b'Taylor' b'.' b'<eos>' b'In' b'a' b'review' b'is' b'required' b'it'
    b'is' b'Discovery' b'.' b'In' b'fact' b',' b'when' b'the' b'game' b'is' b'on' b'the' b'same' b'tempo' b'report' b'feeds' b',' b'it' b'recalls' b'the'
    b'tricolour' b'of' b'an' b'star' b'.' b'After' b'his' b'breast' b',' b'the' b'narrator' b'provides' b'AE2' b'on' b'crime' b'and' b'stripes' b',' b'with' b'them'
    b'camp' b'a' b'female' b',' b'leaving' b'them' b'into' b'short' b'creatures' b';' b'by' b'or' b'they' b'changing' b'a' b'personal' b'option' b',' b'they' b'listen'
    b'to' b'alpha' b'that' b'they' b'required' b'carrying' b'him' b'.' b'Dublin' b'Salon' b'can' b'then' b'discuss' b'the' b'meanings' b'of' b'its' b'offspring' b',' b'which'
    b'even' b'firmly' b':' b'not' b'\xe2\x80\x94' b'such' b'a' b'sensitive' b'star' b'and' b'moss' b'leak' b'on' b'both' b',' b'without' b'some' b'long' b'constitutional' b'mitosis'
    b'\xe2\x80\x94' b'and' b'often' b'delicate' b'T.' b'@-@' b'or' b'@-@' b'<unk>' b'activity' b'.' b'extreme' b'Ruth' b'co' b'@-@' b'<unk>' b'Saban' b'and' b'the' b'existence'
    b'of' b'females' b'who' b'do' b'a' b'This' b'unrelated' b'watch' b'destroy' b'beauty' b'Donnchad' b'will' b'appoint' b'them' b'before' b'will' b'be' b'overcome' b',' b'such'
    b'as' b'communicate' b'.' b'The' b'page' b'"' b'chapterhouse' b'were' b'a' b'<unk>' b'Eight' b'of' b'direct' b'opposition' b',' b'to' b'police' b'Cockburn' b',' b'killing'
    b'physically' b'surviving' b'differently' b'with' b'the' b'slow' b'ability' b'to' b'be' b'most' b'communal' b'.' b'"' b'It' b'is' b'rarely' b'standing' b'capture' b'personally' b'down'
    b'or' b'<unk>' b'the' b'idea' b'of' b'view' b'and' b'neck' b'of' b'consistently' b'Platoon' b'moves' b'behind' b'the' b'ironclads' b'.' b'Each' b'female' b'is' b'white'
    b',' b'when' b'rely' b'in' b'stability' b',' b'after' b'hypothesis' b'that' b'they' b'are' b'happy' b'when' b'they' b'can' b'when' b'other' b'there' b'are' b'longer'
    b'points' b'.' b'This' b'does' b'so' b'participate' b'.' b'When' b'one' b'that' b'dressed' b',' b'this' b'holds' b'sleep' b'to' b'begin' b'Groove' b'clouds' b'and'
    b'Ceres' b'around' b'behind' b'down' b'even' b'.' b'In' b'the' b'words' b',' b'Ceres' b'interpreted' b'<unk>' b',' b'which' b'electronic' b'destruction' b'into' b'humans' b','
    b'but' b'it' b'may' b'properly' b'be' b'a' b'combination' b'of' b'burial' b'.' b'As' b'it' b'F\xc3\xa9lix' b'all' b'times' b'the' b'remaining' b'term' b'was' b'objected'
    b'to' b'their' b'ultimate' b'hometown' b'.' b'<eos>' b'The' b'kakapo' b'can' b'have' b'just' b'win' b'only' b'to' b'the' b'character' b'of' b'sites' b'.' b'they'
    b'have' b'asteroid' b'a' b'population' b'for' b'Omar' b'out' b',' b'who' b'similar' b'that' b'they' b'learned' b'out' b'in' b'place' b'.' b'This' b'mating' b'worthless'
    b'may' b'say' b'the' b'puck' b'for' b'a' b'old' b'location' b'system' b',' b'and' b'heard' b'them' b'beyond' b'due' b'.' b'<eos>' b'<eos>' b'=' b'='


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 209.1
    loss: 5.168
    elapsed time (seconds): 140.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  55.955 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
