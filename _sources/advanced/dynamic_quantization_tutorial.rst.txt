.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'Before' b'greater' b'habitat' b'was' b'given' b'Mark' b'<unk>' b',' b'the' b'his' b'Post' b',' b'Ryder' b'.' b'<eos>' b'The' b'Spanish' b'Quarter' b'Cemetery'
    b'yield' b'of' b'E' b"'ron" b'was' b'explained' b'to' b'hear' b'that' b'numbers' b'to' b'nesting' b'the' b'bump' b'would' b'have' b'been' b'unable' b'to' b'recognise'
    b'translocation' b',' b'many' b'other' b'traits' b'told' b'1530' b'and' b'the' b'Fifteen' b'Gallery' b'<eos>' b'Jon' b'Hawkins' b'<unk>' b'officially' b'left' b'Performing' b'Bright' b'on'
    b'June' b'28' b',' b'2006' b',' b'but' b'has' b'at' b'least' b'to' b'be' b'injured' b'with' b'individual' b'deputies' b',' b'but' b'expectations' b'proposed' b'the'
    b'account' b'structures' b'abroad' b'.' b',' b'reported' b'about' b'agricultural' b'students' b',' b'financial' b'quantities' b'of' b'history' b'and' b'og' b'demanding' b'former' b'artists' b','
    b'except' b'their' b'families' b'to' b'remain' b'killing' b'occurring' b'Western' b'times' b'as' b'their' b'bonus' b'subject' b'.' b'It' b'Fort' b'Giving' b'with' b'Carre' b'Bernis'
    b'(' b'III' b')' b'speaking' b'earlier' b'by' b'Austin' b'Kongo' b'<unk>' b'turnout' b',' b'but' b'release' b'since' b'August' b'1940' b',' b'because' b'of' b'"'
    b'ain' b'<unk>' b'"' b',' b'the' b'International' b'PC' b'Cricket' b'Park' b'is' b'prevented' b'to' b'apse' b'Stokes' b',' b'although' b'the' b'churches' b'hit' b'their'
    b'bomb' b',' b'and' b'the' b'plain' b'arrangement' b'become' b'still' b'among' b'the' b'same' b'food' b'fuel' b'.' b'<unk>' b'in' b'Mand\xc3\xa9' b',' b'Crash' b'Bandicoot'
    b'portrays' b'it' b'a' b'single' b'party' b'Glass' b'system' b'carrying' b'Zapata' b',' b'stating' b'that' b'"' b'nothing' b'Toulon' b'aiming' b'.' b'"' b'Others' b','
    b'<unk>' b',' b'and' b'other' b'other' b'state' b'by' b'the' b'land' b'who' b'will' b'<unk>' b'the' b'story' b'.' b'Swannell' b',' b'in' b'1934' b','
    b'challenged' b'only' b'@-@' b'Calendar' b'sought' b'slate' b',' b'considered' b'by' b'New' b'Zealand' b'and' b'in' b'the' b'map' b'of' b'serious' b'ocean' b'surveillance' b'.'
    b'These' b'efforts' b'deliberately' b'heard' b'in' b'territory' b'loaded' b'and' b'short' b'notes' b'he' b'had' b'tiebreak' b'announced' b'.' b'When' b'he' b'had' b'little' b'part'
    b'of' b'it' b',' b'he' b'ran' b'his' b'sharp' b'working' b'place' b'in' b'his' b'use' b',' b'and' b'that' b'there' b'was' b'no' b'ravaged' b'known'
    b'year' b'in' b'this' b'brain' b'they' b'may' b'have' b'their' b'own' b'partner' b'ambitions' b'.' b'As' b'family' b',' b'Ulster' b'Commando' b'is' b'a' b'tornado'
    b'and' b'a' b'<unk>' b'against' b'him' b'.' b'In' b'1604' b',' b'spelling' b'@-@' b'spinning' b',' b'a' b'man' b'plain' b'fuel' b'is' b'which' b'Mercer'
    b'breached' b'with' b'communications' b',' b'then' b'aged' b'Fresnel' b'.' b'<eos>' b'A' b'1834' b':' b'The' b'second' b'is' b'all' b'white' b',' b'3' b'm'
    b',' b'oppose' b'two' b'parrots' b',' b'and' b'the' b'Dubliners' b'moved' b'at' b'enough' b'to' b'be' b'always' b'weakens' b'.' b'The' b'Armagh' b'father' b"'s"
    b'behavior' b'is' b'<unk>' b',' b'compared' b'to' b'touchback' b'\xe2\x80\x94' b'such' b'as' b'Mark' b'Lacy' b',' b'while' b'the' b'12th' b'<unk>' b'works' b'were' b'rejected'
    b'.' b'As' b'in' b'terms' b',' b'more' b'recent' b'attempts' b',' b'the' b'birds' b'have' b'James' b'194F' b',' b'in' b'vacation' b'to' b'feed' b'for'
    b'dating' b'.' b'They' b'further' b'stolen' b'29' b'or' b'at' b'two' b'illustrated' b'reviews' b'(' b'half' b'Imperioli' b')' b'each' b'of' b'which' b'is' b'at'
    b'least' b'he' b'will' b'stick' b'up' b'without' b'leaf' b'behavior' b'.' b'One' b'other' b'fails' b'for' b'Mal' b'Jie' b'is' b'adopted' b'into' b'western' b'.'
    b'Once' b'New' b'Zealand' b'meet' b'trivial' b'dominant' b',' b'which' b'may' b'possess' b'their' b'greater' b'play' b'their' b'wives' b'\xe2\x80\x94' b'become' b'mechanical' b',' b'so'
    b'it' b'may' b'be' b'inhibiting' b'use' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Rankings' b'=' b'=' b'<eos>' b'<eos>' b'conflicts' b'from' b'fire' b',' b'God'
    b'owl' b',' b'with' b'Braathens' b'hygrometricus' b',' b'met' b'less' b'than' b'36' b'minutes' b'ago' b'and' b'only' b'once' b'distinct' b'birds' b'.' b'In' b'1994'
    b',' b'most' b'of' b'three' b'easily' b'setting' b'no' b'ecological' b'eggs' b'beyond' b'Ceres' b'.' b'In' b'on' b'wartime' b',' b'the' b'island' b'documented' b'only'
    b',' b'massacred' b'double' b'to' b'96' b'@.@' b'5' b'with' b'95' b'mm' b'per' b'shooting' b'(' b'11' b'@.@' b'2' b'%' b')' b'.' b'They'
    b'originally' b'measure' b'less' b'their' b'common' b'male' b',' b'since' b'continues' b'occasionally' b'a' b'vocational' b'aspect' b'as' b'oblivion' b',' b'usually' b'directly' b'due' b'to'
    b'<unk>' b'Luthor' b'.' b'Indeed' b',' b'the' b'public' b'transports' b'tying' b'pilots' b'and' b'spectral' b'701' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Electrical'
    b'convict' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Two' b'female' b'attempts' b'have' b'been' b'reported' b'that' b'humans' b'are' b'"' b'commandment' b'"' b'today' b','
    b'so' b'their' b'culture' b'and' b'other' b'recent' b'ingredients' b'were' b'dry' b',' b'and' b'may' b'be' b'stalking' b'with' b'those' b'Run' b'.' b'This' b'subsistence'
    b'is' b'also' b'noted' b'by' b'New' b'Zealand' b'when' b'some' b'stragglers' b'may' b'be' b'associated' b'from' b'pines' b'and' b'there' b'have' b'many' b'no' b'species'
    b'.' b'Males' b'Danny' b'called' b'for' b'breath' b'involved' b'to' b'be' b'ecology' b'or' b'scale' b'and' b'<unk>' b'up' b'compared' b'to' b'them' b'.' b'Because'
    b'cytoplasm' b',' b'by' b'the' b'same' b'possession' b'(' b'typically' b'sighted' b'subspecies' b')' b'was' b'collected' b'by' b'these' b'emotional' b'descriptions' b',' b'each' b':'
    b'redeployment' b'.' b'Sometimes' b'worshipped' b'on' b'developmental' b'material' b',' b'human' b'starlings' b',' b'non' b'@-@' b'recognise' b'arguably' b',' b'or' b'even' b',' b'constitute'
    b'for' b'birds' b'claimed' b'they' b'were' b'<unk>' b'.' b'Another' b'of' b'1' b'\xe2\x80\x93' b'2' b'transits' b',' b'Iberia' b'a' b'eye' b'left' b'regularly' b'sources'
    b'at' b'a' b'one' b'@-@' b'third' b'periods' b'of' b'28' b'\xe2\x80\x93' b'14' b'\xce\xbcm' b'.' b'According' b'to' b'Nelson' b'Weissweiler' b'he' b'also' b'beat' b'trivalent'
    b'<unk>' b'permanently' b',' b'<unk>' b'1869' b',' b'immature' b'Cache' b'and' b'Farley' b',' b'which' b'are' b'pink' b'when' b'they' b'were' b'allegedly' b'morphs' b'.'
    b'Later' b',' b'they' b'easily' b'easily' b'treat' b"'Ouverture" b'@-@' b'planet' b'leaf' b'techniques' b'of' b'people' b'pass' b'.' b'Over' b'all' b',' b'mobbing' b'when'
    b'it' b'is' b'Marlins' b'white' b'or' b'juveniles' b',' b'that' b'both' b'leave' b',' b'and' b'on' b'using' b'Harcourt' b'are' b'more' b'.' b'They' b'Relics'
    b'a' b'<unk>' b'jet' b'they' b'eat' b'and' b'turn' b'into' b'Brunswick' b',' b'in' b'northern' b'numbers' b',' b'with' b'<unk>' b'and' b'joy' b',' b'they'
    b'taught' b'it' b'they' b'does' b'molecule' b'.' b'Non' b'@-@' b'<unk>' b'populations' b'occurring' b'<unk>' b',' b'<unk>' b'with' b'other' b'parrots' b'it' b'has' b'descended'
    b'on' b'Dover' b'milk' b'.' b'Also' b',' b'the' b'ground' b'will' b'be' b'used' b'or' b'the' b'Spanish' b'pore' b'from' b'other' b'chicks' b',' b'both'
    b'or' b'managed' b'.' b'These' b'sources' b'are' b'able' b'to' b'emerge' b'throughout' b'early' b'and' b'Earth' b'.' b'They' b'typically' b'express' b'common' b'low' b'compartments'
    b'for' b'plain' b'bird' b'or' b'mail' b'.' b'These' b'kakapo' b'can' b'be' b'reduced' b'for' b'females' b'through' b'<unk>' b',' b'Georgia' b',' b'prisons' b','
    b'Ferry' b',' b'1122' b',' b'and' b'history' b'Marie' b'and' b'<unk>' b'discrimination' b'.' b'His' b'nest' b'is' b'sometimes' b'<unk>' b';' b'the' b'only' b'supportive'
    b'can' b'kill' b'other' b'eggs' b'may' b'still' b'be' b'apparent' b'for' b'small' b',' b'overthrow' b'and' b'to' b'have' b'made' b'towers' b'.' b'He' b'does'
    b'not' b'refer' b'to' b'RNA' b'drugs' b',' b'the' b'synthesize' b',' b'bird' b',' b'and' b'sacred' b'tips' b':' b'one' b'of' b'the' b'other' b'reliable'
    b'painters' b'or' b'oxygen' b',' b'forming' b'\xce\xb2' b',' b'and' b'contradict' b'it' b'her' b'unemployed' b'nests' b':' b'one' b'on' b'its' b'period' b'when' b'he'
    b'is' b'likely' b'of' b'maple' b'.' b'When' b'his' b'male' b'death' b'is' b'separated' b',' b'they' b'may' b'have' b'sex' b',' b'prominent' b',' b'exiting'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 212.5
    loss: 5.168
    elapsed time (seconds): 143.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  2.326 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
