.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'they' b'forested' b'lift' b',' b'<unk>' b',' b'attempt' b',' b'"' b'<unk>' b'Wrestling' b',' b'<unk>' b',' b'and' b'<unk>' b',' b'had' b'surely'
    b'so' b'<unk>' b'.' b'Given' b'poor' b',' b'at' b'classical' b'looking' b'to' b'win' b'life' b'when' b'he' b'is' b'an' b'remarkable' b'kind' b'of' b'it'
    b'.' b'It' b'enduring' b'an' b'original' b'work' b'.' b'And' b'I' b'have' b'U.S.' b'sort' b'where' b'it' b'has' b'stop' b'arterial' b',' b'you' b'doesn'
    b"'t" b'see' b'generally' b'they' b'could' b'be' b'<unk>' b'to' b'a' b'time' b'beyond' b'those' b'.' b'I' b'don' b"'t" b'seem' b'to' b'go' b'up'
    b'is' b'in' b'real' b'markets' b'.' b'Part' b'were' b'where' b'they' b"'re" b'fully' b'longer' b'in' b'a' b'<unk>' b',' b'where' b'short' b'ibis' b'sat'
    b'are' b'constantly' b'marathon' b'understood' b'their' b'live' b',' b'In' b'many' b'of' b'Ark' b'players' b'and' b'see' b'or' b'the' b'<unk>' b'perceptions' b'in' b'['
    b'It' b"'s" b'smoking' b'and' b'touchdowns' b'.' b'I' b'decided' b'a' b'ballad' b'"' b'.' b'As' b'a' b'result' b'the' b'character' b'experiences' b'an' b'pleasure'
    b'for' b'his' b'image' b'six' b'times' b',' b'laughing' b'new' b'demand' b'Shaft' b'clinically' b',' b'Justin' b'al' b'Cole' b'with' b'<unk>' b'.' b'The' b'art'
    b'Tata' b'is' b'not' b'designed' b'that' b'"' b'lopsided' b'<unk>' b'Valley' b'to' b'injuries' b'"' b'serves' b'as' b'fly' b'Snake' b'or' b'remake' b'her' b'"'
    b'pursuing' b'strongly' b'in' b'<unk>' b'[' b'such' b'it' b'are' b'more' b'traditional' b'<unk>' b',' b'offering' b'telescopes' b'execute' b'it' b'.' b'The' b'same' b'and'
    b'in' b'this' b'man' b'is' b'created' b'with' b'other' b'nearby' b',' b'<unk>' b'person' b',' b'<unk>' b',' b'you' b'want' b',' b'unlike' b'every' b'ability'
    b'to' b'Sydney' b',' b'making' b'me' b'to' b'regard' b'to' b'the' b'rooms' b'<unk>' b'Railway' b'matter' b'that' b'a' b'tropical' b'@-@' b'century' b'minority' b'parcel'
    b'will' b'be' b'examined' b'anyone' b'like' b'@-@' b'colored' b'@-@' b'eye' b'"' b'.' b'<eos>' b'Critics' b'can' b'be' b'done' b'by' b'outermost' b'chicks' b'at'
    b'night' b',' b'which' b'might' b'not' b'be' b'a' b'large' b'white' b'Measures' b'.' b'Thus' b',' b'on' b'a' b'average' b'down' b',' b'they' b'are'
    b'all' b'way' b'to' b'control' b'that' b'the' b'BIOS' b'regime' b'by' b'Trees' b'is' b'currently' b'preventing' b'as' b'is' b'very' b'different' b'emerged' b'up' b'down'
    b'trained' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Literature' b'=' b'=' b'<eos>' b'<eos>' b'Youth' b'Alaska' b'is' b'so' b'formed' b'around' b'the' b'English' b'hybrid'
    b'(' b'<unk>' b')' b'"' b'Czech' b'"' b',' b'which' b'has' b'since' b'been' b'long' b'longer' b'of' b'enactment' b'.' b'One' b'of' b'the' b'instance'
    b'of' b'a' b'international' b'tree' b'is' b'estimated' b'on' b'<unk>' b',' b'has' b'regarded' b'a' b'series' b'of' b'Albion' b'to' b'create' b'"' b'sky' b'a'
    b'planet' b'to' b'fading' b'extreme' b'effects' b'from' b'organisations' b'and' b'aground' b'and' b'generally' b'even' b'cooler' b'.' b'"' b'The' b'same' b'fruit' b'read' b'assessments'
    b'a' b'male' b'phenomenon' b'of' b'Mars' b',' b'its' b'earlier' b',' b'and' b'clinic' b'.' b'The' b'supernova' b'extends' b'back' b'to' b'Chicago' b'to' b'reduce'
    b'a' b'male' b'screen' b'role' b'after' b'the' b'Humpty' b'rhyme' b'signal' b'.' b'morphology' b'<unk>' b'calling' b'of' b'this' b'bird' b'may' b'be' b'used' b'by'
    b'turns' b',' b'and' b'by' b'Japan' b',' b'Denny' b'and' b'cartilage' b'begin' b'on' b'a' b'ice' b'behavior' b'and' b'introduced' b'the' b'eyes' b'about' b'members'
    b'.' b'In' b'the' b'note' b',' b'it' b'has' b'graduated' b',' b'<unk>' b',' b'and' b'them' b'.' b'It' b'has' b'evidence' b'by' b'the' b'meat'
    b'of' b'influences' b',' b'there' b'is' b'no' b'first' b'single' b'how' b'it' b'is' b'Chapels' b'.' b'Another' b'authors' b',' b'the' b'weighs' b'objects' b'not'
    b'represented' b'wobble' b'tables' b'in' b'same' b'song' b'but' b'does' b'not' b'sit' b'in' b'early' b'.' b'<eos>' b'pathways' b'are' b'one' b'of' b'the' b'longest'
    b'growing' b'hackers' b'of' b'DNA' b'Indian' b'wasps' b',' b'such' b'as' b'branched' b'grass' b',' b'<unk>' b'(' b'5' b'%' b')' b'which' b'is' b'similar'
    b'to' b'oxymoron' b':' b'A' b'beads' b',' b'stadion' b'plants' b'on' b'each' b'side' b'.' b'These' b'food' b'behaviour' b'contributed' b'to' b'various' b'forms' b'<unk>'
    b'La' b'I' b'possess' b'visual' b'expression' b'.' b'In' b'the' b'West' b',' b'various' b'species' b'on' b'females' b',' b'spikes' b'include' b'birds' b'such' b'as'
    b'<unk>' b',' b'related' b'to' b'other' b'chambers' b'.' b'marched' b',' b'particularly' b'Astraeus' b',' b'often' b'sex' b',' b'Monks' b',' b'theory' b',' b'limited'
    b',' b'eye' b'or' b'hard' b',' b'probably' b'only' b'reduced' b'themselves' b'.' b'Roughly' b'these' b'conservation' b'bat' b'sites' b'of' b'Ram' b'calls' b',' b'they'
    b'were' b'widespread' b'to' b'general' b'them' b'.' b'Based' b',' b'the' b'bird' b'has' b'units' b'of' b'carbon' b'coverage' b',' b'which' b'seems' b'to' b'move'
    b'to' b'eastern' b'rural' b'females' b'.' b'The' b'presence' b'of' b'<unk>' b'captures' b'kakapo' b'and' b'scales' b'completely' b'protect' b'.' b'As' b'Bayreuth' b'can' b'depend'
    b'on' b'Glade' b',' b'the' b'polling' b'bowls' b'stood' b'as' b'they' b'have' b'cautious' b'starling' b'choices' b',' b'so' b'in' b'particular' b',' b'when' b'even'
    b'expanding' b'or' b'more' b'ornithischians' b',' b'they' b'mean' b'after' b'their' b'account' b'that' b'caused' b'them' b',' b'as' b'designation' b'are' b'actually' b'bare' b'as'
    b'the' b'Porvenir' b'.' b'<eos>' b'The' b'kakapo' b'lasts' b'with' b'side' b'of' b'illustrates' b'midrange' b',' b'including' b'several' b'high' b'birds' b',' b'which' b'may'
    b'contain' b'female' b'from' b'the' b'horse' b'to' b'red' b'education' b'.' b'This' b'shield' b'of' b'fruits' b'also' b'radioactive' b'as' b'they' b'were' b'very' b'correct'
    b'.' b'caregiver' b'residing' b'soon' b'usually' b'<unk>' b'at' b'other' b'taxa' b'.' b'In' b'1885' b',' b'from' b'Lowe' b',' b'the' b'kakapo' b'of' b'the'
    b'dot' b'is' b'redesignated' b'only' b'on' b'1960' b'for' b'destruction' b'plant' b',' b'though' b'somewhat' b'when' b'they' b'are' b'uncommon' b',' b'so' b'their' b'southern'
    b'long' b'pacification' b',' b'for' b'example' b',' b'it' b'took' b'place' b'for' b'just' b'a' b'\xe2\x81\x84' b'nice' b'species' b'.' b'As' b'of' b'Gordon' b'Stars'
    b',' b'some' b'species' b'known' b'as' b'<unk>' b'Victoria' b',' b'adequate' b'homosexuality' b'such' b'as' b'the' b'habit' b'of' b'other' b'different' b'electron' b'features' b'.'
    b'There' b'are' b'widespread' b'evidence' b'from' b'Operational' b'enzymes' b'.' b'Therefore' b',' b'it' b'Gielgud' b'discusses' b'prolonged' b'wreath' b',' b'which' b'may' b'be' b'developed'
    b'at' b'an' b'partial' b'velocity' b'of' b'native' b'spots' b'.' b'Kanata' b'that' b'also' b'spectacular' b'<unk>' b'may' b'be' b'fluorescent' b'for' b'multiple' b'birds' b'and'
    b'made' b'it' b'back' b'for' b'Ceres' b'.' b'This' b'is' b'also' b'on' b'"' b'grey' b'cells' b'"' b',' b'though' b'is' b'often' b'a' b'snake'
    b'who' b'published' b'14' b'years' b'.' b'A' b'unusually' b'short' b'fruit' b'eye' b'jumps' b'by' b'2' b'cm' b'(' b'5' b'@.@' b'3' b'kilometres' b')'
    b'wide' b',' b'a' b'partial' b'<unk>' b'(' b'Control' b')' b'connects' b'<unk>' b'(' b'Loved' b')' b'however' b',' b'and' b'includes' b'Mark' b'Williams' b'instead'
    b'(' b'e.g.' b'<unk>' b'Berbisik' b')' b',' b'temperature' b'from' b'predators' b'at' b'a' b'show' b'zone' b'or' b'combined' b'strips' b'of' b'courtship' b'among' b'male'
    b'1656' b'and' b'mountain' b'nonviolent' b'waste' b',' b'which' b'prevents' b'Communism' b'to' b'be' b'and' b'intelligent' b'.' b'Significant' b'only' b'three' b'females' b'Kantara' b'on'
    b'capita' b',' b'and' b'only' b'kits' b'may' b'parallel' b'to' b'43' b'it' b',' b'including' b'pet' b'disposition' b'against' b'battlefield' b',' b'clouds' b',' b'<unk>'
    b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b',' b'etc' b'and' b'keV' b'.' b'Like' b'fingers' b',' b'gray' b'clear' b'spots' b'are' b'a' b'synonym'
    b'of' b'<unk>' b',' b'such' b'as' b'<unk>' b'and' b'<unk>' b'.' b'Another' b'triangular' b'informal' b'desire' b',' b'nectar' b',' b'or' b'animal' b'consist' b'harsh'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 213.4
    loss: 5.168
    elapsed time (seconds): 142.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  1.681 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
