.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'his' b'formal' b'<unk>' b'behind' b'Raffles' b'and' b'nobility' b'to' b'improve' b'.' b'Viscount' b'icons' b'underwent' b'value' b'a' b'three' b'@-@' b'spored' b'door' b'to'
    b'Charles' b'Bush' b',' b'Dartmouth' b',' b'<unk>' b',' b'interrupted' b',' b'Zachary' b'Spuds' b',' b'typography' b',' b'<unk>' b',' b'1954' b',' b'Husband' b'Canal'
    b'(' b'red' b',' b'<unk>' b',' b'and' b'Illinoise' b')' b'.' b'They' b'moved' b'to' b'the' b'site' b'of' b'Wiccens' b'solid' b'that' b'Africaine' b'was'
    b'based' b'on' b'the' b'chalk' b'giant' b'faith' b'.' b'The' b'police' b'certificate' b'and' b',' b'and' b'fire' b'Beck' b'July' b',' b'the' b'bird' b'purchased'
    b'the' b'other' b'Chennselaig' b'stories' b'to' b'be' b'an' b'battery' b'of' b'Applause' b'.' b'In' b'a' b'position' b'such' b'as' b'<unk>' b'Day' b',' b'British'
    b'sexpunctatus' b',' b'<unk>' b'@-@' b'spotted' b'c4' b',' b'ambulances' b',' b'and' b'criminal' b',' b'circulated' b'goodbye' b'factors' b'were' b'confused' b'once' b'in' b'flight'
    b',' b'they' b'were' b'already' b'enough' b'to' b'depend' b'in' b'Europe' b'in' b'order' b'to' b'<unk>' b'change' b';' b'however' b',' b'they' b'<unk>' b'the'
    b'detection' b'of' b'a' b'great' b'transit' b'of' b'Indu' b',' b'to' b'participate' b'as' b'in' b'possession' b'of' b'males' b'.' b'In' b'order' b',' b'the'
    b'Korvettenkapit\xc3\xa4n' b'<unk>' b'starling' b'has' b'some' b'black' b'products' b'.' b'A' b'criminal' b'swallowed' b'after' b'his' b'different' b'turboprop' b'is' b'<unk>' b',' b'but' b'it'
    b'is' b'currently' b'known' b'.' b'The' b'face' b'of' b'a' b'food' b'machinery' b'with' b'minority' b'behaviour' b'turbines' b'will' b'be' b'rendered' b'is' b'most' b'worrisome'
    b'for' b'<unk>' b'.' b'<eos>' b'The' b'global' b'etymological' b'muddy' b'line' b'could' b'be' b'distinguished' b'in' b'the' b'Republic' b'of' b'Ireland' b'.' b'Considered' b','
    b'by' b'Eliot' b',' b'<unk>' b',' b'Medical' b',' b'and' b'<unk>' b',' b'were' b'further' b'practised' b'recorded' b'by' b'coil' b'@-@' b'mechanism' b'.' b'Each'
    b'mature' b'shield' b',' b'obscured' b',' b'metastable' b',' b'drinks' b',' b'olive' b',' b'and' b'<unk>' b',' b'is' b'recommended' b'of' b'a' b'Lucasfilm' b'Kids'
    b':' b'24' b'times' b',' b'that' b'only' b'the' b'most' b'prolific' b'street' b'called' b'in' b'Gaines' b'.' b'In' b'Cantonese' b',' b'races' b'newly' b'road'
    b'calls' b'without' b'bands' b'into' b'humans' b',' b'drugs' b',' b'and' b'agricultural' b'agencies' b'sign' b'a' b'male' b'extinct' b'gill' b',' b'2008' b'.' b'The'
    b'Irish' b'language' b'Figures' b'of' b'the' b'<unk>' b'of' b'"' b'kakapo' b'starts' b'"' b'in' b'particular' b'.' b'The' b'tallest' b'nurse' b'features' b'also' b'<unk>'
    b',' b'meaning' b'popularity' b'to' b'punt' b'to' b'likening' b'short' b'species' b'.' b'<eos>' b'Each' b'sacred' b'field' b'structure' b'is' b'probably' b'raised' b'by' b'dwarf'
    b'muscles' b',' b'which' b'hence' b'a' b'cold' b'form' b'around' b'other' b'shapes' b',' b'Augustine' b',' b'or' b'partnerships' b'.' b'They' b'will' b'be' b'derided'
    b'by' b'their' b'emission' b'species' b',' b'where' b'they' b'require' b'astronaut' b'Surgeons' b'.' b'They' b'are' b'often' b'small' b'if' b'it' b'is' b'sometimes' b'commonly'
    b'sad' b'.' b'In' b'first' b'when' b'they' b'form' b'shelling' b'are' b'very' b'distinct' b',' b'<unk>' b',' b'and' b'some' b'other' b'species' b'are' b'often'
    b'distributed' b',' b'often' b'acute' b'the' b'competitor' b'when' b'one' b'present' b'in' b'once' b'when' b'they' b'have' b'are' b'contemplating' b'developed' b'.' b'Because' b'their'
    b'radius' b'apart' b'on' b'when' b'they' b'must' b'have' b'rejected' b'their' b'relative' b'with' b'other' b'horse' b'circles' b',' b'encode' b'polymerase' b',' b'in' b'the'
    b'threat' b',' b'gradually' b'<unk>' b'the' b'ribosomes' b'.' b'<eos>' b'<unk>' b'Kansas' b'<unk>' b',' b'giants' b',' b'pick' b',' b'black' b'or' b'Grip' b'cellular'
    b'Bandicoot' b'or' b'other' b'adults' b'include' b'whereas' b'the' b'Properties' b'@-@' b'locks' b'involves' b'no' b'description' b'of' b'numbers' b',' b'essential' b'cauldron' b'throughout' b'rails'
    b',' b'with' b'its' b'Mattel' b'that' b'they' b'are' b'being' b'killed' b'in' b'Rally' b'rodents' b'.' b'Early' b',' b'can' b'be' b'found' b'or' b'the'
    b'dominant' b'<unk>' b'of' b'complexes' b'in' b'small' b'behaviour' b'.' b'Several' b'<unk>' b'comparisons' b'to' b'the' b'commute' b'under' b'characters' b'with' b'wind' b'air' b'plants'
    b',' b'to' b'the' b'eggs' b'squad' b',' b'and' b'calls' b'Mori' b'.' b'Examples' b'often' b'may' b'be' b'declared' b'themselves' b'by' b'limited' b'blood' b';'
    b'they' b'may' b'have' b'made' b'support' b'.' b'However' b',' b'it' b'is' b'also' b'present' b'from' b'riding' b'.' b'They' b'range' b'a' b'large' b'variety'
    b'of' b'two' b'dorsal' b'predators' b'.' b'Some' b'breeding' b'algae' b'or' b'magical' b'seas' b'that' b'may' b'be' b'complicated' b'predation' b'and' b'killed' b'.' b'There'
    b'are' b'<unk>' b"'" b'membrane' b'representing' b'much' b'other' b'<unk>' b'for' b'many' b'communities' b'.' b'There' b'are' b'no' b'highly' b'hypothesis' b'feminine' b'bird' b','
    b'so' b'their' b'pore' b'Kapoor' b'may' b'be' b'distinguished' b'by' b'best' b'importins' b'.' b'The' b'many' b'eggs' b'earlier' b',' b'it' b'have' b'usually' b'picked'
    b'for' b'one' b'male' b',' b'including' b'Region' b'to' b'be' b'incorrect' b'by' b'the' b'fruit' b'diagnosis' b',' b'hot' b'for' b'natural' b'word' b'.' b'Some'
    b'points' b'dance' b'for' b'other' b'birds' b'to' b'garner' b'their' b'function' b"'" b'representative' b'=' b'Some' b'texts' b'have' b'done' b'Crews' b'for' b'blunt' b'prey'
    b',' b'it' b'may' b'occur' b'to' b'study' b'around' b'unfair' b',' b'but' b'levels' b'only' b'were' b'"' b'found' b'and' b'surviving' b'hot' b'mentioning' b'state'
    b'"' b'.' b'Caliphate' b'evidence' b'proportional' b'authors' b'that' b'are' b'sometimes' b'native' b'or' b'rejected' b',' b'with' b'neon' b'@-@' b'black' b'shrub' b'.' b'For'
    b'example' b',' b'they' b'call' b'unusual' b'food' b'and' b'breasts' b'(' b'22' b'amino' b'acids' b')' b',' b'which' b'are' b'obvious' b'to' b'white' b','
    b'Eastern' b'feathers' b',' b'or' b'psychiatric' b'cameras' b'.' b'The' b'females' b'Broncos' b',' b'and' b'certain' b'other' b'kinds' b'known' b'as' b'entrepreneurs' b',' b'may'
    b'transmit' b'five' b'Magdalen' b'being' b'fat' b'.' b'<eos>' b'Throughout' b'the' b'most' b'open' b'European' b'areas' b'deducted' b'compounds' b',' b'Frustrated' b'trees' b'have' b'been'
    b'visible' b'to' b'cite' b'animals' b'.' b'It' b'usually' b'has' b'been' b'transported' b'after' b'trees' b'that' b'matched' b'their' b'representation' b'and' b'establishing' b'them' b'for'
    b'<unk>' b'mean' b'they' b'should' b'still' b'criticize' b'them' b'.' b'<eos>' b'Common' b'starling' b'(' b'bacteria' b')' b'are' b'a' b'Elder' b'of' b'guidance' b'.'
    b'Mycena' b'<unk>' b'was' b'permitted' b'and' b'allowed' b'closely' b'DE' b'Rico' b'.' b'<eos>' b'According' b'to' b'Tom' b'S.' b'J.' b'(' b'II' b'recorded' b'as'
    b'translit' b"'" b'tears' b'concentrated' b',' b'Chalukyan' b'Manders' b'will' b'criticised' b'minute' b'rhymes' b'and' b'<unk>' b'are' b'seen' b'while' b'no' b'measures' b')' b'are'
    b'usually' b'Basilica' b'.' b'Some' b'elderly' b'balloon' b'birds' b'has' b'varied' b'auxiliary' b'activity' b'decoration' b',' b'and' b'relation' b'by' b',' b'sighted' b'samples' b'of'
    b'that' b'mating' b'and' b'the' b'ring' b'paper' b'.' b'<eos>' b'The' b'image' b'of' b'heavy' b'middle' b'dowry' b'were' b'seen' b'as' b'the' b'Buddhist' b'similarities'
    b'for' b'aliens' b',' b'but' b'does' b'not' b'depend' b'in' b'over' b'the' b'new' b'year' b'until' b'this' b'period' b'.' b'Compared' b'close' b',' b'they'
    b'do' b'be' b'<unk>' b'storytelling' b'if' b'they' b'are' b'smooth' b'.' b'This' b'character' b'inflicted' b'different' b'functions' b'in' b'effect' b'fees' b'.' b'There' b'is'
    b'no' b'known' b'@-@' b'over' b'@-@' b'screen' b'eye' b'when' b'<unk>' b'are' b'13' b'@.@' b'7' b'.' b'Each' b'diet' b'@-@' b'County' b'structures' b'are'
    b'Chapels' b'to' b'be' b'indicative' b',' b'suggesting' b'.' b'Those' b'looks' b'around' b'up' b';' b'each' b'might' b'form' b'affected' b'the' b'bird' b'necessary' b'.'
    b'<unk>' b',' b'after' b'amber' b',' b'eating' b'the' b'line' b'of' b'sex' b'throughout' b'her' b'wake' b'and' b'particularly' b'suit' b'.' b'With' b'a' b'female'
    b'virus' b'on' b'23' b'to' b'5' b'degrees' b'long' b',' b'they' b'may' b'be' b'rarely' b'conducting' b'spreading' b'or' b'allowing' b'it' b'to' b'extend' b'sex'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 218.7
    loss: 5.168
    elapsed time (seconds): 142.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  7.562 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
