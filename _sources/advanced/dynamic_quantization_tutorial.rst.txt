.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'vary' b'significantly' b',' b'and' b'Charles' b'S.' b'Mandel' b'considers' b'fire' b'<unk>' b'.' b'In' b'1809' b',' b'Hairan' b'Smith' b'felt' b',' b'"' b'It'
    b'may' b'be' b'beaten' b'when' b'I' b'knew' b'up' b'.' b'But' b'it' b'is' b'believed' b'that' b'is' b'long' b'Kamerkoor' b'about' b'...' b'"' b'it'
    b'is' b'perhaps' b'in' b'1213' b'.' b'In' b'its' b'view' b'of' b'prostitute' b',' b'it' b'is' b'not' b'depicted' b'by' b'Ceres' b'of' b'rotating' b'biotrophic'
    b'environment' b'since' b'the' b'evening' b'of' b'symbol' b',' b'which' b'can' b'not' b'be' b'a' b'additional' b'challenge' b'.' b'Further' b',' b'they' b'involved' b'the'
    b'Scenes' b'from' b'his' b'then' b'criticizing' b'methanide' b'.' b'The' b'fact' b'mostly' b'also' b'left' b'm' b'(' b'16' b'mph' b')' b'exported' b',' b'and'
    b'has' b'mutualistic' b'Crash' b'Young' b'Game' b"'" b'over' b'low' b'(' b'1999' b')' b',' b'Rhode' b'Magazine' b'(' b'1998' b')' b'and' b'the' b'Evening'
    b'Panel' b'(' b'IDF' b')' b'.' b'There' b'also' b'has' b'dozens' b'that' b'are' b'everybody' b"'s" b'vision' b'of' b'Nearby' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'Worship' b'=' b'=' b'<eos>' b'<eos>' b'Massive' b'starlings' b'are' b'approached' b'by' b'closing' b'famous' b'record' b'trees' b'in' b'individual' b'such' b',' b'mostly'
    b'mainly' b'to' b'female' b'or' b'certainly' b'employ' b'them' b'to' b'their' b'findings' b'.' b'There' b'face' b'high' b'small' b'infrastructural' b'transmissions' b',' b'but' b'the'
    b'pair' b'soon' b'travel' b'to' b'the' b'burning' b'like' b'the' b'<unk>' b'eye' b'of' b'effective' b'<unk>' b',' b'such' b'as' b'<unk>' b'facilitates' b'oxidizes' b'and'
    b'incidental' b'drinking' b',' b'<unk>' b'and' b'<unk>' b'.' b'Six' b'Ireland' b'may' b'be' b'fashionable' b'shrunk' b'by' b'rough' b'grass' b"'s" b'sharp' b'Latin' b'range'
    b'.' b'In' b'their' b'opinion' b'one' b'of' b'every' b'term' b'or' b'<unk>' b'letters' b',' b'it' b'is' b'connected' b'that' b'cells' b'is' b'still' b'debated'
    b'.' b'<eos>' b'In' b'a' b'nickname' b'they' b'noted' b'that' b'it' b'will' b'be' b'<unk>' b'as' b'their' b'maternal' b'food' b'of' b'their' b'shapes' b','
    b'no' b'feat' b'clip' b'has' b'kept' b'since' b'1950s' b'in' b'pre' b'@-@' b'<unk>' b'regions' b'.' b'A' b'average' b'species' b'that' b'visited' b'fertility' b','
    b'<unk>' b',' b'and' b'over' b'as' b'the' b'layer' b'Vaballathus' b'.' b'Measurements' b'of' b'sorts' b'of' b'Ulster' b'did' b'not' b'occur' b'on' b'that' b'of'
    b'the' b'herbivorous' b'garments' b',' b'which' b'can' b'be' b'Colm' b'Mock' b'reaction' b'throughout' b'his' b'entire' b'architecture' b'.' b'As' b'they' b'often' b',' b'they'
    b'eat' b'good' b'agricultural' b'bird' b',' b'so' b'they' b'universal' b'310' b'or' b'two' b'are' b'guys' b',' b'while' b'many' b'then' b'are' b'separated' b'about'
    b'England' b'partner' b'of' b'a' b'asteroid' b'or' b'so' b'turning' b'to' b';' b'they' b'find' b'the' b'proper' b',' b'deep' b'tail' b'or' b'angry' b'reduction'
    b'within' b'limiting' b',' b'with' b'a' b'water' b'<unk>' b'within' b'a' b'bite' b'may' b'stop' b'to' b'stock' b'proteins' b'.' b'<eos>' b'During' b'they' b'cannot'
    b'be' b'permitted' b'to' b'have' b'most' b'fallen' b'portions' b'or' b'tolerance' b',' b'males' b'Data' b'pink' b'or' b'soil' b'blossom' b'may' b'be' b'sometimes' b'connected'
    b'.' b'<eos>' b'<eos>' b'=' b'=' b'Parliamentary' b'war' b'=' b'=' b'<eos>' b'<eos>' b'Because' b'...' b'for' b'the' b'breeding' b'plane' b'operationally' b'or' b'their'
    b'passion' b':' b'this' b'system' b',' b'perch' b'procedure' b',' b'masses' b'live' b',' b'William' b'10' b'Sighting' b'color' b',' b'and' b'masterly' b'PCI' b'Rogan'
    b'Family' b',' b'usually' b'symptoms' b'.' b'In' b'some' b'excellence' b',' b'by' b'February' b'23' b',' b'2006' b',' b'according' b'to' b'a' b'close' b'storm'
    b'<unk>' b',' b'<unk>' b'is' b'equipped' b'away' b'before' b'undergoing' b'the' b'starling' b"'s" b'name' b',' b'and' b'ear' b'sightings' b'have' b'briefly' b'come' b'until'
    b'orbits' b'.' b'United' b'States' b',' b'she' b'is' b'often' b'described' b'as' b'one' b'of' b'any' b'source' b',' b'that' b'has' b'a' b'result' b'that'
    b'may' b'be' b'representing' b'this' b',' b'mostly' b'as' b'of' b'receive' b'much' b'multiplayer' b'structures' b'.' b'Back' b',' b'he' b'sent' b'only' b'other' b'standpoints'
    b'in' b'all' b'of' b'Canada' b',' b'support' b'during' b'<unk>' b'commands' b',' b'which' b'may' b'be' b'over' b'10' b'%' b'of' b'his' b'length' b'.'
    b'Ceres' b'grew' b'in' b'several' b'shape' b',' b'including' b'one' b'hundred' b'forests' b'within' b'every' b'single' b'.' b'<eos>' b'Other' b'starlings' b'hear' b'parrots' b'for'
    b'the' b'breeding' b'season' b'.' b'They' b'reopened' b'Reala' b'with' b'food' b',' b'they' b'may' b'find' b'in' b'other' b'branches' b'.' b'They' b'remain' b'heavily'
    b'as' b'some' b'as' b'expatriate' b'Lillehammer' b',' b'expanding' b',' b'and' b'very' b'flat' b'<unk>' b'.' b'Their' b'interior' b'or' b'coloring' b'have' b'been' b'shown'
    b'until' b'one' b'snout' b',' b'which' b'is' b'very' b'sovereign' b'.' b'<eos>' b'Cassino' b'consists' b'of' b'nest' b'kakapo' b',' b'they' b'process' b'into' b'persons'
    b'with' b'thunderstorm' b'<unk>' b'.' b'<eos>' b'Both' b'species' b"'" b'origins' b'is' b'commonly' b'incapable' b'for' b'<unk>' b';' b'used' b',' b'common' b',' b'rocks'
    b',' b'left' b',' b'and' b'feral' b'as' b'elsewhere' b',' b'like' b'our' b'presence' b'and' b'withdrawing' b'throughout' b'her' b'change' b'.' b'These' b'starlings' b'were'
    b'prevented' b'for' b'"' b'<unk>' b'"' b',' b'where' b'they' b'are' b'close' b'to' b'the' b'Arbeiderblad' b'Grammar' b'Guard' b'as' b'they' b'perform' b'them' b'.'
    b'"' b'An' b'<unk>' b'like' b'<unk>' b'Pickering' b'cannot' b'indicate' b'that' b'to' b'"' b'<unk>' b'that' b'"' b'and' b'<unk>' b'how' b'of' b'sovereignty' b'have'
    b'<unk>' b'Contact' b'that' b'could' b'be' b'thrown' b'slowly' b'on' b'young' b'breeding' b'that' b'have' b'significant' b'change' b'can' b'even' b'be' b'<unk>' b'.' b'For'
    b'preventing' b'it' b'so' b'cereal' b',' b'the' b'reprinted' b'surface' b'are' b'still' b'a' b'unique' b'sense' b'of' b'make' b'books' b'.' b'Like' b'some' b'female'
    b'spiders' b'(' b'<unk>' b',' b'Resor' b')' b',' b'they' b'are' b'usually' b'Catholic' b'as' b'they' b'have' b'listed' b'it' b'to' b'or' b'...' b'they'
    b'do' b'a' b'safe' b'force' b'advertise' b'sockeye' b'is' b'below' b'flight' b'"' b'.' b'<eos>' b'A' b'warning' b'who' b'was' b'shown' b'for' b'enormous' b'LED'
    b'schools' b',' b'a' b'genus' b'@-@' b'driven' b',' b'saving' b'a' b'number' b'collection' b'on' b'the' b'world' b'by' b'restoration' b'based' b'on' b'their' b'assassination'
    b'.' b'Cambridge' b'first' b'says' b'that' b'signifying' b'a' b'actual' b'<unk>' b'to' b'mediate' b'up' b'by' b'<unk>' b'.' b'When' b'artists' b'can' b'be' b'backwards'
    b'implemented' b'by' b'<unk>' b'would' b'be' b'bacteria' b'from' b'eastern' b'scales' b',' b'they' b'are' b'ordering' b'.' b'How' b'when' b'so' b'Mona' b'Cass' b'may'
    b'eat' b'eggs' b',' b'they' b'are' b'probably' b'capable' b'of' b'oxidation' b"'s" b'conclusion' b'.' b'<eos>' b'"' b'Ceres' b'"' b'is' b'short' b'dried' b','
    b'shaped' b',' b'application' b'or' b'low' b'@-@' b'prey' b'Cities' b',' b'<unk>' b',' b'and' b'early' b'male' b',' b'such' b'as' b'<unk>' b',' b'sausage'
    b',' b'<unk>' b',' b'southern' b',' b'owls' b',' b'and' b'amastigotes' b'.' b'But' b'this' b'nest' b'is' b'hybrid' b',' b'they' b'believe' b',' b'but'
    b'may' b'be' b'mistaken' b'.' b'The' b'fox' b'can' b'use' b'a' b'pair' b'of' b'sightings' b',' b'exit' b',' b'<unk>' b',' b'<unk>' b',' b'Timeline'
    b',' b'black' b',' b'<unk>' b',' b'reappearance' b',' b'<unk>' b',' b'Bruno' b',' b'<unk>' b',' b'Zong' b',' b'pursuers' b',' b'Lviv' b',' b'<unk>'
    b',' b'Rainbow' b',' b'Heidelberg' b',' b'and' b'imposing' b'all' b'of' b'other' b'other' b'merchants' b'where' b'raises' b'Catholic' b'law' b',' b'the' b'frame' b'including'
    b'frigate' b'grating' b'by' b'small' b'items' b'.' b'All' b'on' b'the' b'more' b'male' b'only' b'oppose' b'insects' b'well' b'as' b'pyramidal' b'<unk>' b'(' b'1632'
    b')' b'breeding' b'artists' b'of' b'Northern' b'have' b'rounded' b'@-@' b'sized' b'assembly' b'.' b'One' b'female' b'are' b'probably' b'connected' b'to' b'illustrated' b'literature' b'are'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 218.0
    loss: 5.168
    elapsed time (seconds): 144.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  8.504 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
