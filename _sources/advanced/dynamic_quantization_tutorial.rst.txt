.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'Secondary' b'American' b'divides' b';' b'including' b'his' b'deadly' b'<unk>' b'.' b'photo' b'back' b'through' b'the' b'19th' b'century' b'their' b'1976' b'pilot' b'but' b'a'
    b'female' b'section' b'of' b'processing' b'required' b'between' b'<unk>' b'and' b'interior' b',' b'Barron' b'attempted' b'the' b'Viceroy' b'to' b'sell' b'any' b'artefacts' b'from' b'three'
    b'%' b'.' b'<unk>' b'damage' b'is' b'distribute' b'in' b'Western' b',' b'<unk>' b',' b'Tammy' b',' b'and' b'<unk>' b'.' b'Control' b'to' b'this' b'body'
    b'may' b'be' b'complicated' b'with' b'while' b'<unk>' b'@-@' b'eyed' b'(' b'structure' b')' b',' b'and' b'in' b'World' b'War' b'II' b'Foreign' b'Younger' b'would'
    b'be' b'reduction' b'to' b'form' b'their' b'first' b'worst' b',' b'planting' b'by' b'Kitana' b',' b'dispatching' b'by' b'immature' b'schools' b'lobes' b'.' b'Hornung' b'report'
    b'his' b'final' b'sister' b'signature' b'actions' b'in' b'open' b'areas' b',' b'complaints' b',' b'relations' b'and' b'fraud' b'.' b'<eos>' b'Irish' b'territorial' b'attention' b'how'
    b'H' b'bin' b'II' b'adopted' b'the' b'member' b'of' b'Lake' b'Channel' b'that' b'sharing' b'<unk>' b'birds' b',' b'has' b'signed' b'they' b'exist' b'in' b'their'
    b'homes' b'.' b'In' b'a' b'case' b'in' b'Japanese' b'Observations' b'encoded' b'from' b'the' b'sequence' b'screen' b'periods' b'on' b'their' b'planet' b',' b'and' b'was'
    b'widely' b'working' b'on' b'a' b'strained' b'novelization' b'Star' b'palace' b'by' b'Jews' b'off' b'the' b'audience' b'and' b'at' b'his' b'home' b'cello' b'be' b'supposed'
    b'to' b'be' b'incorrect' b'after' b'a' b'leap' b'by' b'German' b'technology' b'.' b'Parts' b'have' b'been' b'rejected' b'in' b'the' b'Japanese' b'film' b':' b'<eos>'
    b'<eos>' b'=' b'=' b'Description' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Accolades' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Hornung' b'has'
    b'been' b'signed' b'out' b'alleged' b'in' b'real' b'language' b',' b'efforts' b',' b'or' b'the' b'efforts' b'of' b'the' b'Icarus' b'Bureau' b'on' b'their' b'Vivien'
    b'.' b'In' b'filling' b'years' b',' b'people' b'indicates' b'the' b'ability' b'to' b'have' b'been' b'willing' b'to' b'know' b'sports' b'following' b'the' b'tagline' b'prior'
    b'to' b'both' b'consecration' b'seen' b'until' b'Husbandman' b'.' b'His' b'own' b'review' b'is' b'also' b'included' b'by' b'<unk>' b'open' b'hire' b',' b'so' b'moving'
    b'at' b'its' b'open' b'location' b'led' b'by' b'headed' b'of' b'lends' b'support' b'in' b'highlighting' b'for' b'Phineas' b',' b'Italy' b',' b'1999' b',' b'and'
    b'the' b'Virginia' b'Administration' b'.' b'The' b'studio' b'system' b'returns' b'to' b'the' b'94th' b'election' b'to' b'embrace' b',' b'a' b'strong' b'jets' b'together' b'by'
    b'deep' b'to' b'walls' b',' b'though' b'arranged' b'to' b'another' b'day' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Christianity' b'=' b'=' b'=' b'<eos>'
    b'<eos>' b'During' b'being' b'stories' b'for' b'mountain' b'congressman' b',' b'reactions' b'served' b'as' b'a' b'"' b'common' b'golden' b'astronomical' b'"' b',' b'which' b'peaked'
    b'in' b'the' b'11th' b'century' b',' b'plastic' b'or' b'<unk>' b'that' b'increased' b'synthesized' b'are' b'narrow' b'by' b'thousands' b'of' b'Georgian' b'monuments' b'.' b'They'
    b'have' b'also' b'cited' b'coverage' b'and' b'<unk>' b',' b'whereas' b'they' b'<unk>' b'their' b'most' b'hemp' b'duel' b'.' b'The' b'bird' b'(' b'The' b'Antibodies'
    b'government' b'is' b'studying' b'living' b'or' b'very' b'long' b'.' b'<unk>' b')' b'of' b'stain' b'lacking' b'promise' b'to' b'international' b'leaf' b'art' b',' b'with'
    b'some' b'terrain' b'normally' b'other' b'long' b'<unk>' b'from' b'sight' b'or' b'heavier' b'implications' b',' b'such' b'as' b'manuscripts' b"'" b'Laz' b'environment' b';' b'flower'
    b'German' b'Frame' b'groups' b'comprised' b'cladistic' b'snakes' b'but' b'some' b'females' b'are' b'analyzed' b'to' b'1831' b'.' b'In' b'followers' b',' b'he' b'authored' b'some'
    b'of' b'the' b'evolution' b'to' b'find' b'<unk>' b',' b'but' b'urban' b'are' b'a' b'man' b'in' b'any' b'institutions' b'.' b'The' b'Irish' b'fungus' b'humorist'
    b'mentions' b'out' b'for' b'partially' b'attested' b'by' b'smaller' b'purportedly' b'such' b'as' b'Representatives' b',' b'South' b'Africa' b',' b'surgery' b',' b'<unk>' b',' b'green'
    b',' b'Streets' b',' b'<unk>' b',' b'Russia' b',' b'USA' b'and' b'Painter' b',' b'Syracuse' b',' b'and' b'Productions' b'.' b'Nest' b'large' b'starling' b','
    b'Mackenzie' b'Ipswich' b',' b'headless' b'Waterway' b',' b'crested' b'<unk>' b'by' b'manuscripts' b'(' b'particularly' b'referred' b'to' b'as' b'unmarried' b',' b'was' b'also' b'refurbished'
    b'to' b'bring' b'the' b'satellite' b'to' b'developed' b'595' b')' b'.' b'Adams' b'IFA' b'have' b'created' b'Japan' b',' b'which' b'are' b'a' b'Curtis' b'Gardner'
    b',' b'Headquarters' b'North' b',' b'football' b',' b'S.' b'al' b'Hope' b'from' b'mg' b'Island' b',' b'a' b'role' b'on' b'The' b'<unk>' b',' b'causing'
    b'it' b'within' b'victories' b',' b'allowing' b'relatives' b'of' b'signals' b'somewhat' b'to' b'Abingdon' b'.' b'By' b'1994' b',' b'<unk>' b'has' b'advocated' b'not' b'22'
    b'%' b'due' b'to' b'1821' b',' b'such' b'while' b'tying' b'flock' b'as' b'a' b'favourable' b'institution' b'in' b'Kifino' b'Winds' b',' b'which' b'heavy' b'movement'
    b'specific' b'than' b'to' b'be' b'closed' b'JAR' b'decoration' b'.' b'<unk>' b'<unk>' b'<unk>' b'is' b'thought' b'to' b'have' b'sold' b'part' b'in' b'recent' b'nuclei'
    b'.' b'A' b'rear' b'Nancy' b'al' b'FOCA' b'the' b'Democratic' b'Boat' b'Allah' b'offered' b'<unk>' b'marrow' b'kitchens' b'.' b'In' b'1968' b',' b'they' b'planned'
    b'a' b'2015' b'civil' b'$' b'2' b'million' b'magazines' b'throughout' b'the' b'native' b'war' b'.' b'Another' b'musical' b'plant' b'of' b'the' b'bay' b',' b'nests'
    b',' b'reasoning' b'and' b'age' b'development' b',' b'is' b'most' b'crescent' b'for' b'size' b'during' b'the' b'year' b'or' b'large' b'genus' b'when' b'RLI' b'the'
    b'kakapo' b'<unk>' b'heart' b'from' b'Nebraska' b'.' b'<eos>' b'Because' b'they' b'feed' b'in' b'some' b'countries' b',' b'the' b'species' b'reserved' b'go' b'from' b'gather'
    b'\xc2\xb5m' b',' b'by' b'kakapo' b'bombs' b'research' b',' b'each' b'of' b'whom' b'soon' b'helped' b'until' b'22' b'%' b'of' b'Ceres' b',' b'and' b'eventually'
    b'claimed' b'by' b'weighs' b'1102' b'resistant' b'.' b'<eos>' b'A' b'variety' b'of' b'electrical' b'rubber' b'sequences' b'may' b'allow' b'different' b'M\xc4\x81ori' b'relationships' b'on' b'hills'
    b'.' b'Continuing' b'passenger' b'accounts' b'is' b'small' b',' b'and' b'their' b'heads' b'is' b'from' b'another' b'case' b'\xe2\x80\x93' b'seriously' b'Feature' b'kills' b'feathers' b'.'
    b'When' b'these' b'females' b'do' b'not' b'occur' b',' b'it' b'they' b'can' b'last' b'be' b'inhibitor' b'further' b'.' b'Tawny' b'states' b'the' b'kakapo' b'must'
    b'be' b'banned' b'up' b'by' b'hole' b'to' b'their' b'wife' b'.' b'Like' b'one' b'sides' b',' b'they' b'cannot' b'be' b'either' b'representing' b'either' b'intense'
    b'force' b',' b'they' b'are' b'known' b'by' b'dictionaries' b'.' b'With' b'this' b'there' b'are' b'the' b'entire' b'amount' b'or' b'method' b'of' b'small' b'species'
    b'in' b'both' b'regions' b'.' b'This' b'main' b'activity' b'is' b'made' b'into' b'paintings' b'and' b'other' b'stretches' b'like' b'simulators' b',' b'there' b'were' b'no'
    b'parasites' b'to' b'ensure' b'that' b'they' b'have' b'been' b'<unk>' b'.' b'The' b'<unk>' b'deliberately' b'widen' b'being' b'reserved' b'to' b'construct' b'a' b'legislation' b','
    b'presumably' b'that' b'this' b'species' b'may' b'be' b'brought' b'to' b'bird' b'rocks' b',' b'particularly' b'by' b'other' b'circumstances' b',' b'it' b'may' b'be' b'\xe2\x80\x93'
    b'beautiful' b'sculpture' b'.' b'One' b'Siloeman' b'authors' b'died' b'in' b'western' b'China' b'when' b'they' b'appear' b'five' b'male' b',' b'something' b'treated' b'at' b'about'
    b'4' b'times' b',' b'flowers' b',' b'and' b'<unk>' b',' b'meaning' b'deserves' b'an' b'conference' b'.' b'Previously' b',' b'Wirth' b'\xe2\x80\x93' b'<unk>' b'is' b'recent'
    b',' b'that' b'they' b"'re" b'redesignated' b'as' b'fat' b',' b'as' b'to' b'profitable' b',' b'yellow' b'when' b',' b'they' b'may' b'be' b'enacted' b'.'
    b'If' b'luminous' b'this' b'overlooking' b',' b'however' b',' b'many' b'females' b'involved' b'<unk>' b'toxicity' b'was' b'soluble' b'by' b'obstacles' b',' b'able' b'to' b'have'
    b'it' b'had' b'fallen' b'that' b'it' b'is' b'easy' b'has' b'since' b'easily' b'rested' b'.' b'<eos>' b'<eos>' b'=' b'=' b'<unk>' b',' b'determine' b'Brown'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 212.1
    loss: 5.168
    elapsed time (seconds): 142.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  0.588 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
