.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'a' b'new' b'$' b'60' b'million' b'facing' b'inscribed' b'of' b'their' b'local' b'standards' b',' b'literary' b'cities' b'between' b'finely' b'and' b'fellow' b'rays' b'such'
    b'as' b'Quebec' b'and' b'1036' b'were' b'unrecorded' b',' b'but' b'the' b'pair' b'portrays' b'themselves' b'.' b'The' b'print' b'defends' b'about' b'twenty' b'viewers' b','
    b'primarily' b'internationally' b',' b'and' b'1' b'\xe2\x80\x93' b'5' b'@.@' b'3' b'<unk>' b'in' b'the' b'Sun' b'.' b'They' b'is' b'covered' b'by' b'Risa' b'and'
    b'genealogical' b'abundant' b'.' b'Because' b'lasting' b',' b'it' b'would' b'be' b'reached' b'$' b'5' b'million' b',' b'or' b'successful' b',' b'creating' b'them' b'about'
    b'to' b'only' b'protect' b'females' b',' b'Jeff' b'Dont' b'festivities' b',' b'and' b'other' b'wild' b'standards' b'initially' b'be' b'<unk>' b'(' b'155' b'\xe2\x80\x93' b'66'
    b'in' b')' b'and' b'20' b'in' b'(' b'myth' b',' b'2012' b')' b',' b'the' b'population' b'of' b'a' b'rump' b'.' b'Both' b'percentage' b'submitted'
    b'from' b'any' b'other' b'newer' b'@-@' b'green' b'(' b'123' b',' b'2004' b')' b',' b'which' b'are' b'different' b'in' b'<unk>' b'barrels' b'.' b'Their'
    b'spores' b'were' b'not' b'red' b'prohibited' b'.' b'<eos>' b'The' b'F\xc3\xa9d\xc3\xa9ration' b'sexpunctatus' b'Hisn' b'Pliny' b'presented' b'up' b'ten' b'kilometres' b'during' b'a' b'season' b'with'
    b'five' b'tackles' b',' b'the' b'Rover' b'922' b'of' b'Austria' b'(' b'"' b'The' b'<unk>' b'(' b'\xc3\x81lvaro' b'musically' b'"' b')' b'works' b'.' b'This'
    b'first' b'said' b'he' b'was' b'also' b'fought' b'on' b'script' b'and' b'underneath' b'the' b'Cambridge' b'ice' b'.' b'The' b'portion' b'of' b'a' b'land' b'net'
    b'would' b'be' b'used' b'in' b'anything' b'.' b'The' b'two' b'beaks' b'do' b'not' b'salesman' b'two' b'other' b'forms' b'.' b'The' b'memory' b'as' b'a'
    b'Live' b',' b'Philadelphia' b'game' b'is' b'now' b'showing' b'brown' b',' b'because' b'the' b'birds' b'varies' b'.' b'Every' b'other' b'manual' b'@-@' b'shaped' b'soldier'
    b'was' b'actually' b'impressed' b'at' b'a' b'Twitter' b'address' b'.' b'and' b'a' b'flower' b':' b'the' b'<unk>' b'<unk>' b'<unk>' b'(' b'offensive' b"'" b'Reubens'
    b'Power' b"'" b')' b';' b'the' b'longest' b'alarm' b'are' b'rarely' b'seen' b'by' b'other' b'older' b'equilibrium' b'speckles' b'.' b'<eos>' b'conceded' b'in' b'1974'
    b',' b'Research' b',' b'Lineberger' b',' b'and' b'fractions' b',' b'could' b'be' b'enlarged' b'up' b'or' b'bearing' b'Earth' b'from' b'larger' b',' b'surf' b','
    b'about' b'them' b'RCA' b'.' b'No' b'descriptions' b'eventually' b'provide' b'a' b'community' b'of' b'saving' b'short' b'Babcock' b'@-@' b'bearing' b'plants' b'in' b'attendants' b','
    b'although' b'they' b'are' b'sometimes' b'well' b'seen' b'.' b'<eos>' b'While' b'easily' b'are' b'a' b'flight' b',' b'there' b'are' b'no' b'species' b'among' b'a'
    b'smaller' b'Breeders' b'into' b'different' b'fish' b'production' b',' b'open' b'frequency' b'and' b'smaller' b'Impact' b'.' b'All' b'of' b'his' b'economic' b'minds' b'at' b'the'
    b'perihelion' b'defects' b'are' b'mainly' b'useful' b'by' b'other' b'Ned' b'Truck' b'regular' b'frequency' b'.' b'Another' b'molecular' b'dwarf' b'suggests' b'that' b'this' b'"' b'is'
    b'among' b'the' b'beauty' b'of' b'Republic' b'through' b'The' b'asteroid' b'shelves' b'in' b'the' b'Republic' b'of' b'Ireland' b',' b'indicating' b'it' b'.' b'"' b'As'
    b'Mithravinda' b'also' b'described' b'the' b'UK' b',' b'Jesus' b'writes' b'that' b'G.I.' b'Brat' b'is' b'light' b'after' b'the' b'bird' b'had' b'a' b'vices' b'with'
    b'a' b'faults' b'from' b'it' b'than' b'spanned' b'them' b'.' b'They' b'<unk>' b'the' b'pale' b',' b'a' b'planet' b'of' b'normally' b'Antonio' b'instead' b','
    b'limited' b',' b'feeding' b'cadres' b',' b'they' b'deteriorate' b'that' b'left' b'forked' b'.' b'The' b'libretto' b'of' b'kakapo' b'currently' b'lasts' b'and' b'still' b'won'
    b',' b'because' b'this' b'species' b'may' b'be' b'food' b'.' b'"' b'The' b'reclusive' b'atmosphere' b'is' b'likely' b'that' b'many' b'people' b'caused' b'on' b'reviewers'
    b'in' b'ability' b'to' b'protect' b'your' b'body' b'for' b'<unk>' b'.' b'But' b',' b'I' b"'ll" b'have' b'opinions' b'you' b'is' b'present' b'with' b'us'
    b'to' b'not' b'play' b',' b'will' b'be' b'asked' b'.' b'If' b'there' b'are' b'60' b'different' b'artists' b'were' b'<unk>' b'Adams' b'(' b'a' b'major'
    b'ornamentation' b'of' b'his' b'head' b'face' b',' b'by' b'then' b',' b'set' b'that' b'short' b'one' b'of' b'whom' b'I' b'"' b'could' b'be' b'today'
    b'now' b'philosophically' b')' b',' b'but' b'expected' b'that' b'it' b'is' b'learned' b'that' b'these' b'birds' b'were' b'known' b'to' b'be' b'not' b'.' b'<eos>'
    b'The' b'court' b'of' b'Ceres' b'means' b'Frederick' b'centric' b'(' b'diminishing' b'Witch' b'Jain' b')' b'the' b'Sonate' b':' b'The' b'<unk>' b'Colony' b'(' b'maintained'
    b'throughout' b'a' b'cameo' b'definition' b'that' b'died' b'forward' b'the' b'population' b'of' b'Sanskrit' b'and' b'the' b'Lens' b'arise' b'as' b'described' b'by' b'withstand' b'fighters'
    b')' b'ordered' b'them' b'to' b'find' b'swamps' b'with' b'a' b'tree' b'stimulates' b'their' b'influence' b'and' b'travel' b'as' b'they' b'couldn' b"'t" b'want' b'to'
    b'be' b'fixed' b'.' b'Crash' b'hay' b'Bird' b'disbanded' b'a' b'comparison' b'at' b'a' b'50' b'@-@' b'day' b'orbit' b',' b'a' b'combined' b'angle' b'or'
    b'another' b'human' b',' b'for' b'all' b'Ceres' b'in' b'those' b',' b'a' b'dozen' b'Scotts' b'for' b'gravity' b',' b'and' b'emit' b'a' b'fission' b'mating'
    b'sign' b'.' b'<unk>' b',' b'which' b'a' b'year' b'on' b'the' b'deer' b'(' b'<unk>' b')' b'requires' b'actually' b'about' b'30' b'%' b'of' b'its'
    b'body' b'(' b'7' b'\xe2\x80\x93' b'5' b'to' b'39' b'and' b'6' b'cm' b')' b'per' b'wide' b',' b'pressure' b'hurdles' b'are' b'never' b'harassed' b'in'
    b'necessary' b'.' b'They' b'are' b'usually' b'seen' b'at' b'a' b'standard' b'slowly' b';' b'this' b'is' b'an' b'persona' b'while' b'with' b'the' b'change' b'was'
    b'<unk>' b'.' b'At' b'19' b':' b'00' b'years' b',' b'mountain' b'Mather' b'is' b'distinguished' b'.' b'This' b'bodies' b'is' b'still' b'need' b'to' b'be'
    b'over' b'5' b'%' b'from' b'the' b'pair' b',' b'but' b'have' b'diving' b'or' b'it' b'and' b',' b'with' b'no' b'variety' b'of' b'libraries' b'.'
    b'The' b'head' b'which' b'enter' b'power' b'when' b'fission' b',' b'can' b'be' b'masculine' b'.' b'vectors' b'and' b'asks' b'begin' b'to' b'be' b'held' b'where'
    b'males' b'ranging' b'.' b'At' b'a' b'level' b',' b'can' b'bear' b'<unk>' b',' b'agitated' b'or' b'population' b'<unk>' b',' b'reduce' b'them' b'a' b'gill'
    b'device' b'that' b'they' b'kept' b'@-@' b'5' b'or' b'fewer' b'other' b'environments' b'.' b'Following' b'example' b',' b'independently' b'for' b'them' b'can' b'be' b'extinct'
    b'at' b'annoy' b'.' b'Four' b'areas' b'recorded' b'for' b'a' b'mating' b'patch' b'of' b'the' b'small' b'centralised' b'leukemia' b'(' b'now' b'known' b'as' b'<unk>'
    b')' b',' b'are' b'recorded' b'around' b'28' b'years' b',' b'but' b'slowly' b'occasionally' b'try' b'to' b'dominate' b'in' b'other' b'maturity' b'.' b'Once' b'the'
    b'regions' b'are' b'so' b'common' b',' b'she' b'has' b'each' b'Yiddish' b'Jump' b'(' b'903' b'chemical' b'Hen' b')' b'.' b'<eos>' b'Following' b'example' b','
    b'it' b'came' b'in' b'males' b'for' b'M.' b'activist' b',' b'years' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'Ceres'
    b'is' b'required' b'for' b'nine' b'dozen' b'subspecies' b',' b'which' b'is' b'13' b'\xe2\x80\x93' b'7' b':' b'40' b'fusion' b'due' b'.' b'<unk>' b'(' b'on'
    b'89' b'there' b'ends' b'to' b'50' b'million' b'females' b'(' b'are' b'nine' b')' b',' b'and' b'a' b'diagonal' b'male' b'male' b'can' b'be' b'powerful'
    b'due' b'to' b'a' b'irregular' b'relief' b'vehicle' b'or' b'protesters' b':' b'"' b'<unk>' b',' b'young' b'or' b'<unk>' b'exclusively' b'.' b',' b'<unk>' b'with'
    b'some' b'adults' b',' b'all' b'of' b'it' b'today' b',' b'and' b'Mycena' b'"' b'Korchnoi' b',' b'very' b'unique' b',' b'described' b'by' b'merely' b'of'
    b'the' b'establishment' b'of' b'Isaac' b'Azzarello' b'as' b'they' b'do' b'not' b'<unk>' b'.' b'If' b'it' b'will' b'be' b'less' b'reaches' b',' b'they' b'al'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 223.2
    loss: 5.168
    elapsed time (seconds): 147.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  16.512 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
