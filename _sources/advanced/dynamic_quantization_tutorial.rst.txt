.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b',' b'which' b'was' b'demolished' b'by' b'Houston' b'like' b'considered' b'excavation' b',' b'swiftly' b',' b'Mast' b',' b'<unk>' b',' b'<unk>' b'and' b'states'
    b'the' b'Could' b'emitted' b'passenger' b'with' b'water' b',' b'and' b'Bob' b'Alain' b'nymphaeum' b'to' b'be' b'probably' b'cleared' b'by' b'The' b'snake' b'however' b'that'
    b'tenth' b'time' b'.' b'His' b'online' b'disagreed' b'to' b'rely' b'on' b'1' b'@.@' b'4' b'pinnacles' b'have' b'achieved' b'business' b'chests' b'.' b'Pride' b'started'
    b'volunteers' b'well' b'as' b'the' b'worst' b',' b'although' b'The' b'sixth' b'Park' b'was' b'published' b'.' b'The' b'city' b'also' b'Cunningham' b'and' b'assignment' b'repudiated'
    b'<unk>' b',' b'loosely' b'and' b'milestones' b'.' b'The' b'Royal' b'American' b'Catholic' b'astronomers' b'attempted' b'to' b'be' b'the' b'main' b'album' b'of' b'the' b'understory'
    b'.' b'There' b'have' b'succeed' b'they' b'expanded' b'numerous' b'rooms' b'about' b'the' b'1890s' b'in' b'Electrical' b'runners' b'as' b'by' b'domesticated' b'work' b'.' b'In'
    b'2009' b',' b'it' b'answered' b'a' b'member' b'of' b'Empire' b'to' b'minimise' b'the' b'heaviest' b'climate' b'of' b'Norwalk' b',' b'who' b'may' b'seem' b'to'
    b'write' b'sell' b'or' b'have' b'to' b'be' b'cases' b'.' b'<eos>' b'In' b'the' b'2006' b'series' b',' b'Fredrik' b'presidents' b'has' b'lists' b'maybe' b'of'
    b'Black' b'Island' b',' b'to' b'the' b'Union' b'state' b'"' b'Biblical' b'"' b'don' b'<eos>' b'<eos>' b'=' b'=' b'Popular' b'country' b'=' b'=' b'<eos>'
    b'<eos>' b'scientists' b'produced' b'very' b'commonly' b'consistent' b'protests' b'from' b'corrosion' b'.' b'The' b'orbit' b'of' b'younger' b'prerogative' b'strength' b'around' b'California' b"'s" b'white'
    b',' b'speculating' b'to' b'compensate' b'Shou' b'traitor' b',' b'including' b'Plu\xc5\xbeine' b',' b'were' b'not' b'far' b'in' b'bond' b',' b'a' b'fur' b'area' b'named'
    b'about' b'30' b'in' b'total' b'August' b'2008' b'.' b'Other' b'of' b'these' b'officials' b'was' b'introduced' b'in' b'1961' b'by' b'many' b'1926' b',' b'particularly'
    b'to' b'be' b'also' b'reduced' b'.' b'Also' b',' b'this' b'period' b'is' b'resemble' b'by' b'periphery' b'at' b'prominent' b'times' b'in' b'preparation' b',' b'Swedish'
    b'culture' b'and' b'groups' b'.' b'Like' b'the' b'development' b'of' b'Paris' b',' b'they' b'first' b'devastating' b',' b'so' b'the' b'white' b'results' b'is' b'reflected'
    b'.' b'It' b'is' b'Phase' b'also' b'smaller' b'enough' b'and' b'wave' b'systems' b',' b'including' b'other' b'spiders' b'design' b'of' b'bright' b'devastation' b',' b'in'
    b'some' b'taking' b'with' b'more' b'Two' b'direct' b',' b'and' b'Tang' b'dowry' b'loading' b'several' b'more' b'harsh' b'@-@' b'game' b'feathers' b',' b'and' b'1892'
    b'bundle' b'in' b'2001' b'.' b'<eos>' b'Until' b'many' b'countries' b',' b'kakapo' b'suggests' b'that' b'<unk>' b',' b'fossil' b'bodies' b',' b'or' b'wrought' b'confirmation'
    b'.' b'options' b'may' b'meet' b'down' b'in' b'human' b'areas' b',' b'<unk>' b'nightly' b',' b'inflating' b'them' b'.' b'The' b'Gaelic' b'Underground' b'Council' b','
    b'which' b'occurs' b'in' b'fun' b',' b'is' b'roughly' b'1' b'kilometres' b'(' b'0' b'@.@' b'4' b'in' b')' b'deep' b',' b'which' b'spacing' b'in'
    b'1828' b'.' b'Large' b'winds' b'partially' b'have' b'enlarged' b'HIV' b'or' b'unlikely' b',' b'thirst' b',' b'<unk>' b',' b'IV' b',' b'or' b'dumps' b','
    b'which' b'can' b'be' b'branched' b'as' b'neither' b'same' b'colouration' b'.' b'organizer' b'different' b'power' b'or' b'feathers' b',' b'Les' b'PCI' b',' b'<unk>' b','
    b'<unk>' b',' b'and' b'insists' b',' b'immature' b',' b'yellow' b',' b'and' b'collector' b'erosion' b'and' b'Marvin' b'RNA' b'as' b'"' b'accurately' b'"' b';'
    b'<unk>' b'Tomatoes' b'considers' b'it' b'as' b'"' b'derived' b'down' b'<unk>' b'"' b'.' b'Although' b'hypothesis' b'species' b'have' b'been' b'important' b'each' b'on' b'sites'
    b',' b'many' b'other' b'ones' b'were' b'named' b',' b'as' b'there' b'is' b'uncertain' b'that' b'"' b'the' b'flames' b'causes' b'Clan' b'and' b'<unk>' b'/'
    b'riding' b'is' b'benefits' b'to' b'Conservation' b'[' b'"' b"'" b'the' b'God' b'can' b'have' b'Zeitung' b'or' b'evidence' b'.' b'<eos>' b'The' b'east' b'poverty'
    b'has' b'<unk>' b'flanked' b'by' b'an' b'massive' b'orbit' b',' b'a' b'Salaad' b'was' b'detected' b'at' b'use' b'(' b'adult' b'<unk>' b'for' b'technical' b'habitat'
    b'areas' b')' b',' b'Palisades' b'and' b'poorer' b'@-@' b'planet' b'.' b'In' b'the' b'United' b'States' b',' b'imbalance' b'.' b'cheilocystidia' b'did' b'not' b'be'
    b'transmitted' b'by' b'typical' b'pieces' b'of' b'text' b'.' b'Local' b'starlings' b'often' b'increased' b'sweet' b'winds' b'at' b'least' b'rebuilt' b'their' b'upland' b'or' b'serve'
    b'a' b'elaborate' b'"' b'ecosystems' b'"' b'mixture' b'to' b'make' b'it' b'if' b'it' b'is' b'pregnant' b'.' b'Despite' b'the' b'Industrial' b'eminent' b'Barrymore' b'in'
    b'Arizona' b',' b'180' b'men' b'in' b'2002' b'were' b'opened' b'to' b'be' b'extinct' b'by' b'the' b'birds' b'on' b'their' b'show' b'.' b'One' b'species'
    b'of' b'yuan' b'in' b'underground' b'specimens' b'were' b'named' b'very' b'chambers' b',' b'so' b'these' b'insects' b'are' b'made' b'to' b'be' b'subdivided' b'in' b'terms'
    b'Youth' b'Leonard' b'monkeys' b',' b'who' b'was' b'heated' b'because' b'they' b'are' b'a' b'different' b'<unk>' b'by' b'any' b'noticeable' b'display' b'.' b'This' b'often'
    b'included' b'palace' b',' b'which' b'are' b'probably' b'consistent' b'.' b'There' b'are' b'natural' b'evidence' b'of' b'observations' b'of' b'developmental' b',' b'so' b'nothing' b'cooler'
    b'existed' b'.' b'confluence' b',' b'one' b'of' b'the' b'design' b',' b'hampered' b'length' b'of' b'neighborhoods' b'from' b'the' b'fungus' b"'s" b'grammar' b',' b'Britain'
    b',' b'has' b'an' b'annual' b'armament' b',' b'or' b'which' b'is' b'known' b'as' b'<unk>' b',' b'and' b'stimulate' b',' b'and' b'even' b'jarred' b'fabrication'
    b'.' b'These' b'evolved' b'with' b'New' b'Zealand' b',' b'Seine' b',' b'Dominica' b',' b'drier' b'trees' b'and' b'metal' b'.' b'When' b'they' b'are' b'very'
    b'strongly' b'exposed' b'to' b'thousands' b'of' b'active' b',' b'regulars' b'historical' b'dust' b'alternating' b'on' b'the' b'lateral' b'west' b'of' b'activity' b'.' b'<eos>' b'coordinates'
    b'records' b'in' b'plum' b'Africa' b',' b'London' b',' b'and' b'in' b'place' b',' b'by' b'a' b'conversion' b'of' b'Kaifeng' b',' b'Irish' b'birds' b'supported'
    b'by' b'pre' b'@-@' b'ruined' b'activities' b'range' b',' b'with' b'dwell' b'of' b'planets' b'which' b'may' b'have' b'climbed' b'so' b'their' b'older' b'habitually' b'counterpart'
    b',' b'ability' b'to' b'be' b'assessed' b'down' b'to' b'the' b'number' b'of' b'M\xc4\x81ori' b',' b'where' b'they' b'are' b'killed' b'with' b'fabricated' b'@-@' b'bark'
    b'are' b'related' b'.' b'<eos>' b'A' b'variety' b'of' b'<unk>' b'plantations' b'on' b'a' b'natural' b'white' b'activity' b',' b'foreshadowed' b',' b'with' b'occasional' b'genera'
    b',' b'may' b'be' b'seen' b'around' b'<unk>' b',' b'which' b'may' b'be' b'seen' b'to' b'remain' b'late' b'for' b'the' b'common' b'ocean' b'.' b'So'
    b'they' b'eat' b'approximately' b'450' b'or' b'<unk>' b'valid' b'openings' b',' b'which' b'are' b'no' b'flesh' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Background' b'='
    b'=' b'<eos>' b'<eos>' b'stellar' b'starlings' b'have' b'an' b'object' b'of' b'fruit' b',' b'which' b'of' b'explain' b'burn' b'species' b'(' b'effect' b')' b','
    b'are' b'overpainted' b'by' b'smaller' b'heat' b'to' b'of' b'the' b'fly' b'eye' b'.' b'When' b'masked' b',' b'but' b'the' b'bird' b'@-@' b'scriptures' b'coincided'
    b'in' b'this' b'other' b',' b'treble' b'juveniles' b'give' b'it' b'transformation' b'through' b'iconography' b'.' b'He' b'does' b'not' b'assign' b'it' b'back' b'with' b'it'
    b'located' b'is' b'because' b'it' b'indicates' b'that' b'it' b'is' b'much' b'normal' b'.' b'Baltodano' b'of' b'Composers' b'is' b'likely' b'by' b'wood' b'.' b'Various'
    b'confinement' b'are' b'sometimes' b'believed' b'to' b'have' b'to' b'earn' b'risk' b'or' b'individual' b'that' b'they' b'were' b'a' b'late' b'legal' b'black' b'species' b'.'
    b'<eos>' b'As' b'most' b'may' b'be' b'freezing' b'from' b'typesetting' b',' b'they' b'can' b'be' b'associated' b'in' b'exposed' b'or' b'very' b'short' b'destruction' b'of'
    b'females' b'or' b'those' b'of' b'the' b'hosts' b'.' b'Young' b'behaviour' b',' b'such' b'as' b'automobiles' b',' b'<unk>' b'manufacturers' b',' b'<unk>' b',' b'<unk>'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 213.8
    loss: 5.168
    elapsed time (seconds): 141.3


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  1.317 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
