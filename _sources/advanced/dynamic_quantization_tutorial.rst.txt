.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'<unk>' b'captivating' b'Painter' b'mutations' b'seven' b'times' b',' b'a' b'person' b'that' b'produced' b'<unk>' b'former' b'@-@' b'powered' b',' b'under' b'23' b'@.@' b'9'
    b'points' b',' b'with' b'seven' b'different' b'settings' b'in' b'the' b'first' b'half' b'stepped' b'on' b'his' b'first' b'drive' b'in' b'North' b'America' b'.' b'Prior'
    b'to' b'the' b'General' b'of' b'Tigernach' b',' b'Scotland' b'to' b'control' b'of' b'intrusion' b'and' b'parallax' b',' b'George' b'Miller' b'had' b'suggested' b'on' b'most'
    b'books' b'accusing' b'a' b'game' b'fighter' b'with' b'all' b'damage' b'that' b'could' b'not' b'be' b'found' b'to' b'shave' b'for' b'them' b'to' b'produce' b'making'
    b'them' b'to' b'gain' b'whether' b'any' b'parties' b'were' b'<unk>' b'.' b'The' b'university' b'later' b'mention' b'naya' b'a' b'story' b',' b'who' b'executed' b'Danny'
    b'as' b'"' b'perhaps' b'and' b'narrowing' b'them' b'to' b'keep' b'control' b'of' b'his' b'love' b'.' b'"' b'The' b'company' b'put' b'to' b'the' b'music'
    b'O' b"'Malley" b'and' b'excommunicated' b'what' b'years' b'to' b'greeted' b'Madero' b'across' b'its' b'life' b'.' b'Near' b'the' b'International' b'coasts' b'upstream' b',' b'Ceres'
    b'devoted' b'a' b'110' b'@-@' b'game' b'series' b'speeches' b'turn' b'Space' b'Bandcamp' b'found' b'he' b'introduced' b'another' b'baby' b'as' b'an' b'exclusive' b'to' b'Brienne'
    b'.' b'Max' b'Jon' b'Delany' b'plays' b'Kimmy' b'Macrianus' b'as' b'a' b'human' b'character' b'at' b'his' b'bleeding' b'anchor' b'called' b'Floyd' b'and' b'Santiago' b'on'
    b'box' b',' b'saying' b'6' b'members' b'of' b'permanent' b'Reef' b'by' b'horror' b'campaign' b',' b'giving' b'to' b'a' b'Meiko' b'"' b'creepy' b'outspoken' b'range'
    b'of' b'woody' b'computers' b'"' b'.' b'Hornung' b'was' b'S.' b'Albani' b'based' b'on' b'the' b'Chicago' b'Party' b'at' b'a' b'all' b'European' b'trial' b'<unk>'
    b',' b'which' b'differ' b'a' b'substantial' b'fiction' b'criticism' b'in' b'the' b'<unk>' b'Graphic' b'<unk>' b',' b'as' b'which' b'the' b'"' b'Societies' b'Foundation' b'of'
    b'it' b'"' b'only' b'just' b'met' b'about' b'what' b'is' b'naturalized' b'serving' b'well' b'as' b'too' b'masterly' b'.' b'Mosley' b'achieved' b'what' b'came' b'to'
    b'free' b'UHF' b',' b'believing' b'that' b'he' b'"' b'seems' b'to' b'sacrifice' b'"' b'.' b'p\xc3\xa9dalier' b'applauded' b'ambitions' b'in' b'such' b'to' b'Friars' b'and'
    b'friends' b'from' b'China' b'and' b'despite' b'weekends' b'the' b'movie' b'leakage' b'.' b'When' b'a' b'single' b'half' b'@-@' b'spored' b',' b'into' b'ABC' b','
    b'his' b'controls' b'he' b'continues' b'to' b'have' b'sunk' b'reading' b',' b'think' b'that' b'Robyn' b'asserted' b'an' b'pair' b'of' b'characters' b'on' b'the' b'whole'
    b'character' b',' b'safety' b'some' b'instant' b'as' b'tears' b"'" b'amateur' b'and' b'a' b'no' b'one' b'of' b'the' b'coal' b'camera' b',' b'leading' b','
    b'that' b'the' b'latter' b'insisted' b'are' b'left' b'by' b'camouflaged' b'monsters' b'in' b'a' b'video' b'manner' b'.' b'...' b'Corbet' b'would' b'need' b'to' b'prepare'
    b'this' b'situation' b'to' b'be' b'his' b'pleasant' b'decisions' b'.' b'As' b'The' b'player' b'was' b'allowed' b'as' b'versions' b'of' b'such' b'batsmen' b',' b'one'
    b'of' b'the' b'<unk>' b"'" b'predictions' b'not' b'never' b'received' b'"' b'and' b'pray' b'.' b'"' b'The' b'Formula' b'Court' b'discovered' b'a' b'cap' b'to'
    b'confirm' b'very' b'investigators' b'if' b'he' b'is' b'much' b'accepted' b'at' b'a' b'Wall' b'[' b'he' b'could' b'links' b'well' b'on' b'the' b'occupied' b'or'
    b'<unk>' b'contrast' b'.' b'Despite' b'<unk>' b'became' b'rarely' b'proud' b'of' b'it' b'from' b'Jackie' b'es' b'Maintenance' b'<unk>' b'.' b'<eos>' b'Forced' b'work' b'in'
    b'<unk>' b'and' b'Benjamin' b'star' b',' b'argued' b':' b'"' b'Paul' b'philosopher' b'Daisy' b'is' b'a' b'small' b'image' b'that' b'this' b'is' b'done' b'"'
    b'.' b'<eos>' b'According' b'to' b'Not' b'emitting' b'it' b',' b'combined' b'the' b'subtle' b'situation' b'to' b'be' b'struck' b'by' b'Yuki' b'Crash' b'Evan' b'Justice'
    b'Pupils' b'.' b'oral' b'other' b'hero' b'Cambridge' b'observed' b'in' b'the' b'1984' b'and' b'special' b'historians' b',' b'"' b'New' b'York' b'Cowan' b'of' b'Surrender'
    b'"' b',' b'having' b'become' b'very' b'enthusiastic' b'reverse' b'over' b'"' b'wives' b'"' b',' b'and' b'that' b'"' b'perhaps' b'to' b'take' b'a' b'other'
    b'@-@' b'point' b'process' b'"' b',' b'he' b'succeeded' b'his' b'<unk>' b'character' b'over' b'frogs' b'or' b'in' b'French' b',' b'his' b'state' b'1925' b'at'
    b'colouring' b'and' b'her' b'revealing' b'setting' b'Agreement' b'under' b'eliminating' b'a' b'necklace' b'of' b'decisions' b'and' b'his' b'own' b'defining' b'test' b'debates' b',' b'Second'
    b'Mohamed' b'Luis' b'Brown' b'hailed' b'at' b'its' b'speed' b'of' b'Film' b'in' b'a' b'invasion' b'of' b'<unk>' b',' b'two' b'weeks' b'all' b'of' b'Innis'
    b',' b'consolidate' b'his' b'wife' b',' b'The' b'massacre' b'after' b'Oxford' b'every' b'changeup' b'nicknamed' b'by' b'the' b'Cambridge' b'Globe' b'either' b'once' b'in' b'a'
    b'attempt' b'to' b'compete' b'in' b'a' b'short' b'treatise' b',' b'and' b'is' b'very' b'overshadowed' b'"' b'...' b'Klecksel' b'and' b'Krasinski' b'and' b'the' b'"'
    b'ending' b'a' b'publisher' b'would' b'be' b'acceptable' b'in' b'think' b'"' b',' b'declaring' b'the' b'fact' b'of' b'meaningless' b'a' b'city' b'which' b'would' b'find'
    b'that' b'.' b'<eos>' b'In' b'February' b'2003' b',' b'Mosley' b'faced' b'his' b'work' b'the' b'"' b'ovation' b'superhero' b'"' b'documentary' b'between' b'Raffles' b'and'
    b'February' b'13' b',' b'1956' b'.' b'When' b'he' b'completed' b'a' b'wide' b'age' b'for' b'the' b'New' b'Testament' b'during' b'the' b'1920s' b',' b'he'
    b'served' b'a' b'program' b'that' b'he' b'would' b'have' b'been' b'saved' b'by' b'Amiga' b'sister' b',' b'Finley' b'Leading' b',' b'and' b'flees' b'into' b'preserved'
    b'a' b'Test' b'@-@' b'player' b'and' b'<unk>' b'Mfume' b'.' b'The' b'Constructors' b'won' b'<unk>' b'cooperation' b';' b'the' b'game' b'is' b'erected' b'in' b'the'
    b'formation' b'of' b'body' b'stories' b',' b'comparing' b'medical' b'consequences' b'from' b'and' b'Express' b',' b'and' b'depressions' b'therefore' b'visited' b'cruise' b'contracts' b'from' b'rising'
    b'to' b'a' b'full' b'dispute' b'before' b'.' b'<eos>' b'<eos>' b'=' b'=' b'corresponding' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'College' b'and'
    b'O' b'One' b'=' b'=' b'<eos>' b'<eos>' b'Mosley' b',' b'appointed' b'and' b'writer' b'was' b'a' b'fictional' b'amount' b'of' b'making' b'universities' b',' b'Arthur'
    b'Shakespeare' b'(' b'FISA' b')' b'\xe2\x80\x94' b'Bell' b',' b'<unk>' b',' b'<unk>' b'against' b'Gleason' b'and' b'Hal\xc3\xa9vy' b'(' b'1996' b')' b'.' b'However' b','
    b'the' b'book' b'earned' b'collection' b'of' b'movement' b'.' b'The' b'Muslim' b'date' b'@,@' b'retirement' b'included' b'an' b'square' b'school' b'of' b'reception' b'in' b'the'
    b'conflict' b'that' b'causes' b'the' b'situation' b'a' b'style' b'after' b'all' b'of' b'these' b'II' b'on' b'a' b'medical' b'and' b'final' b'roof' b'at' b'a'
    b'\xc2\xa3' b'5' b'million' b':' b'"' b'Killer' b'the' b'<unk>' b'Bailey' b"'s" b'<unk>' b'designation' b'"' b'\xe2\x80\x94' b'in' b'which' b'Peshkin' b'wrote' b'its' b'final'
    b'"' b'grevillea' b'kiss' b',' b'Croats' b'to' b'break' b'through' b'"' b'.' b'His' b'friend' b'then' b'sought' b'guilty' b'a' b'engine' b'.' b'Two' b'women'
    b'in' b'tortoise' b'the' b'game' b'to' b'have' b'been' b'wearing' b'Liberal' b'fiction' b'or' b'Squadron' b'but' b'later' b'attached' b'to' b'rarely' b'.' b'Through' b'the'
    b'Fastra' b'(' b'1970' b')' b'Larwood' b'awarded' b'the' b'"' b'<unk>' b'"' b'role' b';' b'in' b'the' b'1980s' b'5' b',' b'many' b'players' b'less'
    b'than' b'instability' b'to' b'write' b'the' b'interactive' b'mints' b'.' b'It' b'may' b'also' b'be' b'late' b':' b'no' b'found' b'Cavalcade' b'.' b'personification' b'plays'
    b'argued' b',' b'the' b'incident' b'appointed' b'anti' b'@-@' b'televised' b'readers' b',' b'Hurt' b'Coty' b'violacea' b',' b'and' b'the' b'90' b'or' b'two' b'swept'
    b'of' b'chin' b'Membrane' b'teams' b'to' b'end' b'with' b'Midwest' b'.' b'When' b'if' b'the' b'possibility' b'improved' b'down' b'as' b'it' b'fails' b'to' b'join'
    b'been' b'originally' b'there' b',' b'when' b'Hartley' b'said' b'there' b'may' b'be' b'intermediate' b'from' b'the' b'close' b'supernatural' b'position' b'who' b'could' b'have' b'died'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.3
    loss: 5.168
    elapsed time (seconds): 141.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  4.240 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
