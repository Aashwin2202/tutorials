.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'sickness' b'.' b'Soon' b'on' b'the' b'sixteenth' b'Arkansas' b'12th' b'Division' b',' b'the' b'FIA' b'became' b'migratory' b'changes' b'watching' b'Karin' b"'\xc3\xa9tat" b'and' b'the'
    b'largest' b'basalt' b'would' b'be' b'successful' b';' b'it' b'was' b'deemed' b'for' b'the' b'immature' b'series' b'of' b'the' b'seventh' b'.' b'Mosley' b'and' b'excessive'
    b'Sherlock' b'Ludwig' b'Udell' b'(' b'nanobot' b'Woody' b'Muhammed' b',' b'a' b'son' b'of' b'G' b'fell' b'into' b'L' b'Peuple' b')' b'is' b'led' b'to'
    b'Olivier' b'throughout' b'1978' b'.' b'A' b'percent' b'of' b'numbers' b',' b'with' b'Wizards' b',' b'minimize' b'no' b'that' b'remains' b',' b'd' b'v.' b'Shirley'
    b'(' b'1831' b')' b'and' b'other' b'Burrows' b'Israel' b',' b'known' b'as' b'Rollefson' b',' b'and' b'Chicago' b'were' b'prevented' b'to' b'prepare' b'a' b'cladistic'
    b'<unk>' b'.' b'The' b'central' b'planet' b',' b'a' b'<unk>' b'1866' b',' b'set' b'for' b'a' b'total' b'@-@' b'next' b'@-@' b'down' b'Adventure' b'Edition'
    b',' b'both' b'since' b'his' b'equator' b'<unk>' b'Essex' b'Network' b'(' b'died' b'Phillip' b'Watts' b')' b',' b'in' b'the' b'<unk>' b',' b'antelope' b','
    b'Senedjemib' b'Jun\xc3\xadn' b',' b'Port' b'B.' b'18th' b',' b'Kentucky' b',' b'<unk>' b',' b'alleging' b'of' b'fertilization' b',' b'which' b'was' b'loaned' b'by' b'its'
    b'title' b'decoration' b'.' b'In' b'the' b'United' b'States' b',' b'David' b'Anne' b'and' b'Buckingham' b'Near' b'Pitman' b'are' b'considered' b'installed' b'to' b'focus' b'in'
    b'Crash' b'Singer' b'Christianisation' b'sell' b'the' b'Syfy' b'writer' b'and' b'in' b'Holsteyn' b'glancing' b'(' b'November' b'And' b'1909' b')' b',' b'until' b'which' b'water'
    b'voters' b'were' b'because' b'of' b'his' b'third' b'undisclosed' b'tenor' b',' b'Hollywood' b',' b'took' b'place' b'simultaneously' b'due' b'to' b'Microsoft' b'and' b'members' b'story'
    b',' b'made' b'it' b'.' b'This' b'attorneys' b',' b'as' b'for' b'nine' b'chapters' b',' b'possibly' b'though' b'mode' b'brigade' b'then' b'danced' b'on' b'February'
    b'12' b'day' b'.' b'<eos>' b'Normal' b'in' b'1960' b'and' b'decades' b'indicated' b'that' b'<unk>' b',' b'<unk>' b',' b'and' b'<unk>' b',' b'could' b'be'
    b'widely' b'<unk>' b';' b'when' b'nylon' b'observed' b'the' b'wet' b'exteriors' b',' b'there' b'is' b'no' b'evidence' b'that' b'Kyle' b'branded' b'us' b',' b'much'
    b'of' b'which' b'are' b'discovered' b'by' b'The' b'rat' b'compartments' b'and' b'they' b'do' b'not' b'run' b'by' b'Boise' b'State' b'Amendment' b'.' b'The' b'voting'
    b'between' b'Ceres' b'admitted' b'to' b'prescribed' b'territory' b'taking' b'place' b'or' b'their' b'development' b'.' b'Further' b',' b'however' b',' b'evidenced' b'by' b'Childs' b'by'
    b'the' b'<unk>' b'<unk>' b',' b'about' b'two' b'miles' b'(' b'2' b'@.@' b'3' b'in' b')' b'abroad' b')' b'was' b'destroyed' b'even' b'.' b'To'
    b'arrive' b'up' b',' b'they' b'could' b'have' b'been' b'expected' b'by' b'identical' b'the' b'number' b'of' b'significant' b'ages' b',' b'highly' b'over' b'the' b'past'
    b'of' b'which' b'.' b'Schmoke' b'begins' b'at' b'2' b'\xc2\xb0' b'years' b'old' b'.' b'excitement' b'to' b'decrease' b'13' b'%' b'of' b'two' b'other' b'areas'
    b'have' b'provided' b'three' b'islands' b',' b'with' b'stated' b'it' b'<unk>' b'involved' b'today' b'to' b'make' b'determine' b'@-@' b'up' b'.' b'MSHD' b'continue' b'to'
    b'be' b'been' b'dismantled' b'.' b'originate' b',' b'it' b'citing' b'a' b'green' b'constitutional' b'tract' b':' b'the' b'elevation' b'of' b'any' b'freeway' b',' b'which'
    b'are' b'driven' b'to' b'dominate' b'a' b'good' b'primary' b',' b'wide' b',' b'in' b'particular' b'between' b'her' b'body' b'releases' b'.' b'The' b'smell' b'evacuated'
    b'a' b'<unk>' b'<unk>' b'.' b'A' b'girl' b'in' b'Being' b'one' b'other' b'wooden' b'French' b'<unk>' b'means' b'their' b'snakes' b'by' b'the' b'<unk>' b'title'
    b'of' b'Caesar' b',' b'a' b'emperor' b'searing' b'smaller' b'firm' b'had' b'been' b'found' b'in' b'1821' b'.' b'It' b'has' b'attendance' b'made' b'the' b'low'
    b'state' b',' b'they' b'are' b'performed' b'.' b'The' b'game' b'has' b'preclude' b'guilty' b',' b'perhaps' b'in' b'its' b'candidacy' b',' b'so' b'the' b'generates'
    b'fund' b'playing' b'the' b'largest' b'stronger' b'of' b'predators' b'accomplish' b',' b'or' b'broad' b'areas' b';' b'Ireland' b'today' b'described' b'satisfying' b',' b'with' b'sequence'
    b'punting' b'a' b'group' b'of' b'137' b'miles' b'by' b'6' b'feet' b'(' b'900' b'mi' b')' b'above' b'its' b'massive' b'in' b'London' b'.' b'The'
    b'island' b'of' b'Ceres' b'became' b'deeply' b'claims' b'to' b'indicate' b'that' b'although' b'they' b'will' b'step' b'up' b'likely' b'and' b'directly' b'they' b'could' b'be'
    b'withdrawn' b'to' b'floodplain' b',' b'so' b'in' b'safe' b'they' b'use' b'they' b'went' b'up' b'.' b'One' b'runoff' b',' b'his' b'<unk>' b'growing' b','
    b'no' b'efforts' b'or' b'1726' b',' b'would' b'be' b'heard' b'arches' b',' b'and' b'that' b'they' b'occur' b'in' b'Melbourne' b'to' b'these' b'produce' b'35'
    b'hours' b',' b'including' b'goals' b'while' b'moral' b',' b'with' b'the' b'westernmost' b'twist' b'of' b'earthquakes' b'.' b'In' b'the' b'courtyard' b'of' b'Dawn' b','
    b'they' b'are' b'presumed' b'sought' b'.' b'While' b'this' b'(' b'component' b'<unk>' b'entire' b')' b'is' b'set' b'atop' b'the' b'basalt' b'<unk>' b',' b'visual'
    b',' b'and' b'rarely' b'down' b'their' b'own' b'low' b'back' b'behind' b'his' b'strong' b'species' b'reorganised' b'by' b'food' b',' b'with' b'updating' b'the' b'bush'
    b'@-@' b'houses' b'\xe2\x80\x9c' b'or' b'stage' b',' b'could' b'be' b'recommended' b'36' b'@.@' b'46' b'%' b'.' b'<unk>' b'between' b'Ceres' b'have' b'controversial' b','
    b'and' b'some' b'ministers' b'settled' b'until' b'making' b'them' b'or' b'invertebrates' b'bright' b'birds' b'.' b'crystalline' b'probe' b'often' b',' b'and' b'just' b'arched' b'preserves'
    b'in' b'cameraman' b'is' b'usually' b'lasting' b'.' b'The' b'cell' b'moved' b'for' b'invasions' b',' b'but' b'attached' b'to' b'a' b'shallow' b'sun' b',' b'PAVN'
    b'notoriously' b'made' b'out' b'another' b'edge' b'available' b'.' b'Cobain' b'ought' b'had' b'been' b'reported' b'as' b'State' b'in' b'the' b'Most' b'areas' b'.' b'All'
    b'of' b'these' b'more' b'common' b'features' b'include' b'continuing' b',' b'either' b'cannot' b'disrupt' b'food' b',' b'the' b'Democrats' b'<unk>' b'some' b'or' b'caught' b'it'
    b'to' b'their' b'large' b'reason' b'.' b'If' b'this' b'bird' b'occurs' b'up' b'it' b',' b'Fatima' b'produces' b'<unk>' b'.' b'<eos>' b'Relay' b'cross' b'feed'
    b'in' b'1987' b',' b'as' b'may' b'be' b'in' b'<unk>' b',' b'intending' b'to' b'use' b'$' b'2' b'million' b'%' b'of' b'HIV' b'content' b','
    b'in' b'which' b'Ha' b'Dodson' b'began' b'court' b'near' b'12' b':' b'30' b'in' b'the' b'stumps' b'of' b'the' b'males' b'.' b'This' b'behavior' b'may'
    b'be' b'postal' b',' b'setting' b',' b'they' b'they' b'did' b'manufacturing' b'infested' b'contexts' b',' b'calls' b'to' b'be' b'Attacks' b'.' b'An' b'wing' b'decline'
    b'also' b'carries' b'typically' b'problems' b'to' b'night' b',' b'that' b'they' b'are' b'difficult' b'to' b'grow' b'that' b'they' b'will' b'begin' b'in' b'supernova' b'or'
    b'mate' b'.' b'Digital' b'scales' b'intended' b'for' b'volume' b'instead' b'around' b'drown' b'on' b'other' b'islands' b',' b'are' b'effectively' b'usually' b'organized' b'.' b'<eos>'
    b'A' b'common' b'parallax' b'of' b'cricket' b',' b'which' b'may' b'be' b'reduced' b'to' b'20' b'%' b',' b'and' b'kidnapping' b',' b'energy' b',' b'burned'
    b'fitness' b'over' b'orbital' b'Nabataeans' b'and' b'select' b'water' b'.' b'<eos>' b'There' b'to' b'some' b'other' b'brownish' b'languages' b',' b'their' b'body' b'population' b'suffered'
    b'<unk>' b',' b'which' b'may' b'be' b'effective' b'.' b'<eos>' b'The' b'kakapo' b'remaining' b'into' b'its' b'gases' b'as' b'their' b'structural' b'illness' b'(' b'i.e.'
    b')' b'.' b'In' b'January' b'2013' b',' b'and' b'the' b'<unk>' b'Movement' b'(' b'Hussey' b',' b'the' b'village' b'below' b'formally' b'European' b'pre' b'@-@'
    b'mRNA' b')' b',' b'they' b'can' b'be' b'used' b'to' b'Waterloo' b'cougars' b'.' b'<unk>' b'of' b'Priest' b'is' b'said' b'to' b'be' b'destroyed' b'by'
    b'some' b'<unk>' b'to' b'find' b'themselves' b'or' b'clause' b'.' b'<unk>' b'organizations' b'throughout' b'inappropriate' b'and' b'organs' b'only' b'had' b'<unk>' b'<unk>' b'throughout' b'the'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 210.6
    loss: 5.168
    elapsed time (seconds): 141.2


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  57.967 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
