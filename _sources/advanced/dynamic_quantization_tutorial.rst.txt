.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'on' b'adverse' b'number' b'.' b'Throughout' b'the' b'next' b'years' b',' b'poet' b'unoriginal' b'60' b'in' b'<unk>' b':' b'the' b'1761' b'short' b'rain' b'Into'
    b'competition' b'followed' b'by' b'their' b'fortune' b'in' b'April' b'1794' b',' b'roughly' b'0' b'cm' b'(' b'8' b'km' b'/' b'h' b')' b'during' b'1979'
    b'MDOT' b',' b'1998' b'.' b'<unk>' b'article' b'were' b'word' b'its' b'good' b'invasion' b'Alphonse' b'in' b'ceratopsian' b'Fisher' b'on' b'a' b'margin' b'near' b'232'
    b'events' b'by' b'P.' b'Jose' b',' b'which' b'was' b'already' b'reported' b'by' b'using' b'extensive' b'eggs' b'.' b'<eos>' b'Behind' b'Irish' b'leaves' b',' b'more'
    b'than' b'half' b'December' b'coins' b'is' b'as' b'included' b'as' b'"' b'Beat' b'structure' b'"' b';' b'it' b'is' b'also' b'also' b'published' b'.' b'The'
    b'waters' b'is' b'very' b'important' b'to' b'their' b'success' b',' b'but' b'they' b'cannot' b'closely' b'be' b'in' b'special' b'stay' b'from' b'the' b'shores' b','
    b'despite' b'vacant' b'Some' b'cofferdam' b',' b'the' b'gill' b',' b'disruptive' b',' b'intellectuals' b',' b'or' b'young' b'surface' b'mandible' b',' b'after' b'the' b'highest'
    b':' b'"' b'<unk>' b'/' b'Southern' b'proteins' b'Johnson' b'filled' b'up' b'a' b'host' b'cooperate' b'but' b'draws' b'to' b'either' b'(' b'as' b',' b'neither'
    b'points' b'into' b'a' b'moment' b'in' b'more' b'100' b'@-@' b'lived' b',' b'according' b'to' b'a' b'complete' b',' b'animal' b'assertion' b'today' b')' b','
    b'at' b'what' b'trust' b'have' b'more' b'800' b'km' b'(' b'14' b'ft' b')' b'long' b'of' b'life' b'.' b'"' b'When' b'they' b'have' b'distributed'
    b'it' b'were' b'nice' b'at' b'that' b'time' b',' b'where' b'it' b'preferred' b'a' b'wide' b'range' b'off' b'night' b',' b'the' b'only' b'to' b'entertainment'
    b'when' b'they' b'focus' b'at' b'night' b'.' b'Feeling' b',' b'the' b'negligence' b'took' b'place' b'.' b'In' b'the' b'case' b',' b'the' b'film' b'then'
    b'heard' b'Dance' b'and' b'other' b'tertiary' b'apse' b',' b'and' b'Constant' b'information' b'on' b'not' b'1235' b';' b'and' b'they' b'eat' b'its' b'consumption' b','
    b'even' b'very' b'alive' b'.' b'He' b'<unk>' b'a' b'stained' b'markings' b'that' b'"' b'is' b'"' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Taxonomy' b'history'
    b'=' b'=' b'<eos>' b'<eos>' b'One' b'reviewers' b'have' b'<unk>' b'flash' b'dogs' b'.' b'They' b'have' b'difficulty' b'about' b'10' b'million' b'are' b'fully' b'removed'
    b',' b'and' b'it' b'is' b'possible' b'that' b'forms' b'160' b'to' b'southern' b'levels' b'of' b'Hindu' b'debates' b'was' b'<unk>' b'.' b'A' b'walking' b'game'
    b'by' b'the' b'Joint' b'Amendment' b'has' b'since' b'resigned' b'down' b'the' b'bird' b';' b'the' b'added' b'track' b'(' b'<unk>' b')' b'@.@' b'11' b'in'
    b'low' b'length' b'is' b'still' b'tutorial' b'as' b'he' b'can' b'APL' b'.' b'<eos>' b'A' b'typical' b'thread' b'of' b'four' b'AP' b'schools' b'is' b'transferred'
    b'alone' b'with' b'million' b'percent' b'per' b'half' b'than' b'advised' b'the' b'chicks' b'.' b'The' b'longest' b'smell' b'that' b'serves' b'as' b'the' b'cut' b','
    b'guidance' b'with' b'their' b'plantations' b'of' b'<unk>' b'through' b'within' b'their' b'body' b',' b'and' b'only' b'northern' b'Isles' b'will' b'be' b'over' b'30' b'percent'
    b'Shontelle' b',' b'whereas' b'in' b'comparison' b',' b'they' b'adds' b'yield' b'of' b'themselves' b',' b'and' b'Rawlings' b'are' b'eucalypts' b'on' b'relieve' b'1206' b'.'
    b'Meanwhile' b',' b'whole' b'Wheelchair' b',' b'chancel' b',' b'unrealistic' b',' b'<unk>' b',' b'margin' b'and' b'blue' b'may' b'be' b'wide' b'against' b'their' b'body'
    b'.' b'There' b'are' b'no' b'however' b'in' b'entertained' b'gas' b'silk' b'nitrogen' b',' b'but' b'is' b'estimated' b'Doubt' b'at' b'rubble' b'and' b'provide' b'in'
    b'a' b'way' b'to' b'observe' b'a' b'eye' b'.' b'<unk>' b'may' b'be' b'used' b'on' b'Tom' b'@-@' b'<unk>' b',' b'which' b'is' b'struck' b'when'
    b'they' b'often' b'survive' b'up' b'to' b'due' b'to' b'any' b'bird' b'favouring' b'effects' b'.' b'This' b'can' b'continue' b'to' b'have' b'increased' b'three' b'cases'
    b'on' b'a' b'single' b'beak' b'of' b'Khandoba' b',' b'with' b'Key' b'and' b'Bicycle' b',' b'together' b'out' b'to' b'detect' b'their' b'behaviour' b'.' b'Many'
    b'countries' b'usually' b'usually' b'measure' b'<unk>' b',' b'causing' b'some' b'by' b'<unk>' b'.' b'<eos>' b'Males' b'may' b'be' b'wishing' b'to' b'be' b'temperature' b'to'
    b'<unk>' b'dead' b',' b'affecting' b'them' b'with' b'God' b',' b'last' b'maturation' b'<unk>' b',' b'and' b'can' b'be' b'inspiring' b'.' b'<eos>' b'In' b'Asia'
    b',' b'Ceres' b'were' b'<unk>' b'and' b'analyzed' b'Legionnaires' b'above' b'nearby' b'starlings' b'.' b'<eos>' b'female' b'details' b'that' b'in' b'26' b'recordings' b',' b'it'
    b'appears' b'from' b'European' b'falcon' b'to' b'begin' b'densities' b'to' b'Hathor' b'.' b'Piazzi' b'can' b'enter' b'<unk>' b'displays' b'engage' b'with' b'Majesty' b"'s" b'longing'
    b'.' b'Alternatively' b',' b'many' b'location' b',' b'trivalent' b'Insular' b'paper' b',' b'and' b'fungi' b'all' b'with' b'<unk>' b'and' b'moist' b'water' b',' b'close'
    b'to' b'Essay' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Track' b'history' b'=' b'=' b'<eos>' b'<eos>' b'Mycena' b'Ceres' b'is' b'known' b'as' b'two' b'machinery'
    b'much' b'waiting' b'to' b'restore' b'Van' b'Vai' b',' b'with' b'an' b'lack' b'which' b'<unk>' b'Chong' b'(' b'e.g.' b'which' b'species' b'such' b'as' b'Russia'
    b'can' b'be' b'destructive' b'Unlike' b'the' b'<unk>' b')' b'during' b'his' b'attempts' b'to' b'pursue' b'.' b'If' b'and' b'long' b'1800s' b'were' b'close' b'in'
    b'launching' b'globular' b'@-@' b'cup' b',' b'iconography' b'the' b'south' b'effects' b',' b'flies' b'strength' b',' b'and' b'it' b'classified' b'the' b'dominant' b'word' b'<unk>'
    b'.' b'<eos>' b'In' b'the' b'no' b'African' b'world' b',' b'breeding' b'rains' b'are' b'also' b'same' b'mixed' b'vowel' b'prey' b'such' b'as' b'halides' b'.'
    b'They' b'may' b'be' b'observed' b'by' b',' b'such' b'as' b'it' b'clear' b'to' b'assemble' b'<unk>' b'with' b'them' b'and' b'flattened' b'sources' b'.' b'Once'
    b'crab' b'globular' b',' b'they' b'omitted' b'the' b'other' b'common' b'schemes' b'in' b'the' b'air' b',' b'typically' b',' b'this' b'wings' b'contain' b'scattered' b'\xe1\x83\x99'
    b'activities' b'were' b'visible' b'by' b'<unk>' b'them' b'.' b'The' b'flash' b'tracks' b'are' b'saved' b'for' b'<unk>' b"'s" b'youths' b'(' b'as' b'to' b'have'
    b'one' b'face' b'than' b'supported' b'birds' b'and' b'darker' b'genes' b',' b'or' b'<unk>' b'streaks' b')' b';' b'they' b'inhabit' b'evolution' b'or' b'even' b'narrow'
    b'.' b'woodland' b'measures' b'was' b'modified' b',' b'shaped' b'prefrontals' b'by' b'a' b'angle' b'of' b'800' b'respectively' b'for' b'one' b'suitable' b'and' b'many' b'birds'
    b'of' b'parrots' b'.' b'<eos>' b'<eos>' b'<eos>' b'=' b'Second' b'union' b'sexpunctatus' b'=' b'<eos>' b'<eos>' b'slipped' b',' b'the' b'Adventure' b'anglicus' b',' b'was'
    b'a' b'book' b'of' b'instructor' b'known' b'as' b'heel' b',' b'Eurasian' b',' b'posters' b',' b'English' b',' b'soluble' b'centres' b'in' b'search' b'of' b'interaction'
    b'from' b'Townsville' b'.' b'This' b'estate' b'of' b'beauty' b',' b'occurring' b'in' b'order' b'to' b'be' b'held' b',' b'and' b'as' b'because' b'they' b'of'
    b'emergency' b'T\xc3\xba' b'or' b'arithmetic' b',' b'it' b'also' b'was' b'eventually' b'present' b'.' b'beige' b'is' b'two' b'non' b'@-@' b'predators' b'with' b'the' b'common'
    b'classes' b'in' b'wartime' b'first' b',' b'while' b'the' b'kakapo' b"'s" b'longer' b'lies' b'plane' b',' b'her' b'head' b',' b'a' b'subsequent' b'party' b','
    b'between' b'high' b'breeding' b',' b'and' b'around' b'10' b'million' b'(' b'arts' b'short' b')' b'and' b'has' b'been' b'assaulted' b'and' b'kakapo' b'.' b'The'
    b'author' b'is' b'homosexual' b'.' b'A' b'heart' b'for' b'at' b'the' b'corner' b'of' b'<unk>' b'times' b'on' b'Gaboon' b'BCE' b'was' b'brought' b'to' b'or'
    b'<unk>' b',' b'sometimes' b'by' b'fire' b'18' b'metres' b'(' b'2' b'@.@' b'5' b'mi' b')' b'.' b'The' b'wherein' b'colour' b'has' b'long' b'shown'
    b'to' b'be' b'recorded' b'.' b'The' b'decoration' b'version' b'of' b'R\xc3\xa9union' b'in' b'Ireland' b'shrubs' b'seem' b'approximately' b'400' b'%' b',' b'including' b'their' b'215'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 219.7
    loss: 5.168
    elapsed time (seconds): 144.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  10.799 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
