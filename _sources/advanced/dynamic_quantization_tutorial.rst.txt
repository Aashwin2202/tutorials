.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'of' b'light' b',' b'continues' b'to' b'have' b'different' b'a' b'independent' b'assessment' b'save' b'much' b'of' b'ten' b'countries' b'.' b'In' b'the' b'Anglo' b'@-@'
    b'third' b'night' b'the' b'311' b'number' b'of' b'five' b'teams' b'are' b'<unk>' b'idealist' b',' b'a' b'pair' b'of' b'carvings' b',' b'and' b'caravan' b'violence'
    b'.' b'The' b'fleet' b'is' b'possible' b'to' b'reach' b'the' b'simultaneous' b'spots' b'of' b'supporting' b'<unk>' b',' b'coffin' b',' b'airworthiness' b',' b'<unk>' b','
    b'bombardments' b',' b'nestlings' b',' b'responding' b',' b'<unk>' b',' b'and' b'Americas' b'.' b'They' b'remained' b'mainland' b'as' b'they' b'days' b'of' b'their' b'base'
    b'(' b'not' b'unlike' b'<unk>' b')' b'.' b'Therefore' b',' b'other' b'mature' b'mammals' b'were' b'avoiding' b'in' b'power' b'.' b'About' b'the' b'seventh' b'four'
    b'months' b',' b'when' b'there' b'are' b'entering' b'them' b'to' b'have' b'his' b'wife' b"'s" b'ornamented' b'ground' b',' b'and' b'that' b'some' b'males' b'provide'
    b'into' b'one' b'breaks' b'and' b'Jupiter' b'able' b'to' b'be' b'classified' b'for' b'westward' b'functional' b'infections' b'.' b'If' b'attaining' b'for' b'Palenque' b'at' b'times'
    b'of' b'he' b'preparing' b'them' b'except' b'it' b'all' b'.' b'He' b'then' b'found' b'"' b'progressively' b'slightly' b'a' b'1265' b'posture' b'"' b'.' b'"'
    b'The' b'smell' b'of' b'the' b'Meaning' b'was' b'one' b'of' b'those' b'to' b'find' b'state' b'they' b'are' b'<unk>' b'just' b'to' b'merit' b'outside' b'enough'
    b'?' b'"' b'.' b'She' b'called' b'it' b'"' b'so' b'appearance' b'by' b'kind' b',' b'approved' b'for' b'a' b'high' b'"' b'song' b',' b'after'
    b'her' b'male' b'male' b'was' b'indicated' b'to' b'be' b',' b'day' b',' b'all' b'sarsens' b'and' b'even' b'maintained' b'it' b'into' b'the' b'song' b'.'
    b'It' b'whereas' b'krek' b'remains' b'Flash' b'to' b'build' b'a' b'precedent' b',' b'and' b'he' b'does' b'not' b'continued' b'even' b'when' b'.' b'but' b'these'
    b'birds' b'do' b'not' b'leave' b'<unk>' b'Nicole' b'categories' b',' b'mayoral' b'binding' b'powers' b'were' b'correct' b'.' b'Howard' b'seems' b'that' b'<unk>' b'Jejuri' b','
    b'circulation' b'<unk>' b'Kay' b',' b'birch' b'Europeans' b',' b'and' b'merchants' b'were' b'broken' b'to' b'<unk>' b';' b'they' b'were' b'an' b'considering' b'Hairan' b'in'
    b'1922' b'.' b'The' b'original' b'enlarged' b'focus' b'between' b'Dublin' b'and' b'her' b'relationship' b'on' b'these' b'artefacts' b'show' b'the' b'daughter' b'seeks' b'to' b'be'
    b'seen' b',' b'that' b'pay' b'With' b'him' b'having' b'trouble' b'"' b'votes' b'to' b'each' b'context' b'"' b'.' b'<unk>' b'Bunker' b'introduced' b'in' b'a'
    b'Directions' b'to' b'Sentinel' b'and' b'internal' b',' b'"' b'with' b'an' b'sex' b'part' b'such' b'until' b'.' b'A' b'deity' b'of' b'Guillermo' b'Julius' b'Newsday'
    b':' b'one' b'campaigned' b'!' b'B.' b'S.' b'<unk>' b'(' b'My' b'<unk>' b')' b']' b'.' b'It' b'is' b'one' b'of' b'those' b'reasons' b'"'
    b'and' b'"' b'He' b'is' b'a' b'poor' b'For' b'low' b'to' b'a' b'intricate' b',' b'rather' b'honest' b';' b'hence' b'or' b'particularly' b'something' b'<unk>'
    b'.' b'"' b'B.' b'verify' b'that' b'"' b'on' b'a' b'sword' b'that' b'it' b'presided' b'was' b'still' b'quite' b'good' b'were' b'mile' b'as' b'loyal'
    b'him' b'so' b'<unk>' b'for' b'BC' b',' b'whether' b'they' b'to' b'have' b'of' b'a' b'thing' b'.' b'When' b'Mason' b'may' b'sing' b'so' b'African'
    b'genes' b'that' b"'ll" b'hardly' b'core' b'when' b'they' b'think' b',' b'"' b'<unk>' b'and' b'peptides' b'deep' b'are' b'being' b'<unk>' b'to' b'a' b'fox'
    b"'s" b'vocal' b'axis' b'to' b'its' b'dedication' b'"' b'Manders' b'"' b',' b'whereas' b'there' b'next' b'35' b'descriptions' b'of' b'different' b'stories' b'describing' b'it'
    b'.' b'<eos>' b'Shortly' b'after' b'the' b'exception' b'on' b'vapor' b',' b'female' b'officers' b'as' b'a' b'little' b'Romanians' b'of' b'nature' b',' b'they' b'were'
    b'known' b'to' b'represent' b'diseases' b'of' b'less' b'contrived' b"'s" b'true' b'interaction' b'.' b'Another' b'flocks' b'starts' b'around' b'the' b'stadium' b'fighting' b'and' b'cameras'
    b',' b'measuring' b'unknown' b'or' b'so' b'when' b'it' b'is' b'certain' b',' b'his' b'male' b'function' b'in' b'1839' b'with' b'it' b',' b'Sora' b'<unk>'
    b'the' b'costumes' b'to' b'prove' b'the' b'orbit' b'of' b'Google' b',' b'so' b'also' b'morel' b'persistent' b'pressure' b'who' b'should' b'be' b'gone' b'during' b'to'
    b'calibre' b'the' b'structure' b'of' b'her' b'side' b'.' b'Starting' b'with' b'using' b',' b'their' b'abilities' b'and' b'<unk>' b'are' b'allowed' b'.' b'Some' b'of'
    b'those' b'necessary' b',' b'with' b'two' b'other' b'Rh\xc3\xb4ne' b'invertebrates' b'of' b'Sb2S3' b'over' b'the' b'Sun' b',' b'is' b'excluded' b'enough' b'to' b'embody' b'@-@'
    b'term' b'stump' b'of' b'severe' b'periods' b'.' b'<unk>' b'females' b'shorten' b'six' b'fours' b'show' b'whole' b'.' b'Also' b'paths' b'on' b',' b'Spectrum' b','
    b'2018' b'and' b'predators' b'may' b'be' b'made' b'during' b'their' b'one' b'life' b'.' b'Madhvacharya' b'then' b'Jeffries' b'from' b'their' b'intention' b'its' b'job' b'grew'
    b'lists' b';' b'a' b'flock' b'called' b'boxes' b'that' b'necessary' b'it' b'difficult' b'in' b'some' b'fiction' b'difficulty' b'Inari' b'<unk>' b'from' b'a' b'mixture' b'of'
    b'connections' b'.' b'He' b"'re" b'stable' b'for' b'the' b'rough' b'agenda' b',' b'and' b'<unk>' b'for' b'title' b'in' b'humans' b'who' b'attempts' b'to' b'to'
    b'produce' b'reflection' b'.' b'However' b',' b'the' b'pair' b'have' b'four' b'dozen' b'H\xc3\xa4meenmaa' b',' b'25' b'or' b'8' b'm' b'per' b'game' b'.' b'Wally'
    b'peckii' b'explains' b'that' b'<unk>' b'may' b'be' b'spread' b'to' b'humans' b'out' b'employees' b'(' b'23' b'%' b',' b'and' b'ability' b'to' b'explain' b'a'
    b'four' b'female' b'species' b',' b'or' b'die' b'to' b'unranked' b'free' b'Australians' b'\xe2\x80\x94' b'that' b'\xe6\x94\xbb\xe6\xae\xbb\xe6\xa9\x9f\xe5\x8b\x95\xe9\x9a\x8a' b',' b'attractive' b',' b'though' b'one' b'species' b'has'
    b'long' b'"' b'these' b'<unk>' b'pursued' b'or' b'forbidden' b'them' b'"' b')' b'and' b'says' b'that' b'a' b'host' b'can' b'be' b'blown' b'.' b'However'
    b',' b'it' b'may' b'be' b'possible' b'or' b'the' b'<unk>' b'?' b'convinces' b'the' b'absolute' b'limiting' b'topics' b'of' b'Elrane' b'.' b'One' b'time' b'after'
    b'he' b'is' b'true' b'by' b'the' b'Vanya' b'in' b'a' b'Noisy' b'apg' b':' b'/' b'<unk>' b'/' b'<unk>' b'\xe2\x80\x93' b'8' b',' b'New' b'Zealand'
    b',' b'about' b'one' b'additional' b'or' b'half' b'length' b'of' b'those' b'41' b'kilometers' b'(' b'3' b'@.@' b'5' b'mi' b')' b',' b'and' b'cheaper'
    b'them' b'near' b'head' b',' b'evil' b'.' b'In' b'that' b'fat' b',' b'surface' b'numbers' b'of' b'increasingly' b'parapet' b',' b'can' b'be' b'classified' b'as'
    b'they' b'call' b'down' b'difficult' b'themselves' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Legends' b'=' b'=' b'=' b'<eos>' b'<eos>' b'The' b'origins' b'of'
    b'aerodromes' b'is' b'requiring' b'.' b'The' b'type' b'pattern' b'uses' b'in' b'a' b'pose' b',' b'which' b'is' b'shipwrecked' b'theory' b'by' b'a' b'magazine' b','
    b'so' b'it' b'progressing' b'representing' b'each' b'other' b'.' b'Despite' b'the' b'role' b'of' b'chamber' b',' b'it' b'is' b'often' b'associated' b'during' b'they' b'choose'
    b';' b'but' b'only' b'have' b'a' b'dull' b'rectangular' b'nest' b'into' b'their' b'view' b'.' b'disappearance' b'have' b'yardage' b'that' b'may' b'some' b'of' b'females'
    b'who' b'have' b'worked' b'on' b'<unk>' b'.' b'Alternatively' b',' b'they' b'are' b'"' b'warm' b'to' b'prevent' b'expensive' b'fine' b'dealing' b'with' b'control' b'that'
    b'are' b'more' b'vegetarian' b',' b'<unk>' b',' b'needed' b'to' b'be' b"'" b'elaborate' b',' b'striking' b'to' b'as' b"'" b'eggs' b"'" b'(' b'control'
    b')' b'.' b'"' b'The' b'<unk>' b'and' b'the' b'nominate' b'<unk>' b'trade' b'is' b'<unk>' b'by' b'the' b'cap' b'.' b'<eos>' b'Kensal' b'behaviour' b'occur'
    b'down' b'around' b'up' b'names' b',' b'cartilage' b',' b'protein' b',' b'and' b'copulation' b'calls' b'.' b'These' b'distances' b'of' b'their' b'nest' b',' b'their'
    b'ability' b'to' b'have' b'difficult' b'so' b'in' b'their' b'bite' b'.' b'Males' b'have' b'attributed' b'to' b'a' b'lack' b'of' b'fluid' b'sites' b'.' b'Males'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 224.6
    loss: 5.168
    elapsed time (seconds): 141.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  12.639 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
