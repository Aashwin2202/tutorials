.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'that' b'of' b'the' b'black' b',' b'under' b'"' b'bish\xc5\x8djo' b'<unk>' b'"' b'they' b'slipped' b'in' b'hunting' b'.' b'MacDonald' b'was' b'a' b'member' b'of'
    b'six' b'months' b',' b'and' b'in' b'19th' b'Division' b"'s" b'picture' b'of' b'revenue' b'a' b'altered' b'motion' b'of' b'Arbeideren' b',' b'followed' b'for' b'other'
    b'sisters' b'.' b'On' b'an' b'short' b'series' b'of' b'a' b'booklet' b',' b'Engineering' b'received' b'Illinois' b'stand' b'at' b'the' b'1980s' b',' b'Big' b'World'
    b'Hears' b',' b'and' b'engaging' b'a' b'eleventh' b'third' b'year' b'after' b'the' b'ensuing' b'half' b'of' b'Virginia' b'herself' b'.' b'The' b'fact' b'were' b'also'
    b'two' b'years' b'before' b'returning' b'into' b'Introduced' b',' b'former' b'airfields' b'.' b'Carol' b'from' b'1933' b'declared' b'a' b'social' b'coaching' b'peripheral' b'"' b'titles'
    b'to' b'playing' b'stone' b'shirts' b'AD' b'and' b'heroes' b'.' b'"' b'<eos>' b'<eos>' b'=' b'=' b'Reception' b'=' b'=' b'<eos>' b'<eos>' b'The' b'majority'
    b'of' b'a' b'first' b'film' b'into' b'American' b'change' b'came' b'from' b'Raffles' b',' b'when' b'a' b'player' b'Albert' b',' b'and' b'The' b'FIA' b'was'
    b'assigned' b'to' b'his' b'father' b'.' b'Peshkin' b'speculates' b'that' b'they' b'"' b'clear' b'into' b'a' b'spiritual' b'bank' b'"' b'from' b'a' b'"' b'white'
    b'and' b'<unk>' b'butterfly' b'...' b'of' b'the' b'eye' b'batsman' b'"' b'in' b'the' b'Princeton' b'astronomical' b'Voice' b',' b'which' b'ibis' b'stated' b'that' b'the'
    b'whole' b'network' b'and' b'a' b'African' b'Sixth' b'crime' b'system' b'was' b'"' b'first' b'needed' b'another' b'line' b'whom' b'is' b'in' b'characteristic' b"'s" b'<unk>'
    b'and' b'future' b'life' b'"' b'.' b'They' b'take' b'the' b'language' b'in' b'the' b'North' b'Hollywood' b'Civil' b'Hears' b',' b'both' b'Network' b'included' b'off'
    b'the' b'planet' b'of' b'The' b'slender' b'Rangers' b'serving' b'until' b'the' b'race' b'receiving' b'a' b'guitar' b'<unk>' b'to' b'medium' b',' b'illustrations' b',' b'and'
    b'red' b'analyses' b'.' b'Ireland' b'offers' b'43' b'%' b'of' b'more' b'destroyed' b'games' b',' b'by' b'its' b'lone' b'@-@' b'longest' b'party' b'half' b'requires'
    b'a' b'draft' b'can' b'be' b'applied' b'as' b'"' b'full' b',' b'separated' b'chemistry' b'"' b'.' b'Another' b'example' b'was' b'collected' b'and' b'was' b'discovered'
    b'by' b'poorly' b'or' b'Mr' b'Warner' b'prompted' b'by' b'840' b'<unk>' b'Sun' b'<unk>' b'presbytery' b'by' b'readability' b'to' b'aid' b'in' b'bubbles' b'.' b'<eos>'
    b'The' b'story' b'of' b"'l" b'Hewitt' b'Scotland' b'returned' b'to' b'it' b'on' b'a' b'2D' b'basis' b':' b'a' b'book' b',' b'stated' b'players' b','
    b'are' b'just' b'"' b'possible' b'<unk>' b'or' b'wonderful' b'"' b'hemlock' b'ignorance' b'and' b'introduced' b'it' b'to' b'urban' b'other' b'philosophers' b'.' b'<eos>' b'Published'
    b'literary' b'lessons' b'Kamerkoor' b'will' b'be' b'regarded' b'as' b'Ibotenic' b'nestlings' b'and' b'convinced' b'their' b'new' b'wife' b'<unk>' b'for' b'a' b'Center' b'to' b'sleep'
    b',' b'after' b'generic' b'bonus' b'events' b'.' b'The' b'church' b'are' b'2D' b'by' b'John' b'M.' b'accepting' b'al' b'The' b'<unk>' b'All\xc4\x81h' b'as' b'donation'
    b'charges' b'.' b'However' b',' b'as' b'D' b'McCain' b'are' b'both' b'to' b'obtain' b'it' b'with' b'Westchester' b'called' b'it' b'on' b'a' b'farm' b'Category'
    b'4' b'\xc2\xb5m' b'"' b'rarely' b'yet' b'round' b'like' b'above' b',' b'"' b'while' b'that' b'academics' b'has' b'tacit' b',' b'but' b'never' b'is' b'being'
    b'said' b'.' b'If' b'On' b'his' b'hand' b'two' b'times' b'and' b'naturally' b',' b'it' b'probably' b'usually' b'ballistic' b',' b'an' b'whole' b'<unk>' b'for'
    b'Hutch' b',' b'genre' b',' b'whites' b',' b'McDonald' b',' b'<unk>' b',' b'<unk>' b',' b'or' b'spawn' b'.' b'Until' b'this' b'book' b'the' b'human'
    b'than' b'someone' b'with' b'inscriptions' b',' b'as' b'only' b'so' b'resulting' b'his' b'final' b'form' b'in' b'this' b'way' b',' b'Bobby' b'Ben' b'(' b'1603'
    b'<unk>' b')' b';' b'the' b'fungus' b'starts' b'a' b'book' b',' b'a' b'post' b'@-@' b'volume' b'goal' b'as' b'3' b':' b'never' b'cooled' b'with'
    b'having' b'greater' b'portrayal' b',' b'and' b'the' b'other' b'variable' b'symbol' b'of' b'the' b'masterpiece' b'Commandments' b'on' b'6' b'November' b'he' b'believes' b'motivating' b'them'
    b'to' b'her' b'feet' b'.' b'Writing' b'on' b'this' b'novel' b',' b'Mosley' b'found' b'empty' b'gates' b'some' b'get' b'what' b'they' b'have' b'altered' b'victims'
    b'of' b'offence' b'.' b'<eos>' b'The' b'social' b'changes' b'of' b'his' b'one' b'mass' b'or' b'Jews' b'reconstructed' b'26' b':' b'ingredients' b'cannot' b'be' b'seen'
    b'by' b'other' b'other' b'<unk>' b',' b'which' b'never' b'passages' b'in' b'their' b'succession' b'on' b'their' b'teacher' b'down' b'Farther' b'expectations' b'from' b'a' b'edit'
    b'.' b'That' b'night' b'do' b'not' b'relate' b'to' b'the' b'consideration' b'when' b'they' b'cannot' b'be' b'being' b'mentioned' b'.' b'"' b'Yes' b'are' b'assume'
    b'<unk>' b'to' b'inhabit' b'his' b'press' b'"' b'.' b'However' b'on' b'condition' b'in' b'time' b'from' b'March' b'2010' b',' b'both' b'writer' b'"' b'The'
    b'Why' b'!' b'assigns' b'many' b'<unk>' b'places' b'"' b':' b'them' b'forward' b'with' b'their' b'emotional' b'first' b'title' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Naming' b'of' b'era' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Institute' b'and' b'First' b'primary' b'=' b'=' b'=' b'<eos>' b'<eos>'
    b'The' b'quest' b'into' b'Anonymous' b'has' b'rays' b'in' b'voices' b',' b'with' b'music' b',' b'destroying' b'a' b'ancient' b'epidemic' b',' b'Guitar' b',' b'and'
    b'Tennessee' b'.' b'In' b'another' b'Augustan' b'Nights' b"'s" b'second' b'Arab' b'translation' b',' b'nebula' b'learned' b'that' b'Ceres' b'courses' b'Solo' b'Goldman' b'and' b'oats'
    b';' b'he' b'commented' b':' b'"' b'O' b"'t" b'everything' b'"' b'use' b'is' b'assembled' b'by' b'Ken' b'Amazon' b',' b'unless' b'her' b'wife' b'earned'
    b'the' b'story' b'as' b'himself' b'state' b'at' b':' b'"' b'sets' b'cope' b'in' b'that' b'night' b'could' b'be' b'able' b'to' b'escape' b'enemies' b'.'
    b'I' b'am' b'flexibility' b'.' b'I' b'<unk>' b'two' b'questions' b',' b'bassline' b'<unk>' b'help' b'up' b'yet' b'(' b'not' b'poisonous' b'action' b',' b'sets'
    b',' b'<unk>' b'cm' b')' b'.' b'"' b'The' b'latter' b'writes' b'that' b'"' b'it' b'is' b'less' b'generally' b'traps' b'to' b'be' b'worrying' b'on'
    b'15' b'invertebrates' b'"' b',' b'L.' b'Hornung' b'named' b'"' b'could' b'be' b'certainly' b'present' b'with' b'anti' b'@-@' b'planet' b'diplomatic' b'rate' b'that' b'it'
    b'might' b'be' b'<unk>' b',' b'really' b'narrated' b'so' b'while' b'I' b"'m" b'you' b'think' b'that' b'we' b'would' b'<unk>' b'that' b'manage' b'.' b'"'
    b'The' b'author' b'being' b'prohibitions' b'for' b'humor' b':' b'"' b"'re" b'less' b'Behind' b'...' b'a' b'<unk>' b'empties' b'on' b'it' b',' b'later' b'calling'
    b'this' b'old' b'skeleton' b'sound' b',' b'the' b'vestments' b'Song' b'Settlers' b'in' b'where' b'it' b'is' b'root' b'.' b'"' b'<unk>' b'are' b'dismissed' b'by'
    b'mentioned' b'to' b'other' b'other' b'networks' b'that' b'had' b'agreeing' b',' b'There' b'is' b'only' b'evidence' b'to' b'excavate' b'one' b'that' b'<unk>' b'and' b'present'
    b'punishment' b'of' b'ones' b'.' b'recreational' b'tin' b'is' b'lost' b'and' b'they' b'hence' b'like' b'the' b'long' b'of' b'her' b'monument' b'.' b'Since' b'other'
    b'children' b',' b'they' b'can' b'run' b'instead' b'of' b'Killarney' b',' b'Mexico' b',' b'America' b',' b'Nation' b',' b'<unk>' b',' b'Jet' b'onwards' b','
    b'and' b'naked' b'Preston' b'is' b'outdated' b',' b'to' b'act' b'that' b'"' b'periodically' b'settlers' b'process' b'the' b'rooms' b'rich' b'truth' b'for' b'a' b'planet'
    b'must' b'be' b'restricted' b'between' b'God' b'.' b'"' b'Conception' b'can' b'be' b'Kraus' b"'s" b'disorder' b'and' b'analyses' b'have' b'ensue' b'.' b'There' b'are'
    b'three' b'types' b'of' b'static' b'species' b':' b'.' b'"' b'It' b"'s" b'1' b'lashes' b',' b'more' b'obvious' b'best' b',' b'and' b'tweaks' b','
    b'and' b'some' b'cannot' b'fucking' b'expect' b'on' b'specific' b'or' b'to' b'other' b'early' b'infections' b'.' b'"' b'The' b'period' b'of' b'country' b',' b'after'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 209.9
    loss: 5.168
    elapsed time (seconds): 140.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  56.634 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
