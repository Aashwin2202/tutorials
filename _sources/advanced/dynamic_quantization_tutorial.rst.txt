.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'in' b'formed' b'aegis' b'.' b'vocalists' b'from' b'that' b'season' b'marked' b'solid' b'a' b'number' b'of' b'crime' b'to' b'<unk>' b',' b'Mouquet' b'<unk>' b'Varma'
    b'.' b'<eos>' b'<unk>' b'from' b'Hindman' b'in' b'his' b'last' b'London' b'season' b'by' b'woodlands' b'into' b'which' b'Crash' b'Doyle' b"'s" b'book' b'was' b'named'
    b'pharaohs' b'in' b'South' b'America' b',' b'met' b'a' b'few' b'mints' b',' b'followed' b'by' b'4' b'@.@' b'4' b'%' b',' b'according' b'to' b'4'
    b'shots' b'.' b'Modern' b'for' b'these' b'universities' b'were' b'short' b'even' b'after' b'teams' b'relatively' b'than' b'four' b'points' b',' b'and' b'explosives' b'a' b'scene'
    b'that' b'reveals' b'hour' b'in' b'a' b'atmosphere' b'with' b'smaller' b'songs' b'to' b'fans' b'series' b'areas' b',' b'being' b'made' b'deploy' b'after' b'"' b'this'
    b'cause' b'"' b',' b'which' b'he' b'feels' b'in' b'Stakes' b'for' b'humanity' b'in' b'the' b'schools' b'100' b'times' b'afterwards' b'.' b'The' b'plants' b'from'
    b'Burnley' b'are' b'voice' b'to' b'be' b'a' b'extensive' b'television' b',' b'either' b',' b'one' b'of' b'its' b'shadow' b'or' b'only' b'a' b'ice' b'novel'
    b',' b'and' b'those' b'modified' b'likely' b'of' b'less' b'than' b'9' b'%' b'of' b'its' b'remaining' b'classes' b'.' b'After' b'this' b'time' b',' b'Soap'
    b'Inn' b'Joseph' b'Wayne' b'alert' b"'s" b'story' b'to' b'crush' b'and' b'Evald' b'Hunter' b',' b'convinced' b'"' b'go' b'it' b'of' b'Os\xc3\xb3rio' b'or' b'to'
    b'do' b'not' b'get' b'leaders' b'God' b'the' b'most' b'conventional' b'sentences' b'to' b'kill' b'.' b'She' b'is' b'very' b'big' b'.' b'"' b'Other' b'essays'
    b'were' b'also' b'employed' b'<unk>' b'or' b'warrior' b'being' b'anything' b'to' b'be' b'able' b'for' b'now' b'<unk>' b'<unk>' b'.' b'<eos>' b'Two' b'months' b'old'
    b',' b'based' b'on' b'the' b'negative' b'Augustan' b'Power' b'Census' b'Daily' b'showed' b'correct' b'audiences' b'of' b'Wikipedia' b',' b'a' b'Incident' b'proposes' b'in' b'missile'
    b'tales' b',' b'<unk>' b'(' b'tendons' b'and' b'the' b'months' b'of' b'Bradman' b')' b',' b'which' b'should' b'be' b'identified' b'more' b'difficult' b'.' b'<eos>'
    b'In' b'2009' b',' b'Reines' b'flooded' b'a' b'mobile' b'rescue' b'<unk>' b'slave' b'revenge' b',' b'stating' b'it' b'would' b'Seth' b'<unk>' b'farms' b'for' b'an'
    b'"' b'white' b'person' b'"' b'....' b'"' b'Prohaska' b'"' b'.' b'<eos>' b'ratified' b'performances' b'was' b'written' b'to' b'indicate' b'up' b'Poland' b',' b'opening'
    b'international' b',' b'such' b'pulling' b'and' b'fountain' b'centers' b',' b'who' b'assembled' b'thermal' b'markings' b'to' b'recognize' b'connect' b'editions' b'.' b'The' b'external' b'epithet'
    b'determined' b'the' b'<unk>' b'based' b'in' b'nature' b'belong' b'to' b'understanding' b'that' b'caused' b'a' b'unseen' b'object' b'tells' b'tangled' b',' b'$' b'3' b'million'
    b'(' b'or' b')' b',' b'and' b'a' b'angle' b'of' b'processional' b'level' b'or' b'body' b'.' b'Loss' b'and' b'television' b'depend' b'on' b'the' b'use'
    b'of' b'boys' b'noise' b'or' b'parts' b'mastermind' b',' b'nor' b'these' b'types' b'of' b'similar' b'amounts' b'even' b'influenced' b'positively' b',' b'thus' b'in' b'only'
    b'the' b'gardens' b'of' b'proteins' b'.' b'According' b'to' b'<unk>' b'mathematics' b',' b'reports' b'of' b'Oxford' b'have' b'prepared' b'health' b',' b'<unk>' b'or' b'<unk>'
    b',' b'which' b'were' b'adopted' b'by' b'Murphy' b'Castle' b'.' b'According' b'to' b'William' b'W.' b'Smith' b',' b'their' b'voice' b'of' b'Ceres' b'.' b'The'
    b'focus' b'40' b'kilometres' b'in' b'the' b'levels' b'and' b'nearby' b'factors' b'used' b'on' b'their' b'onion' b"'s" b'illusion' b'.' b'This' b'was' b'actually' b'enveloped'
    b'at' b'Bulgaria' b',' b'but' b'asked' b'six' b'hundred' b'kingdom' b',' b'two' b'of' b'any' b'way' b'was' b'driven' b'as' b'a' b'poorer' b'immature' b'translation'
    b'.' b'The' b'Dr.' b'distrust' b'states' b':' b'"' b'The' b'state' b'is' b'such' b'<unk>' b'<unk>' b'genera' b'up' b'by' b'the' b'MI6' b'storms' b'to'
    b'go' b'so' b'by' b'63' b'\xc2\xb0' b'authors' b',' b'at' b'about' b'fresh' b'.' b'"' b'The' b'sentencing' b'<unk>' b'of' b'YouTube' b'Qiu' b'Elliott' b'published'
    b'work' b'is' b'first' b'killed' b'as' b'a' b'planet' b'.' b'They' b'add' b'Patricia' b'Yorke' b',' b'and' b'modern' b'characters' b'have' b'<unk>' b'43' b'volume'
    b',' b'in' b'eight' b'older' b'Americans' b'.' b'Another' b'story' b'tort' b'Miley' b'Schmoke' b'is' b'laughs' b',' b'but' b'continues' b'up' b'.' b'Moreover' b','
    b'drenched' b'leaves' b'a' b'human' b'female' b'on' b'the' b'basis' b'of' b'other' b'Paes' b'.' b'As' b'marshy' b'sulfide' b',' b'they' b'are' b'apparent' b'to'
    b'even' b'supernatural' b'spread' b',' b'rather' b'than' b'and' b'even' b'made' b'"' b'exploit' b'a' b'night' b'to' b'be' b'really' b'comparable' b'to' b'Omar' b'"'
    b'.' b'Other' b'steps' b'effects' b'were' b'constant' b'from' b'outcomes' b'due' b'to' b'man' b'running' b'significantly' b'.' b'<eos>' b'Activision' b'who' b'2500' b'his' b'ancient'
    b'illustrated' b',' b'and' b'<unk>' b',' b'to' b'emphasize' b'the' b'demands' b'from' b'them' b'by' b'umpires' b',' b'although' b'"' b'or' b'have' b'been' b'very'
    b'scary' b'returned' b'for' b'him' b'.' b'"' b'<eos>' b'Boom' b'starlings' b'generally' b'discussed' b'the' b'usage' b'by' b'<unk>' b'calls' b'and' b'drunk' b',' b'seemingly'
    b'suspended' b'it' b'to' b'alter' b'European' b'or' b'commercial' b'characteristics' b'.' b'Consequently' b',' b'most' b'of' b'his' b'possible' b'predators' b',' b'on' b'<unk>' b','
    b'applied' b'from' b'<unk>' b'and' b'sculpture' b'such' b'as' b'other' b'conservative' b'player' b'or' b'other' b'magic' b'types' b',' b'attempts' b'to' b'be' b'related' b'to'
    b'Ireland' b'.' b'About' b'all' b'of' b'the' b'knowledge' b'of' b'adding' b'or' b'unusual' b'@-@' b'during' b'while' b'there' b'are' b'some' b'evidence' b'that' b'are'
    b'extratropical' b'that' b'"' b'they' b'may' b'have' b'same' b'much' b'in' b'airliner' b'or' b'values' b'or' b'medium' b',' b'either' b'something' b'said' b'that' b'it'
    b'was' b'exactly' b'a' b'Bigger' b'to' b'make' b'nature' b'"' b'.' b'lamina' b'of' b'tech' b'270' b'@-@' b'true' b'authors' b'participate' b'in' b'next' b'policy'
    b'during' b'Asia' b',' b'resulting' b'on' b'Scheduling' b'during' b'significant' b'distances' b'throughout' b'an' b'Belgians' b'.' b'The' b'back' b'may' b'see' b'colour' b'tactics' b'when'
    b'it' b'does' b'not' b'bring' b'food' b'with' b'<unk>' b'.' b'Swanson' b'be' b'chosen' b'to' b'contribute' b'to' b'Brooks' b',' b'but' b'thus' b'while' b'their'
    b'theory' b'is' b'still' b'very' b'good' b'.' b'It' b'is' b'wiped' b'by' b'intent' b',' b'so' b'they' b'can' b'share' b'Lillehammer' b'or' b'obtain' b'threats'
    b'while' b';' b'it' b'be' b'possible' b',' b'they' b'will' b'produce' b'how' b'they' b'don' b"'t" b'be' b'checked' b'.' b'If' b'they' b'arrives' b','
    b'the' b'stem' b'may' b'gather' b'between' b'spots' b'.' b'It' b'is' b'a' b'rooted' b'episode' b',' b'some' b'other' b'or' b'their' b'eye' b'were' b'dynamic'
    b'tombs' b'of' b'1720' b',' b'whereas' b'opinions' b'have' b'limited' b'doubt' b'in' b'field' b'<unk>' b'.' b'As' b'a' b'result' b'being' b'at' b'the' b'hands'
    b'of' b'Elohim' b',' b'cellular' b',' b'they' b'do' b'at' b'least' b'twenty' b'or' b'20' b'poisoning' b'.' b'For' b'this' b',' b'English' b'and' b'males'
    b'are' b'different' b'and' b'spherical' b'out' b'.' b'This' b'activity' b'is' b'<unk>' b'as' b'being' b'everywhere' b',' b'allowing' b'restoration' b'fourth' b'with' b'birds' b','
    b'so' b'it' b'is' b'wide' b'only' b'back' b'.' b'<eos>' b'O' b'flocks' b'or' b'accurate' b'star' b'concentrations' b'by' b'individuals' b'are' b'ribosomes' b';' b'they'
    b'is' b'<unk>' b',' b'by' b'the' b'highest' b'hand' b'they' b'are' b'repetitive' b'.' b'In' b'both' b'periods' b',' b'it' b'is' b'not' b'soft' b','
    b'they' b'will' b'often' b'form' b'odor' b'(' b'when' b'paths' b')' b'suggest' b'it' b'may' b'be' b'broadly' b'viewed' b'by' b'polar' b'Ukrainian' b'transmission' b'and'
    b'different' b'one' b'may' b'be' b'observed' b'as' b'they' b'occurs' b'and' b'exist' b'.' b'This' b'historians' b'says' b'to' b'a' b'account' b'whose' b'polytheism' b'that'
    b'a' b'greater' b'trees' b'could' b'be' b'"' b'secretive' b',' b'<unk>' b'gum' b'sponsorship' b'that' b'yellowish' b'.' b'"' b'eucalypts' b'told' b':' b'"' b'It'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 216.0
    loss: 5.168
    elapsed time (seconds): 142.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  5.042 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
