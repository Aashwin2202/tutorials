.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b',' b'considered' b'it' b'to' b'be' b'made' b'by' b'<unk>' b'positively' b'.' b'In' b'2011' b',' b'teammate' b'Perrin' b'issued' b'Leo' b'O' b'Massa' b'to'
    b'form' b'two' b'other' b'dinosaurs' b'of' b'land' b'throughout' b'August' b'April' b'1919' b'to' b'frills' b'in' b'2005' b'.' b'Further' b'over' b'July' b'2' b','
    b'2012' b',' b'in' b'the' b'UK' b'on' b'20' b'March' b',' b'Sir' b'4chan' b'!' b'said' b'The' b'spoof' b'should' b"'" b'or' b'to' b'research'
    b'(' b'<unk>' b'to' b'find' b'our' b',' b'and' b'has' b'since' b'.' b'"' b'The' b'tension' b'"' b':' b'"' b'mb' b'"' b')' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'<unk>' b'video' b'=' b'=' b'<eos>' b'<eos>' b'The' b'Hollywood' b'Constitutional' b'Race' b'is' b'produced' b'by' b'David' b'Wintory' b','
    b'have' b'been' b'announced' b'to' b'run' b'for' b'impact' b'million' b'times' b'of' b'life' b',' b'a' b'dissipating' b'by' b'barque' b'composer' b',' b'and' b'Other'
    b'teams' b'from' b'their' b'living' b'career' b'.' b'As' b'a' b'live' b'member' b',' b'a' b'mandible' b'called' b'Mutinus' b'the' b'Bang' b'Agency' b'to' b'be'
    b'FISA' b"'s" b'influence' b'with' b'Joseph' b'Gameplay' b'in' b'his' b'digitally' b'documentary' b'(' b'and' b'buffalo' b')' b'in' b'the' b'game' b'.' b'<eos>' b'Jane'
    b'produced' b'the' b'race' b'for' b'Golden' b'Places' b',' b'which' b'never' b'reveals' b'<unk>' b'9000' b'lies' b'out' b',' b'giving' b'Tai' b'.' b'Marjory' b'Reed'
    b'Doyle' b'compared' b'<unk>' b'on' b'syphilis' b'in' b'"' b'and' b'some' b'genre' b'having' b'2010' b'wrong' b'"' b'.' b'The' b'House' b'of' b'<unk>' b'describes'
    b'eight' b'luminous' b'oak' b'in' b'empathy' b',' b'calling' b'us' b'not' b'to' b'stand' b'with' b'getting' b',' b'in' b'its' b'closest' b'birthday' b'to' b'losing'
    b'New' b'Zealand' b'.' b'A' b'note' b'of' b'this' b'project' b'will' b'be' b'<unk>' b'in' b'North' b'America' b'as' b'especially' b'value' b'of' b'35mm' b';'
    b'their' b'specific' b'limitations' b'sounds' b'Brown' b'4chan' b',' b'Man' b'unfinished' b'.' b'The' b'seemingly' b'restored' b'force' b'court' b';' b'the' b'only' b'leg' b'in'
    b'2001' b',' b'and' b'is' b'credited' b'from' b'disadvantages' b',' b'and' b'<unk>' b'out' b'of' b'Christ' b"'s" b'names' b',' b'and' b'a' b'contradictory' b'interval'
    b'could' b'indicate' b'just' b'had' b'difficulty' b'and' b'commemorate' b'themselves' b'from' b'unwillingness' b'.' b'If' b'they' b'have' b'they' b'seen' b'very' b'than' b'the' b'game'
    b',' b'because' b'the' b'bureau' b'should' b'not' b'draw' b'bone' b'or' b'do' b'a' b'Romanians' b'who' b'needs' b'Kamalakannan' b'.' b'interactions' b'points' b'into' b'the'
    b'fine' b'mechanism' b'remaining' b'on' b'the' b'game' b'will' b'be' b'used' b'by' b'their' b'planet' b'and' b'director' b',' b'231' b'Headquarters' b'on' b'their' b'side'
    b'.' b'The' b'fictional' b'population' b'of' b'Ceres' b'chess' b'94' b'or' b'33' b'on' b'a' b'my' b'perfect' b'housekeeper' b',' b'as' b'fresh' b'games' b';'
    b'on' b'which' b'the' b'male' b'might' b'not' b'be' b'forthcoming' b',' b'they' b'passed' b'on' b'units' b'of' b'<unk>' b'magazines' b',' b'they' b'perform' b'drawing'
    b'depend' b'.' b'Once' b'destined' b'back' b'while' b'when' b'they' b'make' b'poor' b'supplies' b',' b'power' b'imagery' b'watches' b'into' b'nitrogen' b'material' b'.' b'"'
    b'By' b'1997' b',' b'Potomac' b'and' b'<unk>' b'<unk>' b'had' b'incorrect' b'treatment' b',' b'a' b'other' b'task' b'that' b'followers' b'mentioned' b'the' b'destruction' b'of'
    b'their' b'arc' b'.' b'A' b'night' b'pattern' b'of' b'plant' b'intervening' b'makes' b'it' b'for' b'Elrane' b"'" b'murder' b',' b'while' b'the' b'effect' b'of'
    b'Ceres' b'is' b'lacking' b'set' b'after' b'<unk>' b'drum' b'support' b'.' b'However' b',' b'one' b'relates' b'<unk>' b'rested' b'on' b'a' b'single' b'or' b'spy'
    b'lifestyle' b',' b'and' b'ill' b'feeding' b',' b'some' b'examples' b'of' b'labor' b'recognition' b'\xe2\x80\x94' b'kakapo' b',' b'much' b'man' b',' b'8' b'@.@' b'5'
    b'%' b',' b'Austria' b',' b'and' b'helium' b'(' b'soluble' b'the' b'Concorde' b'International' b')' b'.' b'Each' b'core' b'(' b'which' b'of' b'state' b'profound'
    b'diatoms' b'was' b'only' b'more' b'persistent' b'.' b')' b'reached' b'witticisms' b'on' b'some' b'other' b'purposes' b'.' b'<eos>' b'He' b'received' b'these' b'may' b'be'
    b'found' b'.' b'<eos>' b'The' b'first' b'steps' b'between' b'criticism' b'and' b'mock' b'in' b'when' b'other' b'attempts' b'has' b'risen' b'and' b'universal' b'aspects' b'of'
    b'young' b'levels' b',' b'avoiding' b'world' b'symbolism' b'with' b'walking' b'with' b'a' b'giant' b"'s" b'internal' b'compact' b'flash' b'body' b'is' b'hilarious' b'or' b'must'
    b'wield' b'.' b'A' b'adult' b'<unk>' b'Greg' b'<unk>' b'Southwest' b'the' b'toe' b'following' b'a' b'disc' b'cell' b'when' b'extensive' b'merely' b'still' b'preferred' b'for'
    b'a' b'long' b'amount' b'of' b'one' b'million' b'species' b'.' b'To' b'prevent' b'teachers' b'he' b'died' b'until' b'seeing' b'all' b'other' b'species' b'they' b'find'
    b'.' b'<eos>' b'Ceres' b'and' b'separating' b'Ceres' b'on' b'riders' b'are' b'.' b'Illinois' b"'s" b'sex' b'progression' b'is' b'Megacrex' b'(' b'less' b'unknown' b','
    b'keeping' b'close' b'preach' b'or' b'arms' b'again' b',' b'1996' b',' b'showing' b'<unk>' b'.' b'<unk>' b'@-@' b'<unk>' b')' b',' b'or' b'examined' b'to'
    b'carry' b'a' b'study' b'of' b'advertising' b'to' b'thirteenth' b'years' b',' b'in' b'particular' b',' b'their' b'head' b'hired' b'worth' b'there' b'.' b'Although' b'the'
    b'installation' b'of' b'the' b'Earth' b'may' b'not' b'be' b'transmitted' b'to' b'work' b',' b'they' b'will' b'do' b'not' b'take' b'paranormal' b',' b'but' b'even'
    b'become' b'mature' b'.' b'According' b'to' b'their' b'<unk>' b',' b'Korchnoi' b'resulted' b'in' b'nature' b'works' b',' b'which' b'contains' b'a' b'loose' b'rate' b'of'
    b'eye' b'birds' b'.' b'<unk>' b'Dionem' b'a' b'common' b'to' b'food' b',' b'the' b'layers' b'of' b'them' b'normally' b'makes' b'merge' b',' b'who' b'can'
    b'have' b'been' b'activated' b'in' b'make' b'them' b'.' b'In' b'faithful' b',' b'advocates' b'may' b'be' b'distinguished' b'into' b'<unk>' b',' b'sometimes' b'because' b'they'
    b'may' b'indicate' b'that' b'clear' b'areas' b'in' b'allowing' b'funds' b'to' b'become' b'the' b'Vintage' b'<unk>' b'son' b'as' b'they' b'wrote' b'that' b'it' b'is'
    b'"' b'sometimes' b'a' b'very' b'difficult' b'ash' b'@-@' b'textbook' b'"' b',' b'so' b'more' b'than' b'some' b'decades' b'appear' b'their' b'different' b'response' b'.'
    b'In' b'contrast' b',' b'both' b'had' b'a' b'overall' b'function' b'which' b'were' b'known' b'.' b'Also' b',' b'one' b'of' b'the' b'vertices' b'suggest' b'that'
    b'none' b'of' b'paraspeckles' b'do' b'be' b'connected' b'to' b'kilometres' b'.' b'PML' b'simulate' b'calls' b'on' b'sight' b'usually' b'occur' b'in' b'that' b'animal' b','
    b'but' b'when' b'they' b'even' b'constitute' b'.' b'Fly' b'uses' b'this' b'portion' b'as' b'as' b'<unk>' b',' b'organized' b'Airspace' b'@-@' b'smell' b',' b'on'
    b'18' b'km' b'(' b'4' b'@.@' b'4' b'm' b')' b'at' b'a' b'rate' b'of' b'90' b'@.@' b'5' b'in' b'(' b'broken' b'100' b'\xe2\x80\x93'
    b'45' b'mm' b')' b'.' b'<eos>' b'When' b'his' b'superficial' b'male' b'progressed' b'around' b'a' b'manner' b',' b'it' b'is' b'only' b'the' b'widespread' b'bodies'
    b'of' b'by' b'metallic' b'shelling' b'.' b'The' b'therapy' b'presence' b'of' b'movement' b'are' b'flanks' b'.' b'equated' b'seen' b'during' b'this' b'cases' b',' b'when'
    b'it' b'Schrute' b'goal' b'Kenya' b'on' b'efforts' b'native' b'from' b'precursor' b',' b'free' b'familiar' b'to' b'higher' b'images' b'on' b'the' b'consumption' b'of' b'higher'
    b'\xce\xb2' b',' b'their' b'post' b'@-@' b'game' b'DNA' b'or' b'<unk>' b'were' b'2' b'<unk>' b'drawn' b'.' b'The' b'eggs' b'are' b'even' b'specifically' b'O'
    b'Redoubt' b';' b'as' b'they' b'in' b'conflicting' b',' b'they' b'feed' b'to' b'have' b'lead' b'less' b'time' b',' b'as' b'their' b'estimates' b'can' b'help'
    b'Eve' b'and' b'deer' b'.' b'If' b'still' b'predators' b'in' b'1995' b',' b'they' b'may' b'either' b'shocking' b'eggs' b'.' b'There' b'are' b'no' b'noise'
    b'that' b'can' b'be' b'consumed' b'so' b'for' b'each' b'other' b'or' b'the' b'completion' b'of' b'sex' b'.' b'Further' b'that' b'it' b'does' b'rapidly' b'@-@'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 227.3
    loss: 5.168
    elapsed time (seconds): 147.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  20.845 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
