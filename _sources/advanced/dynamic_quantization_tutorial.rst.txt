.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'<eos>' b'The' b'police' b'has' b'restoring' b'rebels' b',' b'sample' b',' b'Iran' b',' b'South' b'Africa' b',' b'grass' b',' b'<unk>' b',' b'imperial'
    b',' b'2003' b',' b'Robert' b'<unk>' b',' b'washed' b'the' b'mycelia' b'in' b'off' b'shatpadi' b'rocks' b';' b'partnership' b'of' b'the' b'much' b'ambitious' b'or'
    b'non' b'@-@' b'walking' b',' b'showed' b'him' b'to' b'recognize' b'that' b'just' b'preferred' b'organization' b'peat' b'Berzelius' b',' b'who' b'in' b'the' b'Lyric' b','
    b'moved' b'was' b'to' b'land' b'.' b'According' b'to' b'<unk>' b'that' b'suspected' b'<unk>' b'as' b'driving' b',' b'these' b'bird' b'niobium' b',' b'termed' b'of'
    b'Corythosaurus' b'the' b'main' b'carving' b'in' b'surveillance' b'and' b'expanded' b'to' b'the' b'NBA' b',' b'but' b'grown' b'in' b'1935' b'.' b'<eos>' b'By' b'its'
    b'Bronze' b'&' b'Srihari' b',' b'the' b'kakapo' b'was' b'Orilla' b'in' b'the' b'<unk>' b'Constabulary' b',' b'<unk>' b'Underhill' b'or' b'composer' b'of' b'nearby' b'military'
    b'@-@' b'<unk>' b'engineering' b',' b'suicide' b'IM' b',' b'frustrated' b'@-@' b'Crystal' b'relations' b',' b'and' b'M.' b'Mead' b'.' b'The' b'game' b'addresses' b'strong'
    b'records' b'of' b'a' b'new' b'arrangement' b'that' b'hypothesis' b'in' b'Independence' b'Myths' b'would' b'be' b'angry' b'.' b'The' b'rituals' b'were' b'agreed' b'moulding' b','
    b'which' b'were' b'turned' b'into' b'provoke' b'plants' b'and' b'conception' b'to' b'"' b'build' b'its' b'50' b'sectors' b'as' b'they' b'<unk>' b'viewers' b'"' b'.'
    b'In' b'the' b'United' b'States' b',' b'Dooley' b'promoted' b'19' b'by' b'translations' b',' b'to' b'prevent' b'the' b'need' b'intelligence' b'shortages' b'Machine' b'.' b'Because'
    b'of' b'example' b',' b'the' b'planet' b'is' b'a' b'deadly' b'solar' b'destination' b'in' b'front' b'of' b'<unk>' b'.' b'This' b'area' b'can' b'be' b'placed'
    b'as' b'a' b'organisation' b'.' b'<eos>' b'one' b'original' b'is' b'Gay' b'owned' b'as' b'Omar' b'(' b'regard' b'to' b'32' b'to' b'45' b'birds' b')'
    b'as' b'(' b'very' b'uncommon' b':' b'-' b'ten' b'%' b'of' b'its' b'or' b'2' b'@.@' b'5' b'square' b'lb' b')' b'.' b'is' b'those'
    b'in' b'the' b'annual' b'Australia' b',' b'some' b'others' b'refuted' b'charges' b',' b'as' b'by' b'other' b'types' b',' b'as' b',' b'for' b'example' b','
    b'chicks' b'fundraising' b',' b'more' b'tailed' b'or' b'spreading' b'contact' b'with' b'the' b'creation' b'of' b'the' b'sudden' b'dwellers' b'.' b'One' b'of' b'the' b'same'
    b'year' b',' b'<unk>' b'.' b'<eos>' b'The' b'food' b'wave' b'originally' b'affected' b'by' b'Wire' b'@-@' b'force' b'wings' b'and' b'daughter' b',' b'balance' b','
    b'and' b'resistant' b'.' b'Due' b'to' b'a' b'4' b'@.@' b'8' b'metres' b'under' b'2' b'@.@' b'5' b'metres' b'(' b'2' b'@.@' b'8' b'km'
    b')' b'wide' b',' b'both' b'male' b'planets' b',' b'Muhammad' b'13' b'birds' b',' b'and' b'12' b'117' b'km' b'(' b'6' b'\xe2\x80\x93' b'7' b'in'
    b')' b',' b'is' b'seen' b'for' b'attributing' b'polls' b'.' b'<eos>' b'Their' b'source' b'of' b'half' b'has' b'Jericho' b'such' b'as' b'scalloping' b',' b'a'
    b'common' b'number' b'of' b'ancient' b'areas' b'that' b'mostly' b'lies' b'pitched' b'into' b'their' b'country' b'Dubois' b',' b'as' b'well' b'as' b'pine' b'@-@' b'coloured'
    b'forests' b'and' b'possess' b'different' b'Ardhanarishvara' b'male' b'or' b'transitioning' b'to' b'eastern' b'textual' b'vegetation' b',' b'but' b'light' b'it' b'oddly' b'mRNA' b',' b'while'
    b'bird' b'bodies' b',' b'<unk>' b',' b'<unk>' b',' b'<unk>' b'and' b'Normal' b'fishes' b'such' b'as' b'<unk>' b',' b'antibodies' b',' b'<unk>' b',' b'and'
    b'other' b'activities' b'.' b'These' b'predators' b'are' b'planted' b'up' b',' b'his' b'splits' b'proteins' b'and' b'high' b'a' b'common' b'size' b'warning' b'or' b'Muslims'
    b'and' b'the' b'rear' b'or' b'blue' b'@-@' b'Biscay' b'can' b'cash' b'.' b'In' b'this' b'context' b',' b'it' b'that' b'had' b'some' b'wet' b'Kvyat'
    b'may' b'help' b'only' b'help' b',' b'solid' b'C' b'<unk>' b'.' b'recurrent' b'jumps' b'include' b'her' b'age' b',' b'while' b'under' b'its' b'own' b'space'
    b'speculation' b'for' b'the' b'small' b'buff' b',' b'they' b'are' b'cut' b'in' b'small' b'technologies' b'.' b'Like' b'this' b'is' b'record' b',' b'they' b'are'
    b'lyric' b'.' b'A' b'sentiments' b'of' b'an' b'food' b'like' b'a' b'confession' b'where' b'they' b'Kirk' b'when' b'there' b'are' b'him' b'to' b'do' b'what'
    b'are' b'the' b'male' b'limit' b'that' b'described' b'it' b'entirely' b'.' b'Most' b'females' b'learning' b'that' b'they' b'coloured' b',' b'and' b'<unk>' b'1' b'\xe2\x80\x93'
    b'1' b'Ram\xc3\xadrez' b'who' b'have' b'start' b'from' b'wholly' b'mouth' b'.' b'venomous' b'starlings' b'also' b'do' b'not' b'start' b'into' b'country' b',' b'<unk>' b','
    b'stipe' b',' b'Redeemer' b',' b'<unk>' b',' b'meat' b',' b'benznidazole' b',' b'probes' b'and' b'older' b'cohesion' b'.' b'Pleasant' b'heard' b'a' b'large' b'person'
    b'<unk>' b'temple' b'style' b',' b'all' b'of' b'which' b'they' b'make' b'it' b'one' b'of' b'the' b'other' b'one' b'of' b'them' b'person' b'.' b'The'
    b'margin' b'unlocked' b'to' b'these' b'other' b'bowls' b',' b'such' b'as' b'<unk>' b',' b'<unk>' b',' b'Austria' b',' b'India' b',' b'<unk>' b',' b'and'
    b'reverse' b'channels' b'of' b'boarding' b'hence' b'tanks' b',' b'<unk>' b',' b'and' b'valley' b'attract' b'may' b'be' b'hurt' b'.' b'Common' b'spillway' b'proteins' b','
    b'such' b'as' b'<unk>' b',' b'<unk>' b',' b'Recovery' b',' b'Protected' b',' b'and' b'distortions' b'on' b'Barrier' b'Criss' b',' b'obtained' b'after' b'convection' b'.'
    b'More' b'informal' b'starlings' b'have' b'large' b'spheres' b'such' b'as' b'upper' b'authors' b',' b'<unk>' b',' b'barrier' b',' b'Babyface' b',' b'Trails' b',' b'cobra'
    b',' b'disk' b'benefit' b',' b'powerful' b'earth' b',' b'and' b'cross' b'Trimurti' b'.' b'Murphy' b'feeds' b'on' b'a' b'unusually' b'small' b'density' b'of' b'1714'
    b'.' b'The' b'Milky' b'Mountains' b'has' b'efficient' b'another' b'distinctive' b',' b'such' b'as' b'catch' b',' b'draped' b',' b'and' b'female' b'within' b'a' b'pair'
    b'of' b'plants' b',' b'which' b'are' b"'" b'resources' b'a' b'mitosis' b',' b'a' b'long' b'<unk>' b'or' b'long' b'drinks' b'of' b'them' b'.' b'However'
    b',' b'L\xc3\xbctzow' b'controls' b'her' b'to' b'producing' b'why' b'they' b'may' b'face' b'they' b'proved' b'any' b'transcription' b'when' b'it' b'is' b'on' b'I.' b'Staley'
    b'.' b'The' b'nest' b'represents' b'deep' b'warships' b'at' b'open' b'pinyin' b'areas' b',' b'so' b'its' b'longest' b'plumage' b'<unk>' b'the' b'atmosphere' b'to' b'the'
    b'<unk>' b'.' b'Like' b'these' b'taste' b',' b'the' b'color' b'word' b'Veerashaiva' b',' b'they' b'depend' b'in' b'autumn' b',' b'and' b'the' b'sternum' b'suffered'
    b'only' b'a' b'draft' b'for' b'security' b'.' b'In' b'response' b',' b'they' b'have' b'been' b'prevalent' b'from' b'Diplocystis' b',' b'but' b'he' b'does' b'not'
    b'painting' b'to' b'try' b'to' b'be' b'assigned' b'to' b'each' b'other' b'.' b'To' b'the' b'authorities' b'who' b'affected' b'it' b'with' b'complex' b'<unk>' b'bands'
    b',' b'those' b'Napoleon' b'then' b'Quiney' b'showing' b'their' b'eyes' b'injury' b',' b'German' b'flying' b'starlings' b',' b'fragments' b',' b'Dunbar' b',' b'the' b'chromatin'
    b"'s" b'leading' b'description' b',' b'or' b'guarding' b'=' b'<eos>' b'At' b'every' b'county' b'zone' b',' b'Cramp' b'can' b'be' b'confined' b'to' b'230' b','
    b'was' b'inferred' b'to' b'leave' b'other' b'longitude' b'.' b'Kuraki' b'proton' b'<unk>' b'are' b'no' b'skeleton' b',' b'forcing' b'by' b'her' b'son' b'and' b'directing'
    b'their' b'intention' b'.' b'The' b'player' b'<unk>' b'assaults' b'on' b'her' b'side' b'.' b'He' b'attempts' b'to' b'prefer' b'Wolf' b'(' b'organ' b')' b'.'
    b'A' b'fraction' b'of' b'this' b'gills' b',' b'by' b'pleasant' b',' b'<unk>' b',' b'IBC' b'(' b'a' b'glow' b'open' b')' b',' b'is' b'known'
    b'as' b'His' b'<unk>' b'(' b'exchange' b',' b'one' b'name' b';' b'Riga' b')' b'and' b'<unk>' b')' b'.' b'The' b'same' b'male' b'is' b'likely'
    b'by' b'pure' b'starlings' b',' b'including' b'the' b'season' b'of' b'the' b'young' b',' b'preventing' b'the' b'red' b',' b'a' b'key' b'enrolment' b'at' b'a'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 214.4
    loss: 5.168
    elapsed time (seconds): 146.0


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  6.716 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
