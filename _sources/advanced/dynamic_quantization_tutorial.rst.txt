.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'again' b'of' b'city' b',' b'but' b'then' b'overlap' b'on' b'a' b'work' b'homeworld' b',' b'and' b'a' b'time' b'after' b'the' b'both' b'year' b'the'
    b'Nicollette' b'(' b'1725' b')' b'put' b'in' b'the' b'<unk>' b'Nomenclature' b'of' b'his' b'Boer' b'image' b'and' b'predecessor' b'philosopher' b'Senior' b'Wilson' b'<unk>' b'annoy'
    b':' b'cubic' b'(' b'1863' b'densely' b'fun' b')' b',' b'count' b'both' b'bodyguard' b'(' b'requirements' b')' b',' b'and' b'transparent' b'characteristics' b'scanning' b'volts'
    b'(' b'e.g.' b'ca' b')' b'and' b'89' b'attract' b'from' b'144' b'@.@' b'7' b'years' b'next' b'University' b';' b'a' b'phylogenetic' b'tin' b'covering' b'the'
    b'race' b'is' b'unknown' b',' b'which' b'just' b'has' b'been' b'introduced' b'in' b'much' b'transits' b'because' b'it' b'is' b'moved' b'to' b'first' b'973' b','
    b'often' b'old' b'.' b'At' b'least' b'40' b'century' b'differences' b'between' b'output' b'were' b'explicit' b'by' b'using' b'6' b'metres' b'(' b'3' b'@.@' b'3'
    b'inches' b')' b'in' b'the' b'treaty' b',' b'or' b'will' b'ascenders' b'GA' b'57' b'in' b'the' b'venom' b'.' b'The' b'lifespan' b'of' b'Metre' b'will'
    b'be' b'accepted' b'by' b'males' b'and' b'Cr\xc3\xa9pon' b'(' b'adult' b'grooves' b')' b'(' b'FAB' b'Gryzelda' b')' b'.' b'Though' b'whistling' b'global' b'towed' b','
    b'26' b'@.@' b'5' b'million' b'years' b'to' b'strike' b',' b'males' b',' b'running' b'.' b'<unk>' b'mainly' b'wrote' b'to' b'be' b'used' b'to' b'protect'
    b'their' b'<unk>' b'along' b'mainly' b'by' b'super' b'sites' b'handling' b'oxygen' b'damage' b'.' b'Stalin' b'holds' b'into' b'his' b'large' b'error' b',' b'presenting' b'for'
    b'grown' b',' b'close' b'to' b'them' b',' b'using' b'the' b'sago' b'numbers' b'that' b'gives' b'.' b'We' b'isn' b"'t" b'commands' b'in' b'the' b'breeding'
    b'language' b'when' b'at' b'least' b'four' b'are' b'flies' b'to' b'a' b'planet' b'boys' b'or' b'<unk>' b'the' b'body' b'of' b'1990' b'to' b'the' b'stress'
    b'of' b'those' b'and' b'<unk>' b'both' b'a' b'dirty' b'government' b'.' b'<eos>' b'A' b'bird' b'or' b'water' b'relatives' b'appears' b'to' b'be' b'politically' b'<unk>'
    b'.' b'Although' b'there' b'is' b'no' b'plateau' b'that' b'Venus' b'facilitated' b'at' b'20' b'(' b'36' b'essential' b'and' b'75' b'%' b',' b'there' b'you'
    b'is' b'actually' b'right' b'that' b'time' b'can' b'be' b'equal' b'that' b'they' b'find' b'.' b'Because' b'the' b'island' b'is' b'smaller' b',' b'they' b'looked'
    b'only' b'right' b',' b'but' b'in' b'arranging' b'them' b'that' b'we' b'have' b'picture' b'independently' b'what' b'could' b'the' b'destruction' b'of' b'sexually' b'Dale' b'areas'
    b'.' b'This' b'species' b'is' b'of' b'information' b'that' b'these' b'<unk>' b'high' b'can' b'disbanded' b',' b'and' b'varies' b'out' b'inside' b'13' b':' b'00'
    b'.' b'For' b'pilgrims' b',' b'over' b'2' b'million' b'years' b',' b'with' b'the' b'threshold' b'of' b'short' b'or' b'wing' b'birds' b'such' b'as' b'turn'
    b'cells' b'failed' b'to' b'eliminate' b'his' b'final' b'season' b'(' b'space' b')' b'.' b'Males' b'are' b'reddish' b'terrestrial' b'or' b'slept' b',' b'as' b'they'
    b'may' b'be' b'based' b'.' b'<eos>' b'Other' b'nests' b'of' b'the' b'genetic' b'multinucleated' b'barometric' b'religious' b'predators' b'positively' b'ensuring' b'their' b'inspiration' b'into' b'each'
    b'earlier' b'.' b'It' b'is' b'beneficial' b'largely' b'after' b'other' b'information' b',' b'like' b'geology' b'and' b'terrestrial' b',' b'Finland' b'and' b'toilet' b',' b'including'
    b'catchment' b',' b'surface' b',' b'and' b'strong' b'coordinator' b'pounds' b'through' b'straight' b'prestwichii' b',' b'while' b'a' b'<unk>' b',' b'a' b'connections' b'to' b'the'
    b'low' b'cell' b'can' b'also' b'be' b'classrooms' b'for' b'opponents' b'known' b'as' b'making' b'their' b'hot' b'effect' b'.' b'When' b'they' b'seem' b',' b'with'
    b'association' b'another' b'nucleus' b'as' b'recreated' b',' b'the' b'bulk' b'of' b'the' b'kakapo' b'exists' b'after' b'\xe2\x80\x93' b'15' b'or' b'becomes' b'effective' b'.' b'<unk>'
    b'over' b'all' b'are' b'a' b'good' b'sexes' b'that' b'contains' b'determined' b'.' b'<eos>' b'The' b'Underground' b'Guild' b'is' b'aware' b'of' b'walking' b'today' b'to'
    b'determine' b'Route' b'4' b'Plugge' b'.' b'My' b'surface' b'action' b'reported' b'it' b'has' b'no' b'themes' b'of' b'<unk>' b'.' b'erosion' b'spiders' b'chosen' b'to'
    b'avoid' b'Anglesey' b',' b'which' b'may' b'give' b'large' b'feathers' b'as' b'to' b'seem' b'longer' b'.' b'New' b'Zealand' b'was' b'so' b'sung' b'during' b'the'
    b'country' b"'" b'zeal' b')' b'and' b'Japanese' b'language' b'.' b'Common' b'starlings' b'nautical' b'or' b'one' b'females' b'give' b'the' b'resulting' b'nest' b',' b'also'
    b'seated' b'at' b'an' b'relatively' b'suitable' b'ecology' b'custom' b'with' b'some' b'eighteen' b'kinds' b';' b'the' b'kakapo' b'version' b'rolled' b'for' b'its' b'head' b'.'
    b'Also' b',' b'triangle' b'will' b'be' b'based' b'on' b'pagodas' b'for' b'its' b'magnitude' b'to' b'their' b'planning' b';' b'they' b'passed' b'or' b'ions' b'.'
    b'Other' b'intricate' b'starling' b'exists' b'upon' b'designed' b'kilometres' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Meteorological' b'=' b'=' b'<eos>' b'<eos>' b'The' b'kakapo' b'is'
    b'cougar' b',' b'pitching' b'for' b'a' b'number' b'of' b'them' b',' b'required' b'even' b'even' b'heavily' b'rare' b'due' b'to' b'gene' b',' b'and' b'better'
    b'bent' b'attacks' b'that' b'contribute' b',' b'namely' b'their' b'habitat' b'and' b'tendency' b'of' b'<unk>' b'.' b'As' b'on' b'his' b'starlings' b',' b'Ireland' b'treated'
    b'specifically' b'along' b'the' b'bat' b'when' b'their' b'genetic' b'matrix' b'depicts' b'it' b'to' b'be' b'less' b'unique' b'.' b'Two' b'steps' b',' b'while' b','
    b'when' b'only' b'nest' b'faces' b',' b'they' b'often' b'drawn' b'support' b'a' b'tree' b'.' b'After' b'World' b'10' b'weeks' b',' b'it' b'does' b'not'
    b'refer' b'to' b'crafted' b'in' b'intensity' b',' b'with' b'invertebrates' b'expressed' b'them' b'to' b'avoid' b'hand' b'or' b'excavate' b'prey' b'.' b'Thus' b'existence' b'disappear'
    b'.' b'If' b'Bird' b'isolated' b'on' b'it' b',' b'they' b'have' b'mostly' b'<unk>' b'held' b'in' b'chemotherapy' b'giving' b'it' b'it' b'is' b'possible' b'.'
    b'<eos>' b'Another' b'meat' b'weapon' b'is' b'organized' b'by' b'iron' b'environmental' b'slabs' b'.' b'minerals' b'condoms' b'occur' b'throughout' b'about' b'two' b'habitat' b'years' b','
    b'could' b'be' b'to' b'face' b'prey' b'Cave' b'.' b'Out' b'to' b'this' b'cases' b',' b'it' b'is' b'rarely' b'virtually' b'considered' b'a' b'Crimint' b'scales'
    b'at' b'sea' b'when' b'they' b'varies' b'to' b'pinkish' b'pale' b'.' b'Once' b'far' b'by' b'they' b'must' b'exploded' b'the' b'kakapo' b'up' b'to' b'shortened'
    b',' b'Ithaca' b'were' b'already' b'unrecorded' b'by' b'another' b'tunes' b',' b'along' b'this' b',' b'<unk>' b'experience' b'.' b'Critics' b'do' b'support' b'some' b'transcription'
    b'damage' b',' b'improve' b'them' b',' b'they' b'have' b'black' b'with' b'paranormal' b'booms' b',' b'which' b'slows' b'well' b'jury' b'entangled' b'to' b'Buttler' b'.'
    b')' b'may' b'take' b'up' b'submarines' b'on' b'the' b'ground' b'back' b'around' b'14' b'a.m.' b',' b'including' b'invertebrates' b',' b'<unk>' b',' b'and' b'woodland'
    b'amounting' b'.' b'The' b'male' b'and' b'females' b'are' b'sufficiently' b'difficult' b'to' b'be' b'important' b'.' b'<eos>' b'Historically' b',' b'they' b'function' b'all' b'as'
    b'they' b'hated' b'their' b'associated' b'"' b'nests' b'successful' b'"' b'.' b'He' b'is' b'thrown' b'to' b'infection' b'for' b'Napier' b'.' b'A' b'few' b'stains'
    b'songs' b'night' b'by' b'the' b'Common' b'national' b'male' b'populations' b'were' b'also' b'disposed' b'of' b'centres' b',' b'and' b'it' b'is' b'played' b'into' b'over'
    b'Applewhite' b"'s" b'of' b'them' b'.' b'<eos>' b'A' b'Poems' b'are' b'held' b'by' b'razed' b'areas' b'with' b'the' b'rare' b'behaviour' b'of' b'life' b','
    b'a' b'limitations' b'or' b'silk' b'<unk>' b',' b'each' b'of' b'vegetation' b'is' b'unlikely' b';' b'the' b'highest' b'<unk>' b'of' b'tiger' b'cottonwood' b'are' b'potentially'
    b'male' b'in' b'size' b',' b'but' b'it' b'is' b'also' b'completely' b'visible' b'.' b'However' b',' b'Jan' b'explorers' b'began' b',' b'when' b'they' b'end'
    b'a' b'bicycle' b'curve' b'.' b'A' b'female' b'results' b'behind' b'Callisto' b'that' b'occurs' b'more' b'or' b'Street' b',' b'pushing' b'a' b'shot' b'that' b'captured'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 212.4
    loss: 5.168
    elapsed time (seconds): 145.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  4.301 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
