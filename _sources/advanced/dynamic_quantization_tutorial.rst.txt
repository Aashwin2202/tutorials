.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'.' b'<eos>' b'The' b'familiar' b'ever' b'specifically' b'TV' b'in' b'the' b'spillways' b'.' b'In' b'color' b',' b'a' b'game' b'of' b'about' b'10' b'million'
    b'people' b'found' b'substantial' b'1' b'@.@' b'46' b'in' b'(' b'254' b'known' b'/' b'h' b')' b'.' b'<eos>' b'Among' b'the' b'next' b'year' b','
    b'Quite' b'Trends' b'laid' b'billion' b'residents' b'in' b'primitive' b'rain' b',' b'much' b'two' b'stories' b',' b'and' b'non' b'@-@' b'M.' b'Saban' b'caught' b','
    b'absent' b'established' b',' b'and' b'shape' b'as' b'fire' b'@-@' b'Twice' b'.' b'They' b'headed' b'with' b'rammed' b'a' b'color' b'characteristics' b',' b'which' b'Scouting'
    b'believes' b'that' b'only' b'problems' b'in' b'Choir' b',' b'and' b'clear' b'their' b'partially' b'and' b'<unk>' b'local' b'cases' b'to' b'do' b'their' b'neighbors' b'Marie'
    b'and' b'the' b'<unk>' b'types' b'of' b'young' b'starling' b'division' b'.' b'During' b'Norwalk' b'Texas' b',' b'100' b'\xe2\x80\x93' b'1' b'%' b'of' b'Venus' b'were'
    b'due' b'to' b'the' b'body' b',' b'which' b'later' b'could' b'influence' b'his' b'experimental' b'output' b'.' b'This' b'bird' b'occurs' b'in' b'the' b'group' b','
    b'which' b'is' b'considered' b'on' b'a' b'closely' b'by' b'the' b'single' b'Wolf' b',' b'therefore' b'predatory' b'or' b'designer' b'every' b'button' b'of' b'Tompkins' b'('
    b'Chinese' b')' b',' b'and' b'the' b'demise' b'of' b'centers' b';' b'they' b'were' b'either' b'proven' b'by' b'ubiquitous' b'and' b'typically' b'fat' b'any' b'other'
    b'eyes' b'on' b'the' b'primaries' b'.' b'While' b'there' b'are' b'greater' b'evidence' b'about' b'the' b'thigh' b'of' b'another' b'stegosaurid' b',' b'they' b'also' b'hardly'
    b'think' b'.' b'The' b'depiction' b'of' b'black' b'personality' b'would' b'be' b'related' b'to' b'no' b'Places' b'.' b'The' b'schools' b'of' b'L.' b'Farber' b'is'
    b'being' b'marked' b'by' b'the' b'Dark' b'miscarriages' b',' b'stating' b'that' b'Jordan' b'or' b'the' b'long' b'yield' b'of' b'expatriates' b'could' b"'t" b'be' b'able'
    b'.' b'Of' b'those' b'being' b'the' b'2016' b'issue' b'that' b'occurred' b'in' b'the' b'heir' b'.' b'<eos>' b'The' b'most' b'common' b'starling' b'is' b'spread'
    b'.' b'In' b'the' b'volatile' b'study' b'shortly' b',' b'there' b'are' b'one' b'type' b',' b'Junior' b',' b'gray' b',' b'drug' b',' b'and' b'supportive'
    b'so' b'.' b'It' b'is' b'increasingly' b'like' b'their' b'<unk>' b'as' b'a' b'player' b'that' b'faces' b'into' b'mall' b'.' b'These' b'trees' b'are' b'introduced'
    b'up' b'to' b'slate' b',' b'here' b',' b'and' b'Wales' b'Headshrinkers' b'in' b'humanity' b'(' b'cyclical' b'species' b'WWII' b')' b'can' b'be' b'influenced' b'by'
    b'their' b'head' b'and' b'advances' b',' b'grandparents' b'even' b'.' b'Unlike' b'nucleus' b',' b'it' b'was' b'usually' b'positive' b'that' b'onto' b'outflow' b'BC' b','
    b'may' b'be' b'more' b'different' b'.' b'<eos>' b'<eos>' b'=' b'=' b'<unk>' b'<unk>' b'=' b'=' b'<eos>' b'<eos>' b'Ancient' b'starling' b'letters' b'have' b'been'
    b'developed' b',' b'until' b'this' b'location' b',' b'although' b'greater' b'birds' b'were' b'separate' b'.' b'One' b'areas' b'have' b'arrived' b'roughly' b'two' b'other' b'controversy'
    b'out' b'with' b'Iguanodon' b'.' b'Even' b'regard' b'to' b'the' b'Anglo' b'@-@' b'Cenozoic' b'Frenchmen' b'McMaster' b'he' b'recovered' b'in' b'Grimsby' b',' b'Todd' b'owl'
    b'and' b'manufacture' b'of' b'prey' b'.' b'1' b'years' b'including' b'the' b'Dubliners' b',' b'during' b'radar' b',' b'European' b',' b'and' b'blotches' b',' b'it'
    b'remains' b'western' b'agriculture' b'including' b'their' b'atmosphere' b'.' b'The' b'western' b'reaches' b"'" b'receptor' b'inscription' b'pagodas' b'they' b'attempted' b'to' b'be' b'besieged' b','
    b'even' b'outside' b'their' b'core' b'lines' b',' b'yellowish' b'disrupting' b'Station' b'or' b'miners' b',' b'early' b'mainly' b'years' b',' b'stretching' b'apply' b'out' b'has'
    b'G\xc3\xb3mez' b'.' b'vapor' b'formed' b'<unk>' b',' b'they' b'were' b'particularly' b'written' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Ecology' b'=' b'=' b'<eos>' b'<eos>'
    b'The' b'large' b'starling' b',' b'a' b'planet' b'of' b'Mars' b'(' b'which' b'includes' b'females' b')' b'asserts' b'as' b'follows' b'Inari' b',' b'occurs' b'around'
    b'watery' b'times' b'.' b'<unk>' b'muscles' b'are' b'symbol' b'to' b'their' b'authority' b'.' b'The' b'Temple' b'is' b'generally' b'commonly' b'well' b'until' b'the' b'Republic'
    b'of' b'gardens' b'and' b'oversized' b'from' b'80' b'\xe2\x80\x93' b'06' b'\xce\xbcm' b',' b'allowing' b'care' b'of' b'women' b'that' b'are' b'known' b'since' b'eastern' b'or'
    b'Ireland' b'.' b'These' b'starlings' b'are' b'low' b'from' b'multiple' b'male' b'Amano' b'.' b'consortium' b'individuals' b'include' b'coast' b'have' b'the' b'largest' b'damage' b'of'
    b'visits' b'polytheism' b',' b'and' b'even' b'during' b'any' b'bird' b',' b'any' b'other' b'requirements' b'varies' b'on' b'preferred' b'pores' b'and' b'enterprises' b'.' b'<eos>'
    b'<eos>' b'<eos>' b'=' b'common' b'character' b'(' b'1998' b')' b'=' b'<eos>' b'<eos>' b'Lions' b'(' b'<unk>' b',' b'spins' b',' b'Nerys' b'Boom' b'Bang'
    b'!' b']' b'is' b'a' b'Fire' b'species' b')' b'.' b'Ceres' b'starts' b'in' b'almost' b'eight' b'times' b'in' b'a' b'asteroid' b'thumb' b'for' b'them'
    b',' b'Liverpool' b'Banadir' b',' b'voiced' b'and' b'259' b'eggs' b',' b'especially' b'best' b',' b'with' b'two' b'findings' b',' b'known' b'as' b'one' b'of'
    b'high' b'landing' b'health' b',' b'the' b'50' b'\xe2\x80\x93' b'18' b'cm' b'(' b'2' b'\xe2\x80\x93' b'4' b'in' b')' b',' b'approximately' b'24' b'kg' b'('
    b'4' b'@.@' b'8' b'in' b')' b'an' b'roof' b'complex' b',' b'with' b'20' b'pressure' b':' b'34' b'@.@' b'demeanor' b',' b'7' b'@.@' b'8'
    b'%' b'diameter' b'.' b'<eos>' b'A' b'week' b'for' b'weigh' b'species' b'of' b'lack' b'or' b'a' b'piano' b'response' b'at' b'19' b'tickets' b'took' b'of'
    b'motion' b'males' b'are' b'less' b'only' b'number' b'of' b'laid' b'at' b'<unk>' b',' b'and' b'are' b'killed' b'by' b'poor' b'birds' b',' b'Shanks' b'conventional'
    b'brick' b'<unk>' b',' b'Mycena' b'buffalo' b',' b'6' b',' b'21' b',' b'14' b'\xe2\x80\x93' b'4' b'@.@' b'8' b'BC' b',' b'and' b'spleen' b'Temperatures'
    b'.' b'Their' b'main' b'combat' b'is' b'around' b'4' b'million' b'his' b'cargo' b'.' b'The' b'beak' b'is' b'called' b'narrow' b',' b'the' b'only' b'road'
    b'with' b'an' b'simple' b'arena' b'and' b'panic' b'scales' b'.' b'<eos>' b'In' b'this' b'climate' b'they' b'present' b'with' b'three' b'oxide' b',' b'males' b"'"
    b'host' b'couple' b'are' b'prescribed' b'as' b'it' b'can' b'be' b'placed' b'by' b'<unk>' b'and' b'@-@' b'stimulated' b'play' b'.' b'Smaller' b'seasonal' b'birds' b'are'
    b'filled' b'by' b'<unk>' b'.' b'Those' b'is' b'85' b'\xe2\x80\x93' b'27' b'Trotternish' b',' b'which' b'is' b'equivalent' b'to' b'their' b'male' b'@-@' b'Palmyrenes' b'.'
    b'This' b'neck' b'may' b'later' b'be' b'advised' b'to' b'be' b'enlarged' b'into' b'hour' b'of' b'ion' b'sea' b'differentiation' b'.' b'In' b'the' b'grass' b','
    b'they' b'are' b'reflects' b'roughly' b'.' b'Late' b'numbers' b'is' b'more' b'distant' b'.' b'They' b'are' b'commonly' b'out' b'to' b'turn' b'to' b'produce' b'a'
    b"'" b'great' b'Greek' b'sing' b'"' b'.' b'<eos>' b'Gators' b'during' b'their' b'departure' b'on' b'Homarus' b',' b'unrealistic' b'Australia' b'are' b'still' b'brownish' b'\xe2\x80\x93'
    b'subsequently' b',' b'most' b'species' b'of' b'those' b'Barco' b',' b'occasionally' b'separated' b'by' b'a' b'female' b',' b'which' b'allows' b'the' b'head' b'sets' b'back'
    b'to' b'roosts' b'on' b'other' b'occasions' b'until' b'they' b'do' b'disrupted' b'to' b'have' b'\xe2\x88\x92' b'1' b'million' b'to' b'eight' b'or' b'years' b'1.e4' b'.'
    b'However' b',' b'it' b'starts' b'in' b'the' b'semicircular' b'total' b'of' b'Mexico' b',' b'visibility' b',' b'and' b'sloping' b'hunting' b'at' b'come' b'further' b'or'
    b'Diarmata' b'close' b'.' b'Numerous' b'chicks' b'constitute' b'armour' b'search' b'and' b'even' b'(' b'less' b'elaborate' b')' b'you' b'ends' b'.' b'<eos>' b'Similar' b'starling'
    b'rarely' b'gives' b'up' b',' b'which' b'is' b'typically' b'450' b'or' b'ions' b'.' b'Eight' b'common' b'diseases' b'recorded' b'severe' b'trees' b',' b'John' b'barely'
    b'even' b'yet' b'stimulus' b'.' b'It' b'would' b'therefore' b'be' b'given' b'disputed' b'for' b'one' b'exposed' b'spaced' b',' b'although' b'females' b'cooled' b'.' b'It'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 213.6
    loss: 5.168
    elapsed time (seconds): 139.9


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  59.718 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
