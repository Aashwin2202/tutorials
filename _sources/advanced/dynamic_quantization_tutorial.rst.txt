.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'that' b'show' b'simply' b'change' b',' b'they' b'<unk>' b'of' b'administration' b';' b'they' b'devised' b'a' b'output' b'of' b'versus' b'Wembley' b'"' b'via' b'much'
    b'<unk>' b'or' b'black' b'@-@' b'predator' b'to' b'have' b'moved' b'to' b'supply' b'flourishing' b'"' b'.' b'Q' b'concluded' b'records' b'from' b'the' b'"' b'small'
    b'<unk>' b',' b'"' b'short' b'Chinese' b'downfall' b',' b'a' b'model' b'@-@' b'giving' b'<unk>' b'shirt' b',' b'and' b'grew' b'the' b'final' b'season' b'.'
    b'In' b'some' b'parts' b',' b'Hornung' b'was' b'summarised' b'by' b'the' b'moth' b'before' b'Margaret' b'disciplined' b',' b'and' b'Walpole' b'have' b'gone' b'in' b'a'
    b'variety' b'of' b'TWA' b'from' b'freely' b',' b'stating' b'that' b'would' b'be' b'"' b'inside' b'their' b'no' b'water' b'"' b'.' b'<unk>' b'situations' b'were'
    b'trapped' b'out' b'due' b'to' b'his' b'effort' b'holds' b'to' b'find' b'regular' b"'d" b'.' b'The' b'form' b'of' b'humiliating' b'varied' b'names' b'commenced' b'in'
    b'Northern' b'Ireland' b'when' b'two' b'are' b'the' b'most' b'memorable' b'tip' b'in' b'the' b'size' b'leading' b'.' b'<unk>' b'for' b'Rusambo' b'like' b'this' b'power'
    b'<unk>' b'instead' b'of' b'the' b'chicks' b'to' b'calculate' b'Florencio' b'Live' b'@-@' b'Ganges' b'.' b'"' b'<eos>' b'<unk>' b'or' b'Napa' b'should' b'be' b'mentioned'
    b'to' b'have' b'eighteen' b'Tales' b'fungi' b'.' b'found' b'considered' b'that' b'Gods' b'fool' b'consist' b',' b'the' b'all' b'reactions' b'most' b'made' b'Bond' b'.'
    b'This' b'is' b'not' b'due' b'to' b'is' b'the' b'first' b'word' b'in' b'different' b'@-@' b'releases' b',' b'Romanticism' b',' b'or' b'is' b'a' b'pursuit'
    b'of' b'retreated' b'to' b'William' b'<unk>' b'John' b'Publishing' b'in' b'1553' b'.' b'Okura' b'are' b'under' b'the' b'sons' b'of' b'<unk>' b',' b'Mexico' b'<unk>'
    b'(' b'<unk>' b'only' b'directed' b'as' b'hairy' b')' b',' b'he' b'sink' b'about' b'caricatures' b'in' b'book' b'One' b'load' b'.' b'However' b',' b'they'
    b'said' b'that' b'Clinton' b',' b'"' b'it' b'has' b'just' b'a' b'considerable' b'\xe2\x80\x9d' b'with' b'you' b'is' b'not' b'a' b'consensus' b'which' b'was' b'native'
    b',' b'they' b'wasn' b"'t" b'potentially' b'.' b'"' b'The' b'action' b'directly' b'begins' b'in' b'1928' b'just' b'to' b'stop' b'education' b',' b'but' b'informed'
    b'metre' b',' b'even' b'declared' b'his' b'reputation' b'.' b'According' b'to' b'"' b'movies' b'"' b'the' b'text' b',' b'<unk>' b'HBOI' b'is' b'<unk>' b'<unk>'
    b'(' b'holding' b'traditional' b'troops' b')' b'.' b'The' b'ability' b'that' b'the' b'1900s' b'threatened' b'magnetism' b'with' b'location' b'that' b'died' b'with' b'folk' b'combination'
    b'to' b'create' b'Virginia' b'Park' b'has' b']' b'firmly' b'longer' b'.' b'The' b'band' b'follows' b'that' b'direct' b'.' b'Feel' b'his' b'hooded' b'tissue' b'forward'
    b',' b'should' b'have' b'not' b'debated' b'its' b'only' b'feet' b'.' b'In' b'March' b'1902' b',' b'head' b'takes' b'controversy' b'were' b'2006' b'for' b'increased'
    b'warriors' b',' b'who' b'observed' b'the' b'bird' b'with' b'its' b'guitar' b'with' b'conifers' b'.' b'In' b'middle' b',' b'race' b'characters' b'provides' b'or' b'hides'
    b',' b'across' b'Henstridge' b',' b'and' b'healing' b'attempts' b',' b'declined' b'to' b'recognition' b',' b'by' b'management' b',' b'at' b'Nightmare' b'and' b'Thea' b"'s"
    b'presentation' b'.' b'When' b'all' b'difference' b',' b'they' b'underwent' b'a' b'monumental' b'reality' b'by' b'<unk>' b'into' b'control' b'.' b'Their' b'beak' b'stand' b'by'
    b'a' b'player' b'depending' b'the' b'assault' b'between' b'IN' b'and' b'their' b'wife' b'was' b'slightly' b'focused' b'by' b'his' b'old' b'gravity' b',' b'and' b'air'
    b'quotes' b'with' b'in' b'his' b'<unk>' b'determination' b';' b'Ingram' b'wrote' b'that' b'it' b'"' b'is' b'too' b'entertaining' b'in' b'this' b'characters' b'that' b'would'
    b'be' b'"' b'.' b'<unk>' b'Deborah' b'II' b'describes' b'word' b'that' b'"' b'this' b'generation' b'might' b'be' b'daring' b'to' b'be' b'named' b'possible' b'Westerns'
    b'but' b'enable' b'it' b'to' b'give' b'it' b'rather' b'.' b'"' b'As' b'first' b',' b'he' b'has' b'made' b'most' b'"' b'Millennium' b'eyes' b'"'
    b',' b'such' b'as' b'worldly' b'<unk>' b',' b'who' b'collaborated' b'back' b'to' b'characterize' b'Nf3' b';' b',' b'by' b'The' b'Viscount' b',' b'Kyra' b'tell'
    b'him' b'by' b'his' b'faith' b'to' b'mac' b'Indiamen' b'and' b'4' b'/' b'13' b'in' b'Sydney' b'.' b'Counties' b'undertaking' b'successful' b'@-@' b'legal' b'mourning'
    b',' b'taking' b'them' b'more' b'than' b'off' b'otherwise' b'on' b'the' b'top' b'to' b'a' b'cottage' b'and' b'<unk>' b'.' b'mix' b'spokesperson' b'act' b'half'
    b'@-@' b'them' b'representing' b'Straits' b'penetrated' b'around' b'of' b'syphilis' b'and' b'James' b'Japan' b'.' b'<eos>' b'The' b'adult' b'regulating' b'formerly' b'the' b'time' b'of'
    b'modern' b',' b'explosives' b',' b'their' b'paintings' b'such' b'as' b'when' b'they' b'tests' b'to' b'mean' b'the' b'special' b'umpire' b'by' b'<unk>' b'.' b'<eos>'
    b'as' b'the' b'player' b'is' b'certainly' b'known' b',' b'the' b'home' b'@-@' b'room' b'culling' b'otherwise' b'draws' b'.' b'Instead' b',' b'which' b'they' b'citation'
    b'to' b'Earth' b',' b'they' b'feels' b'that' b'archaic' b'will' b'not' b'pass' b'.' b'"' b'Perhaps' b'Boyle' b'of' b'puppets' b'account' b'of' b'nature' b'of'
    b'his' b'bizarre' b'are' b'Very' b'by' b'mid' b'@-@' b'kings' b'and' b'will' b'shift' b'Koh' b'UN' b'is' b'clear' b'to' b'no' b'.' b'"' b'Vasa'
    b'storytelling' b'the' b'Nile' b'we' b'employ' b'differences' b'of' b'<unk>' b')' b'.' b'Like' b'I' b'put' b'Vaballathus' b'from' b'her' b',' b'he' b'approved' b'a'
    b'Gallienus' b'with' b'Kahn' b'from' b'Australia' b'on' b'9' b'June' b'2005' b'.' b'The' b'healing' b'trace' b'is' b'a' b'pleasure' b'to' b'prevent' b'him' b'them'
    b'for' b'his' b'shoulders' b'.' b'While' b'with' b'white' b'prominence' b',' b'it' b'must' b'be' b'totally' b'examples' b'of' b'<unk>' b'if' b'it' b'Learning' b'his'
    b'first' b'place' b'.' b'<unk>' b',' b'whereas' b'they' b'envisioned' b'legislation' b'with' b'apparent' b'other' b'birds' b'show' b'from' b'impress' b'na' b'psychiatric' b'vegetation' b'often'
    b'mountains' b'from' b'space' b'.' b'<unk>' b'.' b'Through' b'this' b'relative' b'chicks' b'rushing' b'city' b'enjoyed' b'care' b'of' b'hymenium' b'as' b'they' b'were' b'used'
    b'throughout' b'various' b'kinds' b'of' b'human' b'<unk>' b',' b'entering' b'agricultural' b'blood' b',' b'had' b'any' b'nuclei' b'following' b'an' b'kakapo' b'power' b'into' b'SK'
    b'smell' b'.' b'These' b'is' b'troubled' b'by' b'Holloway' b'as' b'where' b'he' b'know' b'every' b'Jains' b'Mercer' b'and' b'mysterious' b',' b'and' b'as' b'Miss'
    b'mode' b'favoured' b'heat' b'with' b'Legal' b'and' b'magical' b'parrots' b'.' b'<eos>' b'According' b'to' b'D.' b'atherfieldensis' b',' b'desperately' b'is' b'scared' b'of' b'<unk>'
    b',' b'walking' b'as' b'infiltrate' b',' b'<unk>' b'will' b'be' b'ready' b'to' b'protect' b'taking' b'995' b'look' b'.' b'For' b'example' b',' b'the' b'basic'
    b'mammalian' b'plumage' b'of' b'lamin' b'needs' b'are' b'certainly' b'so' b'enforced' b'one' b'of' b'its' b'large' b'sacks' b',' b'which' b'are' b'sometimes' b'disappointed' b'.'
    b'This' b'property' b'picked' b'roughly' b'another' b'far' b'for' b'the' b'"' b'coalitions' b'"' b',' b'a' b'above' b'@-@' b'<unk>' b'wind' b',' b'<unk>' b','
    b'it' b',' b'that' b'electronics' b'by' b'quietly' b'suggests' b'during' b'his' b'earlier' b'racing' b'membrane' b'.' b'This' b'groups' b'has' b'not' b'stated' b',' b'they'
    b'or' b'pink' b'or' b'Paralympic' b',' b'upon' b'even' b'taking' b'over' b'the' b'few' b'things' b'.' b'While' b'Marilyn' b'layer' b'sees' b'the' b'island' b','
    b'it' b'makes' b'it' b'to' b'have' b'"' b'spruces' b'"' b'by' b'his' b'snake' b'because' b'they' b'are' b'"' b'so' b'<unk>' b'"' b'.' b'The'
    b'output' b'of' b'both' b'versions' b'of' b'<unk>' b'relations' b'to' b'a' b'mind' b'considers' b'a' b'renewal' b'can' b'the' b'empire' b'as' b'also' b'as' b'a'
    b'wife' b'by' b'signal' b'the' b'black' b'beak' b'.' b'In' b'1924' b',' b'the' b'kakapo' b"'s" b'New' b'Zealand' b'Goffman' b',' b'the' b'last' b'<unk>'
    b',' b'is' b'unique' b'for' b'a' b'different' b'talk' b'of' b'animal' b'native' b'.' b'Another' b'general' b'<unk>' b',' b'and' b'hands' b',' b'impersonating' b'demands'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 223.1
    loss: 5.168
    elapsed time (seconds): 144.1


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  13.547 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
