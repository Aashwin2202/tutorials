.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'relationships' b'out' b'by' b'6' b'\xe2\x80\x93' b'15' b',' b'March' b'11' b',' b'in' b'turn' b'before' b'a' b'planet' b'mark' b';' b'however' b',' b'the'
    b'stegosaurid' b'were' b'written' b'in' b'Ulster' b'before' b'Associated' b"'s" b'false' b'correspondence' b'.' b'retreats' b'to' b'casting' b'Curtis' b',' b'O' b"'Malley" b'considers' b'"'
    b'the' b'Dahlonega' b'"' b'for' b'their' b'needs' b'to' b'the' b'tomb' b'between' b'Jerusalem' b'.' b'He' b'had' b'chair' b'that' b'analysts' b'should' b'be' b'subject'
    b'to' b'sea' b'way' b'was' b'put' b'into' b'ocean' b'literature' b'.' b'Finally' b',' b'on' b'December' b'19' b',' b'1769' b',' b'with' b'the' b'Brethren'
    b'year' b',' b'insight' b'including' b'early' b'family' b',' b'both' b'displayed' b'@-@' b'in' b'@-@' b'length' b'half' b'along' b'34' b'%' b'of' b'four' b'increases'
    b',' b'combined' b'that' b'O' b"'Malley" b'spent' b'a' b'end' b'on' b'a' b'struggles' b'to' b'a' b'length' b'they' b'were' b'.' b'<eos>' b'With' b'the'
    b'majority' b'of' b'Formula' b'One' b'biographies' b'they' b'written' b',' b'Labour' b'State' b'put' b'forthcoming' b'events' b'from' b'music' b';' b'they' b'adopted' b'compositions' b'for'
    b'the' b'Pickering' b'were' b'built' b'on' b'the' b'"' b'Ha' b'Band' b'Cutting' b'"' b'.' b'<eos>' b'The' b'fictional' b'Fighters' b'has' b'significant' b'Dade' b"'s"
    b'regional' b'model' b',' b'while' b'the' b'identity' b'of' b'the' b'design' b'and' b'Papa' b'Mysteries' b'venture' b'in' b'a' b'<unk>' b'valley' b'which' b'aired' b'by'
    b'its' b'and' b'nearby' b'reforms' b'.' b'Controversies' b'are' b'also' b'seen' b'as' b'anthology' b"'s" b'pleasure' b'.' b'It' b'was' b'the' b'highly' b'bones' b'for'
    b'officials' b'referred' b'to' b'descriptions' b'of' b'or' b'<unk>' b'it' b'in' b'the' b'Gulf' b'of' b'2000' b'.' b'Urania' b'who' b'never' b'lived' b'with' b'Virgil'
    b'Rhythms' b',' b'who' b'deemed' b'"' b'their' b'name' b'which' b'would' b'be' b'playing' b'of' b'a' b'lot' b'of' b'dried' b'<unk>' b',' b'<unk>' b','
    b'planet' b'@-@' b'shaped' b',' b'<unk>' b'@-@' b'bottle' b',' b'emotional' b'stimmi' b',' b'too' b'as' b'it' b'may' b'be' b'songs' b'were' b'thus' b'with'
    b'than' b'more' b'.' b'"' b'A' b'collection' b'of' b'stories' b'may' b'be' b'made' b'by' b'American' b'1.c4' b'Dominic' b'turbulence' b',' b'relating' b'to' b'repairs'
    b'as' b'"' b'beings' b'@-@' b'or' b'@-@' b'old' b'<unk>' b',' b'cottonwood' b'for' b'hillside' b'and' b'converts' b'<unk>' b'"' b'slightly' b'.' b'It' b'also'
    b'took' b'50' b'years' b'to' b'transits' b':' b'No' b'Harris' b',' b'the' b'10th' b'Earl' b',' b'in' b'December' b'1977' b'.' b'<eos>' b'<eos>' b'='
    b'=' b'Gameplay' b'=' b'=' b'<eos>' b'<eos>' b'With' b'games' b',' b'such' b',' b'the' b'overall' b'of' b'the' b'game' b'takes' b'place' b'?' b'I'
    b',' b'inevitably' b'short' b'songs' b',' b'and' b'thin' b'mariners' b'such' b'as' b'causing' b'larger' b'writers' b'.' b'By' b'this' b'moment' b'Tech' b'was' b'the'
    b'sixth' b',' b'only' b'until' b'its' b'fiction' b'to' b'leave' b'a' b'troubled' b'biography' b'such' b'as' b'the' b'Trinsey' b';' b'reunion' b'in' b'instrument' b'is'
    b'a' b'seventh' b'boy' b'from' b'Palmyra' b'.' b'Hornung' b'stated' b'that' b'such' b'a' b'statute' b'"' b'outflanked' b'Argentine' b'military' b'development' b';' b',' b'secured'
    b'viewers' b'on' b'his' b'form' b'up' b'.' b'bad' b'being' b'ported' b'to' b'<unk>' b'"' b'and' b'that' b'"' b'when' b'there' b'is' b'cast' b'and'
    b'that' b'Ramillies' b'are' b'so' b'true' b'that' b'someone' b'set' b'him' b'the' b'Bethany' b'alien' b'rebuild' b',' b'they' b"'ve" b'unsuited' b'over' b'.' b'It'
    b'is' b'more' b'important' b'down' b'to' b'that' b'is' b'Making' b'@-@' b'Scottie' b'by' b'them' b'of' b'comics' b',' b'allowing' b'extending' b'how' b'it' b'are'
    b'fans' b'to' b'get' b'.' b'"' b'A' b'period' b'of' b'Welsh' b'net' b'are' b'rejected' b',' b'but' b'of' b'time' b'he' b'set' b'the' b'Month'
    b'an' b'grandiose' b'silver' b'story' b'corporations' b'less' b'than' b'gable' b'Will' b'Randolph' b'store' b',' b'after' b'Nancy' b'Carroll' b',' b'<unk>' b'(' b'condom' b'\xc3\x85lesund'
    b',' b'1888' b')' b'and' b'Constable' b'(' b'1850' b'"' b'<unk>' b'"' b')' b'.' b'One' b'notable' b'nature' b':' b'<eos>' b'Clement' b'cakes' b'are'
    b'respected' b',' b'mechanical' b'or' b'long' b'sucks' b',' b'a' b'partial' b'composer' b',' b'or' b'<unk>' b'.' b'Consequently' b',' b'it' b'does' b'not' b'postpone'
    b'or' b'people' b'in' b'Britain' b',' b'but' b'in' b'her' b'final' b'potentially' b'control' b'.' b'Males' b'may' b'be' b'closely' b'jokes' b'a' b'planet' b','
    b'<unk>' b',' b'as' b'Odaenathus' b'resemble' b'them' b'.' b'When' b'they' b'remained' b'reflecting' b',' b'confront' b'the' b'eyes' b',' b'Municipality' b'it' b'didn' b"'t"
    b'melody' b'on' b'guilt' b',' b'either' b'ago' b',' b'Hyperion' b',' b'unlike' b'the' b'subterranean' b'grief' b'.' b'Bart' b'Encore' b'bias' b'this' b'specimen' b'can'
    b'never' b'be' b'repeated' b'around' b'her' b'hand' b',' b'in' b'which' b'respawn' b'can' b'be' b'any' b'sing' b'from' b'couldn' b'One' b'Shakespeare' b'.' b'<eos>'
    b'Jumping' b':' b'Magic' b'<eos>' b'Shakespeare' b'Two' b'bolt' b'on' b'<unk>' b',' b'a' b'Mandan' b'manner' b'who' b'was' b'known' b'to' b'offer' b'the' b'ravine'
    b'.' b'The' b'star' b'<unk>' b'them' b',' b'even' b'depicted' b'to' b'foxes' b'.' b'However' b',' b'the' b'platypus' b'Baum' b'against' b'a' b'nearby' b'torso'
    b'.' b'They' b'inhabited' b'its' b'language' b'a' b'short' b'form' b'and' b'with' b'the' b'series' b'all' b'to' b'look' b'.' b'sound' b',' b'then' b'fades'
    b'and' b'do' b'a' b'appearance' b',' b'who' b'"' b'try' b'to' b'engage' b'dead' b',' b'a' b'Grecian' b'emotions' b',' b'and' b'Button' b'.' b'"'
    b'One' b'players' b'link' b'a' b'stretch' b'of' b'Ceres' b'and' b'perfectly' b'suitably' b'relationships' b'.' b'Portable' b'Assistant' b'craters' b'is' b'no' b'set' b'when' b'he'
    b'be' b'there' b'by' b'her' b'broad' b'model' b'for' b'themselves' b'.' b'<eos>' b'In' b'1961' b',' b'the' b'NASA' b'Association' b'can' b'be' b'a' b'closest'
    b'penultimate' b'percentage' b'.' b'A' b'1805' b'in' b'<unk>' b'and' b'1889' b'have' b'identified' b'"' b'taken' b'"' b'for' b'the' b'stories' b'and' b'satisfy' b'genes'
    b'with' b'pitched' b'but' b'need' b'.' b'As' b'they' b'are' b'interested' b'in' b'martial' b'behaviour' b',' b'they' b'often' b'shift' b'.' b'In' b'some' b'ways'
    b',' b'there' b'is' b'no' b'"' b'no' b'paradigm' b'species' b'"' b'monarch' b'for' b'ethnic' b'rainfall' b'.' b'<unk>' b',' b'this' b'well' b'<unk>' b'as'
    b'of' b'of' b'mid' b'@-@' b'submarine' b'industries' b';' b'while' b'<unk>' b',' b'his' b'kidnaps' b'employers' b'.' b'The' b'definitions' b'Mogadishu' b"'s" b'mother' b'<unk>'
    b'is' b'additionally' b'used' b'after' b'modeled' b'direction' b',' b'with' b'allowing' b'Mary' b'\xe2\x80\x99' b'name' b'when' b'she' b'facilitate' b'.' b'<eos>' b'Protesters' b':' b'"'
    b'Always' b'!' b'"' b'(' b'"' b'aft' b'"' b')' b'is' b'the' b'theme' b'of' b'God' b'by' b'Lorenzo' b',' b'and' b'was' b'co' b'@-@'
    b'native' b',' b'a' b'Dubliners' b'that' b'fruits' b'(' b'a' b'short' b'man' b')' b',' b'domesticated' b'organize' b';' b'the' b'throne' b'attract' b'a' b'ice'
    b'robe' b'of' b'Mars' b'Children' b',' b'which' b'burned' b'Biddenden' b'mercy' b':' b'"' b'Living' b'"' b'and' b'"' b'The' b'transformation' b'do' b'<unk>' b'retaliation'
    b',' b'hard' b'can' b'have' b'no' b'attractive' b',' b'facing' b'poem' b'or' b'repeat' b'.' b'As' b',' b'I' b"'re" b'some' b'practical' b',' b'very'
    b'towards' b'Perth' b',' b'he' b'won' b'here' b'regularly' b'flying' b'so' b')' b'again' b'and' b'<unk>' b'and' b'transcription' b'on' b';' b'rock' b'years' b'because'
    b'they' b"'re" b'thought' b'that' b'they' b"'m" b'"' b'.' b'Even' b'he' b'generated' b'the' b'game' b"'s" b'signature' b'scenes' b',' b'the' b'hills' b'at'
    b'least' b'can' b'be' b'made' b'by' b'Gilbert' b'!' b'Henry' b'\xe2\x80\x99' b'Dell' b"'s" b'compositions' b',' b'but' b'his' b'name' b'as' b'"' b'females' b'some'
    b'(' b'like' b'Thang' b'"' b')' b'is' b'focuses' b'from' b'all' b'foundations' b'or' b'elected' b'it' b'for' b'a' b'good' b'servant' b',' b'other' b'everyday'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 212.1
    loss: 5.168
    elapsed time (seconds): 140.7


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  59.018 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
