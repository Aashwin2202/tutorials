.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'and' b'Nutter' b',' b'which' b'must' b'also' b'indicate' b'without' b'a' b'<unk>' b'Ushant' b'other' b'of' b'them' b'.' b'muddy' b'though' b'the' b'administrative' b'migrate'
    b'was' b'too' b'arranged' b'from' b'their' b'<unk>' b',' b'they' b'are' b'frustrated' b',' b'they' b"'ve" b'East' b'sounds' b'suggestions' b'for' b'observations' b'on' b'possibly'
    b'deserted' b',' b'often' b'235' b',' b'gaining' b'of' b'some' b'worse' b'iron' b'thoughts' b'that' b'differs' b'.' b'In' b'particular' b',' b'Fiordland' b',' b'and'
    b'Hyderabad' b',' b'sy\xc4\x81dv\xc4\x81da' b'was' b'possibilities' b'.' b'Osmond' b'also' b'decided' b'to' b'run' b'that' b'their' b'progress' b'of' b'commercial' b'vaulting' b'results' b'as' b'the'
    b'very' b'powerful' b'obvious' b',' b'growing' b'reasons' b',' b'throughout' b'his' b'affectionate' b'support' b'and' b'trapped' b'respond' b'to' b'each' b'other' b'.' b'If' b'it'
    b'leaves' b',' b'they' b'can' b'be' b'more' b'engagement' b'and' b'also' b'highly' b'difficult' b'in' b'his' b'life' b'.' b'They' b'then' b'attend' b'people' b'('
    b'God' b'of' b'Venus' b')' b',' b'posters' b'William' b'S.' b'Rivera' b'and' b'naturalist' b'337' b'(' b'Sentence' b')' b'.' b'Despite' b'Steve' b'<unk>' b'he'
    b'decides' b'to' b'use' b'up' b'the' b'head' b'pair' b'of' b'in' b'along' b'the' b'show' b',' b'they' b'find' b'how' b'confirm' b'<unk>' b';' b'Crash'
    b'<unk>' b'Israel' b'closely' b'provided' b'an' b'independent' b'advertisement' b'to' b'establish' b'the' b'decline' b'of' b'five' b'or' b'90' b'in' b'the' b'series' b'.' b'As'
    b'starting' b'between' b'February' b'15' b'seconds' b',' b'the' b'planet' b'/' b'argument' b'learned' b'sit' b'over' b'Royal' b'Britain' b'.' b'Also' b',' b'Western' b'Americans'
    b'were' b'killed' b',' b'interpreted' b'to' b'<unk>' b'spirit' b'.' b'Eventually' b',' b'the' b'current' b'divines' b'<unk>' b'hath' b'eligible' b'about' b'Bell' b'.' b'Campbell'
    b'garments' b',' b'civilians' b'with' b'<unk>' b'marks' b'after' b'Osmond' b'.' b'In' b'intrinsic' b',' b'the' b'first' b'to' b'arrive' b'for' b'a' b'funeral' b'from'
    b'subsurface' b'variants' b'by' b'Blackmon' b'of' b'this' b'is' b'honey' b"'s" b'"' b'<unk>' b'"' b',' b'Barn' b',' b'which' b'Lust' b'laid' b'a' b'unnecessary'
    b'framework' b'of' b'commerce' b'in' b'Christ' b',' b'a' b'god' b'to' b'young' b'hang' b',' b'it' b'without' b'the' b'Strategic' b'Wars' b'yet' b'specimens' b';'
    b'common' b'contributions' b'on' b'produce' b'between' b'something' b'earthquake' b'630' b'in' b'Hong' b'Diego' b'.' b'He' b'was' b'the' b'first' b'candidate' b'on' b'the' b'areas'
    b'to' b'bring' b'to' b'maintain' b'.' b'David' b'Metromedia' b'and' b'New' b'York' b"'s" b'Gharana' b'Among' b'Edgeworth' b'discovers' b'Isles' b'to' b'moss' b'for' b'about'
    b'150' b'%' b':' b'he' b'cannot' b'appear' b'to' b'engage' b'up' b'into' b'control' b'of' b'nests' b'to' b'have' b'stood' b'.' b'One' b'extent' b'mobile'
    b'numbers' b'is' b'adopted' b'.' b'<unk>' b'areas' b'from' b'Prussia' b'are' b'Sinner' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Flight' b'cricket' b'and' b'impact' b'='
    b'=' b'<eos>' b'<eos>' b'In' b'his' b'introduction' b'he' b'married' b'with' b'modern' b'aristocratic' b'infect' b',' b'and' b'there' b'are' b'many' b'Eighth' b'descriptions' b'of'
    b'districts' b'(' b'stands' b'to' b'Raemka' b'and' b'Earth' b',' b'to' b'yield' b'damsel' b'from' b'Beginning' b'in' b')' b'having' b'almost' b'significantly' b'.' b'Many'
    b'Neolithic' b'surfaces' b'do' b'not' b'accept' b'to' b'dominion' b'Ushant' b'as' b'the' b'accolade' b',' b'at' b'19' b'years' b',' b'like' b'their' b'involvement' b'above'
    b'Impact' b'using' b'it' b'.' b'Despite' b',' b'events' b'are' b'very' b'dramatic' b'at' b'1' b'in' b'(' b'76' b'\xe2\x80\x93' b'100' b'kilometers' b')' b'overall'
    b'and' b'used' b'in' b'nine' b'groups' b'.' b'<eos>' b'As' b'each' b'species' b'of' b'some' b'individuals' b',' b'kitsunebi' b'and' b'Haydn' b'can' b'have' b'indeed'
    b'been' b'killed' b'with' b'some' b'illustration' b':' b'speculations' b',' b'his' b'neck' b'probably' b'Technologies' b',' b'endgame' b',' b'and' b'food' b'tables' b',' b'especially'
    b'though' b'running' b'to' b'a' b'eye' b'.' b'Their' b'first' b'Ultratip' b'calculations' b'appealed' b':' b'that' b'Plateau' b'forms' b'rapidly' b'helped' b'after' b'condemnation' b'seed'
    b'.' b'These' b'information' b'Aurangzeb' b'was' b'surprised' b'by' b'a' b'batsman' b'hall' b',' b'with' b'safety' b'off' b'and' b'animator' b'@-@' b'sided' b',' b'one'
    b'of' b'their' b'incoming' b'high' b'trips' b',' b'and' b'impregnated' b'from' b'kakapo' b'has' b'vary' b'from' b'some' b'rows' b'.' b'<eos>' b'<eos>' b'=' b'='
    b'Popular' b'performance' b'=' b'=' b'<eos>' b'<eos>' b'filtered' b'of' b'Ceres' b'appear' b'towards' b'a' b'flock' b'soon' b'than' b'membranes' b'then' b'involved' b'on' b'all'
    b'new' b'areas' b',' b'including' b'larger' b'function' b'such' b'as' b'word' b'seed' b',' b'mound' b'and' b'salt' b',' b'including' b'Wes' b'concepts' b',' b'Modern'
    b'\xc2\xb5m' b',' b'simply' b'very' b'specialized' b',' b'though' b'the' b'most' b'than' b'the' b'abundance' b'of' b'tubes' b'from' b'body' b'DNA' b'displays' b'has' b'forth'
    b'.' b'<eos>' b'Then' b'for' b'American' b'over' b'Patricia' b'Mullen' b"'s" b'portion' b'of' b'trees' b',' b'it' b'holds' b'that' b'major' b'numbers' b'of' b'all'
    b'sophisticated' b'spots' b'are' b'"' b'thick' b'"' b',' b'although' b'they' b'are' b'entering' b'to' b'Stalingrad' b',' b'when' b'some' b'were' b'taken' b'to' b'be'
    b'seen' b'by' b'a' b'small' b'amount' b'of' b'Brandywine' b'techniques' b'that' b'may' b'typically' b'eat' b'.' b'Although' b'not' b'extant' b',' b'Richard' b'@-@' b'M.'
    b'!' b'option' b'extant' b'Doofenshmirtz' b',' b'killed' b'with' b'accusation' b'from' b'Simone' b'on' b'16' b'December' b'1878' b'.' b'Thirteen' b'other' b'are' b'effective' b'.'
    b'<eos>' b'The' b'males' b'affects' b'evidence' b'and' b'rocky' b'tradition' b'of' b'the' b'convict' b',' b'including' b'movement' b'that' b'Seasons' b'pectoral' b'damage' b'.' b'Many'
    b'authors' b'such' b'as' b'Ferb' b'breached' b'<unk>' b',' b'also' b'approximately' b'the' b'forested' b'422nd' b'habitats' b'.' b'<eos>' b'Common' b'starlings' b'consists' b'of' b'them'
    b',' b'often' b'larger' b'.' b'Where' b'there' b'are' b'no' b'evidence' b'of' b'adults' b',' b'eating' b'around' b'29' b'%' b'of' b'common' b'M\xc4\x81ori' b'are'
    b'unknown' b'.' b'In' b'a' b'attempt' b'to' b'be' b'seen' b',' b'they' b'may' b'cause' b'low' b'compound' b'care' b'or' b'supernatural' b'flightless' b'damage' b'.'
    b'Iguanodon' b'are' b'hypothesized' b'that' b'targets' b'their' b'beak' b',' b'doesn' b'activity' b'and' b'or' b'tree' b'was' b'struck' b'.' b'<unk>' b'could' b'be' b'on'
    b'return' b',' b'and' b'even' b'Abby' b'any' b'mitosis' b'believe' b'they' b'may' b'be' b'justified' b'.' b'The' b'males' b'were' b'probably' b'known' b'before' b'habitat'
    b'fire' b'.' b'<unk>' b'a' b'exchange' b'of' b'mass' b'waters' b'that' b'be' b'<unk>' b'and' b'conducted' b'.' b'One' b'female' b'remains' b'of' b'gross' b'events'
    b'mostly' b'exist' b',' b'often' b'long' b'because' b'more' b'genetic' b'as' b'they' b'often' b'have' b'New' b'Zealand' b'.' b'<eos>' b'Young' b'areas' b'contain' b'for'
    b'unclear' b'importins' b'pay' b'in' b'the' b'Siege' b'food' b',' b'where' b'their' b'population' b'of' b'increased' b'@-@' b'rich' b'starling' b'body' b'outlets' b'floated' b'on'
    b'its' b'plant' b'.' b'Some' b'more' b'precise' b'is' b'catch' b'such' b'as' b'banished' b'certain' b'starlings' b'containing' b'meat' b',' b'divine' b'parrots' b'to' b'Dedan'
    b'.' b'In' b'areas' b',' b'they' b'are' b'good' b'to' b'<unk>' b'he' b'broadly' b'a' b'people' b'that' b'may' b'be' b'found' b'into' b'time' b'.'
    b'3' b';' b'humans' b'may' b'leave' b'it' b'throughout' b'Leningrad' b'to' b'be' b'advised' b'to' b'310' b'years' b',' b'Royton' b',' b'and' b'complains' b'throughout'
    b'very' b'sports' b'.' b'Following' b'example' b',' b'they' b'may' b'leave' b'royal' b'or' b'closer' b'.' b'In' b'Australia' b',' b'during' b'example' b',' b'they'
    b'evolved' b'a' b'riveted' b'of' b'food' b'look' b'from' b'other' b'local' b'fat' b'@-@' b'Aircraft' b'Jupiter' b'.' b'This' b'can' b'be' b'established' b'to' b'be'
    b'seen' b'with' b'jobs' b',' b'thousands' b'such' b'as' b'sensation' b',' b'iron' b',' b'orange' b',' b'<unk>' b',' b'and' b'recourse' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'Webb' b'=' b'=' b'<eos>' b'<eos>' b'Apart' b',' b'commonly' b'abundant' b'technique' b',' b'is' b'written' b'by' b'Egyptologists' b'and' b'gas' b','


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 210.3
    loss: 5.168
    elapsed time (seconds): 142.4


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  58.733 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
