.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'of' b'the' b'County' b'<unk>' b';' b'it' b'is' b'going' b'to' b'involve' b'<unk>' b'services' b',' b'especially' b'absence' b'.' b'Horses' b'were' b'also' b'making'
    b'more' b'direct' b'than' b'those' b'Balkan' b',' b'and' b'Northern' b'capable' b'of' b'such' b'prognostic' b'control' b'have' b'has' b'overcome' b'confusion' b'host' b'methods' b'.'
    b'<eos>' b'<eos>' b'=' b'=' b'Managerial' b'career' b'=' b'=' b'<eos>' b'<eos>' b'In' b'age' b',' b'young' b'racing' b',' b'is' b'now' b'subject' b'in'
    b'four' b'types' b',' b'as' b'much' b'in' b'other' b'areas' b',' b'French' b'schools' b',' b'<unk>' b',' b'treatments' b',' b'stationary' b',' b'<unk>' b','
    b'yellow' b',' b'<unk>' b',' b'<unk>' b'and' b'ventral' b'air' b',' b'but' b'is' b'closely' b'associated' b'by' b'<unk>' b'.' b'They' b'have' b'been' b'until'
    b'rare' b'that' b'it' b'is' b'collected' b'.' b'Some' b'is' b'different' b',' b'each' b'of' b'which' b'are' b'connected' b'throughout' b'a' b'pre' b'@-@' b'much'
    b'planet' b'.' b'In' b'the' b'proper' b'exchange' b',' b'each' b'evidence' b'lay' b'with' b'her' b'image' b'.' b'In' b'the' b'well' b'before' b'intersection' b'on'
    b'his' b'Shaolin' b'periods' b',' b'an' b'long' b',' b'its' b'exponent' b'lived' b'on' b'the' b'fish' b',' b'sometimes' b'apparently' b'gifted' b'and' b'<unk>' b'strongly'
    b'.' b'The' b'modern' b'eye' b'of' b'Kaifeng' b'is' b'Philip' b',' b'Screen' b'galericulata' b';' b'on' b'the' b'ground' b',' b'Operational' b'.' b'<eos>' b'Seven'
    b'birds' b',' b'such' b'as' b'<unk>' b',' b'uprooted' b',' b'tigers' b',' b'432' b',' b'organic' b'and' b'female' b'<unk>' b',' b'<unk>' b'that' b'the'
    b'genus' b"'s" b'boundaries' b'depend' b'and' b'infertility' b'external' b'methods' b'as' b'he' b'is' b'not' b'<unk>' b'.' b'The' b'gleba' b'picked' b'as' b'it' b'has'
    b'Marilyn' b'to' b'hide' b'a' b'new' b'nitrogen' b',' b'where' b'it' b'will' b'be' b'chest' b'.' b'<eos>' b'I.' b'Peterson' b'may' b'be' b'separated' b'by'
    b'and' b'over' b'about' b'1' b'%' b',' b'after' b'the' b'original' b'names' b'of' b'red' b',' b'dark' b'areas' b';' b'sufficiently' b'garrison' b'flattened' b'on'
    b'whether' b'the' b'eggs' b'<unk>' b'individual' b'rule' b'of' b'sailor' b'e' b'flats' b',' b'with' b'my' b'male' b',' b'cricket' b',' b'or' b'their' b'air'
    b'behind' b'Stanis\xc5\x82aw' b'hunter' b'<unk>' b'Criss' b'.' b'Both' b',' b'reading' b'or' b'moor' b'"' b'may' b'cause' b'a' b'total' b'spot' b'2000' b'Oakwood' b'naturally'
    b',' b'bound' b',' b'shared' b'air' b'template' b'in' b'any' b'current' b'countries' b'of' b'an' b'dangerous' b'angle' b'"' b'.' b'In' b'this' b'season' b','
    b'it' b'is' b'generally' b'asteroid' b'having' b'fallen' b'to' b'it' b',' b'which' b'they' b'may' b'sky' b'dust' b'or' b'developed' b'these' b'eggs' b'.' b'<eos>'
    b'The' b'Linga' b'with' b'female' b'dust' b'distribution' b'is' b'mask' b'in' b'less' b'powerful' b',' b'and' b'remained' b'up' b',' b'aged' b'132' b'million' b'individuals'
    b',' b'such' b'as' b'the' b'numbers' b'of' b'pore' b'owl' b',' b'even' b'compelling' b'by' b'a' b'benevolent' b'sphinx' b'.' b'A' b'female' b'snap' b'is'
    b'very' b'distinctive' b'.' b'Still' b'injuries' b'and' b'forbs' b'cannot' b'be' b'monogamous' b'.' b'<eos>' b'In' b'2015' b',' b'they' b'are' b'synonymous' b'fully' b'by'
    b'coteries' b'in' b'the' b'Southern' b'beings' b'of' b'the' b'year' b'with' b'them' b'.' b'<eos>' b'Stockwell' b"'s" b'many' b'responses' b'from' b'licensing' b'is' b'a'
    b'cross' b'tree' b'which' b'Qiu' b'exact' b'proceedings' b'for' b'prey' b'and' b'age' b'.' b'<eos>' b'An' b'greater' b'type' b'of' b'these' b'languages' b'reflects' b'Odaenathus'
    b"'s" b'place' b',' b'but' b'many' b'consensus' b',' b'Agricultural' b'or' b'truth' b'popcorn' b',' b'largely' b'taking' b'in' b'1882' b'and' b'particular' b'cases' b'.'
    b'These' b'breeding' b'sex' b'grow' b'on' b'the' b'ground' b'contained' b'251' b',' b'wet' b'starling' b',' b'and' b'<unk>' b'fledging' b':' b'it' b'may' b'be'
    b'revived' b'from' b'25' b'\xe2\x80\x93' b'other' b'feet' b'(' b'8' b'ft' b')' b'to' b'an' b'point' b'when' b'their' b'female' b'will' b'prove' b'.' b'Despite'
    b'the' b'size' b'of' b'cliffs' b',' b'they' b'may' b'mark' b'since' b'20' b'%' b'of' b'their' b'illness' b',' b'carrying' b'only' b'the' b'species' b'without'
    b'Venus' b'as' b'squatters' b'about' b'if' b'it' b'can' b'be' b'an' b'fine' b'meeting' b'.' b'Indeed' b',' b'they' b'have' b'volatile' b'eggs' b';' b'they'
    b'have' b'their' b'burial' b',' b'their' b'<unk>' b'or' b'tantrik' b'and' b'prey' b'.' b'Some' b'birds' b'predation' b',' b'typically' b'as' b'preventing' b'Releases' b'a'
    b'little' b'bite' b'of' b'their' b'surface' b',' b'improve' b'figures' b'win' b'by' b'<unk>' b'.' b'<eos>' b'There' b'are' b'no' b'<unk>' b',' b'ordinary' b','
    b'and' b'initiates' b',' b'and' b'in' b'turn' b',' b'generally' b'when' b'they' b'have' b'brought' b'complexes' b'.' b'The' b'more' b'kakapo' b'of' b'tissue' b'become'
    b'among' b'remnant' b'tactics' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Places' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Because' b'disturbed' b'so' b'foraging' b'up'
    b'back' b',' b'they' b'cannot' b'treat' b'them' b'without' b'structure' b'and' b'does' b'not' b'be' b'"' b'always' b'wiped' b'in' b'of' b'constant' b'herds' b'that'
    b'can' b'ever' b'be' b'paid' b'to' b'it' b'.' b'"' b'v.' b'v.' b'Weyden' b'never' b'recommended' b'that' b'the' b'first' b'report' b'it' b'is' b'able'
    b'to' b'classify' b'females' b'for' b'Kakapo' b'and' b'<unk>' b',' b'which' b'has' b'helped' b'causing' b'a' b'satellite' b'sculpture' b'there' b'is' b'possession' b'of' b'wooden'
    b'properties' b'.' b'The' b'kakapo' b'ends' b'at' b'a' b'unknown' b'distinctive' b'as' b'they' b'Cort\xc3\xa9s' b'occurs' b'for' b'both' b'grey' b',' b'and' b'the' b'kakapo'
    b'becomes' b'an' b'mystery' b'or' b'measure' b'young' b'times' b'on' b'a' b'<unk>' b'parrot' b'.' b'The' b'spore' b'mentality' b'is' b'done' b',' b'into' b'a'
    b'larger' b'movement' b'than' b'29' b'times' b',' b'the' b'same' b'to' b'do' b'so' b'increased' b'to' b'<unk>' b'as' b'it' b'can' b'become' b'nevertheless' b'constantly'
    b'inside' b'.' b'They' b'do' b'not' b'feed' b'until' b'running' b'to' b'follow' b'additional' b'villages' b',' b'although' b'the' b'chicks' b'does' b'two' b'islands' b'are'
    b'assumed' b'to' b'test' b'it' b'out' b'.' b'In' b'1958' b',' b'it' b'spaces' b'off' b'disturbing' b'<unk>' b'Shiva' b'.' b'When' b'Mariana' b'extremely' b'<unk>'
    b'<unk>' b'<unk>' b'<unk>' b'it' b'when' b'their' b'sediment' b'resumed' b'survival' b',' b'they' b'stretches' b'for' b'eye' b'ones' b'.' b'This' b'Lohan' b'grass' b'is'
    b'very' b'made' b'when' b'it' b'was' b'seeds' b'in' b'liquid' b',' b'a' b'small' b'monogamous' b'cell' b'that' b'are' b'quoted' b'by' b'interest' b'throws' b'in'
    b'periods' b'where' b'distinguish' b'the' b'breeding' b'slopes' b'of' b'<unk>' b'.' b'Large' b'"' b'most' b'thousand' b'molecules' b'"' b'followed' b'in' b'horizontal' b'conifers' b','
    b'although' b'found' b'plastered' b'the' b'same' b'group' b'of' b'100' b'.' b'Another' b'possible' b'figure' b'of' b'well' b',' b'the' b'gills' b'are' b'satisfy' b'to'
    b'circulate' b'for' b'it' b'.' b'With' b'other' b'flightless' b'calls' b':' b'circulation' b',' b'burns' b',' b'eucalypts' b',' b'Hypacrosaurus' b',' b'officials' b',' b'thermonuclear'
    b'frequency' b'and' b'elements' b'causes' b'the' b'Amun' b'.' b'The' b'condition' b'of' b'home' b',' b'by' b'consumption' b',' b'have' b'little' b'further' b'(' b'occur'
    b'in' b'with' b'many' b'<unk>' b')' b',' b'frequently' b'dimension' b'"' b'Maybe' b'"' b',' b'who' b'Kanpur' b'or' b'emphasise' b'.' b'Tiber' b'does' b'not'
    b'archaic' b'DNA' b'jumpers' b"'" b'wings' b'to' b'one' b'million' b'and' b'difficult' b'to' b'exit' b'rates' b'of' b'time' b'or' b'manufactured' b'the' b'female' b'.'
    b'Some' b'DNA' b'drop' b'feathers' b'have' b'significant' b'Aziz' b'temperatures' b',' b'compared' b'to' b'the' b'wild' b'with' b'half' b'of' b'4' b':' b'<unk>' b'('
    b'1896' b')' b',' b'whereas' b'gems' b'depicted' b'a' b'maximum' b'or' b'anal' b'technique' b',' b'with' b'one' b'that' b'Helsinki' b'becomes' b'distinguished' b'if' b'is'
    b'greater' b'.' b'<eos>' b'A' b'common' b'bodies' b',' b'which' b'is' b'known' b'to' b'conduct' b'any' b'other' b'species' b'of' b'taxonomy' b',' b'reported' b'them'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 233.5
    loss: 5.168
    elapsed time (seconds): 149.6


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  29.321 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
