.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'simply' b'survive' b'to' b'support' b'it' b'to' b'assess' b',' b'forming' b'no' b'Africa' b',' b'giving' b'<unk>' b'II' b'(' b'Paul' b'Tiger' b')' b','
    b'Hotel' b'Point' b'wrote' b'provider' b'to' b'exerted' b'<unk>' b'community' b',' b'<unk>' b',' b'Out' b',' b'precisely' b'Seine' b'in' b'Ireland' b'.' b'<eos>' b'The'
    b'series' b'attracted' b'Bus' b'background' b'islands' b'to' b'develop' b'them' b',' b'having' b'been' b'"' b'strong' b'metalwork' b'"' b'and' b'arrangement' b',' b'while' b'WWII'
    b',' b'as' b'probably' b'Pryce' b'moved' b'double' b'%' b'to' b'both' b'accusation' b'.' b'The' b'mines' b'ordered' b'little' b'"' b'more' b'<unk>' b'(' b'usually'
    b'a' b'stationary' b'planet' b'[' b'or' b'the' b'Earth' b']' b'speaks' b'like' b'abeam' b',' b'more' b'evangelical' b',' b')' b'and' b'Arsenal' b'[' b'he'
    b']' b'appeared' b'in' b'and' b'without' b'it' b'or' b'was' b'hard' b'a' b'whole' b'partially' b'suddenly' b'bedroom' b'.' b'"' b'<eos>' b'In' b'1984' b'Walpole'
    b'began' b'a' b'increase' b'for' b'zincography' b'of' b'Zuniceratops' b'or' b'Isaac' b'Nehru' b'.' b'The' b'study' b'Mackinaw' b'II' b'of' b'David' b'F.' b'!' b'!'
    b'this' b'consequence' b'is' b'visited' b'as' b'George' b',' b'in' b'1553' b',' b'began' b'the' b'image' b'of' b'Lithuania' b'.' b'Threatened' b'upon' b'in' b'maker'
    b'Who' b'appears' b'to' b'incorporate' b'against' b'the' b'creation' b'of' b'his' b'young' b'Kubla' b'Mack' b'"' b'botanist' b'<unk>' b'!' b'"' b'from' b'Charles' b'Rockefeller'
    b'by' b'Jorge' b'Wyatt' b',' b'Walpole' b'reported' b'that' b'there' b'could' b'be' b'excellent' b'.' b'In' b'the' b'episode' b',' b'Sungei' b'<unk>' b'stated' b'in'
    b'"' b'Christ' b'of' b'Surrender' b'"' b'due' b'to' b'FITs' b',' b'reproduction' b'<unk>' b'and' b'account' b'.' b'Shapur' b'improvements' b'with' b'the' b'series' b"'s"
    b'daughter' b'netting' b',' b'California' b',' b'effectively' b'routine' b'at' b'July' b'5' b',' b'2006' b',' b'as' b'"' b'The' b'lengthy' b'favourites' b'that' b'reliability'
    b'considered' b',' b'They' b'are' b'evident' b'to' b'form' b',' b'/' b'maintaining' b'Refuge' b'initially' b'declined' b'in' b'1119' b'games' b'"' b'.' b'In' b'addition'
    b',' b'they' b'are' b'sometimes' b'exhibited' b'by' b'Sauvignon' b'Billy' b'evict' b'(' b'observed' b'as' b'their' b'third' b'to' b'surface' b'relation' b')' b'to' b'the'
    b'antisemitic' b'reduction' b'that' b'used' b'that' b'only' b'flees' b'in' b'Rockefeller' b'.' b'The' b'reviewer' b'Christianity' b'is' b'also' b'experienced' b'after' b'Electronic' b'State' b'last'
    b'dedicated' b'as' b'traits' b'trip' b',' b'they' b'remained' b'segments' b'out' b'.' b'The' b'narrator' b'wrote' b'that' b'Stefani' b'arrived' b'octaves' b'on' b'a' b'"'
    b'Species' b',' b'"' b'<unk>' b'to' b'prevent' b'a' b'advertisement' b'by' b'situations' b'.' b'The' b'story' b'invited' b'it' b'as' b'legal' b'pitchers' b',' b'in'
    b'which' b'Hairan' b'Formula' b'Bang' b'appears' b'the' b'game' b'to' b'buy' b'full' b'@-@' b'criminal' b'crime' b'2000' b'game' b'or' b'<unk>' b'having' b'supposed' b'about'
    b'a' b'few' b'years' b'.' b'The' b'not' b"'" b'vigorous' b'trusted' b'reliable' b'scarf' b'of' b'Humble' b'was' b'arranged' b',' b'however' b',' b'that' b'only'
    b'come' b'to' b'play' b'into' b'it' b',' b'an' b'new' b'American' b'amount' b'of' b'Navigation' b'Watson' b"'" b'poetry' b'non' b'years' b'to' b'4' b'@.@'
    b'8' b'meters' b'(' b'5' b'@.@' b'2' b'in' b')' b'for' b'two' b'days' b'.' b'<eos>' b'Principe' b'losses' b'were' b'used' b'on' b'the' b'window'
    b'with' b'designers' b'and' b'420' b'common' b'social' b'nationalist' b'engines' b',' b'Op.' b'foals' b',' b'toyline' b'C.' b'Alex' b',' b'Jr' b',' b'the' b'University'
    b'of' b'California' b',' b'was' b'as' b'part' b'of' b'a' b'deputy' b'8' b'@.@' b'23' b'million' b'mushroom' b'game' b'college' b'football' b';' b'Dawn' b'recorded'
    b'work' b',' b'in' b'1900' b'.' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Regular' b'impact' b'=' b'=' b'<eos>' b'<eos>' b'Johann' b'Boom' b'Bang' b'!'
    b',' b'the' b'Anglican' b'video' b'since' b'the' b'18th' b'century' b')' b'was' b':' b'<eos>' b'Now' b'sited' b'or' b'57' b'time' b'.' b'Other' b'divides'
    b'stated' b',' b'are' b'met' b'on' b'27' b'August' b'1886' b'with' b'21' b'km' b'(' b'2' b'mi' b')' b'and' b'twenty' b'times' b',' b'philosophy'
    b'One' b'with' b'scientists' b'shield' b',' b'as' b'a' b'planet' b'.' b'For' b'example' b',' b'however' b',' b'no' b'seconds' b'and' b'design' b'for' b'derived'
    b'for' b'Games' b'in' b'combat' b'.' b'The' b'Race' b'is' b'based' b'on' b'a' b'average' b'orbit' b'(' b'2006' b')' b';' b'in' b'her' b'large'
    b'version' b'of' b'appoint' b'their' b'animal' b'"' b'is' b'a' b'subject' b'of' b'a' b'massive' b'mixture' b'of' b'Petts' b'.' b'"' b'<eos>' b'In' b'addition'
    b',' b'a' b'network' b'of' b'109' b'counties' b'in' b'the' b'new' b'language' b',' b'and' b'Uganda' b',' b'a' b'civilians' b'to' b'many' b'increase' b'is'
    b'aggressive' b',' b'while' b'was' b'owned' b'by' b'two' b'athletes' b',' b'probably' b'Telugu' b'nodes' b'.' b'2006' b',' b'enormous' b'incidents' b'preserved' b'out' b'such'
    b'as' b'Kenny' b'Spirits' b',' b'340' b'173' b',' b'and' b'construction' b',' b'disc' b'of' b'issuing' b'their' b'revenue' b':' b'"' b'[' b'...' b']'
    b'the' b'most' b'commonly' b'campaigning' b',' b'they' b"'re" b'notified' b'on' b'Hasbro' b'is' b'destroying' b'\xe2\x80\x99' b'like' b'rectilinear' b'around' b'<unk>' b',' b'and' b'it'
    b'handled' b'how' b'1978' b'<unk>' b'.' b'"' b'The' b'island' b'return' b',' b'just' b'to' b'keep' b'problems' b'against' b'establishing' b'jobs' b'.' b'<eos>' b'<eos>'
    b'=' b'=' b'<unk>' b'(' b'performance' b'=' b'=' b'<eos>' b'<eos>' b'Scenes' b'by' b'Defense' b'Michael' b'Brown' b'confirmed' b':' b'<eos>' b'"' b'The' b'bathtub'
    b'in' b'Our' b'Free' b'!' b'"' b',' b'known' b'as' b'Weekly' b'Richard' b'Leonard' b'(' b'The' b'later' b')' b'(' b'Theba' b')' b',' b'and'
    b'owl' b'(' b'1837' b')' b':' b'1938' b';' b'No.' b'2' b'Temple' b'(' b'Conrad' b')' b',' b'or' b'signals' b'clothing' b'(' b'1992' b')'
    b'.' b'The' b'Ministry' b'of' b'Scientology' b'and' b'Sutil' b'(' b'and' b'two' b'in' b'Morrison' b"'s" b'acrid' b'persons' b'reveals' b'after' b'Haydn' b')' b'thorough'
    b'.' b'While' b'many' b'other' b'European' b'astronomers' b'used' b'professionalism' b',' b'though' b'Patterson' b'placed' b'reference' b'to' b'Abramowitz' b'in' b'the' b'book' b'.' b'After'
    b'I' b'greatly' b'finds' b'seeds' b'between' b'allegiance' b',' b'Keeper' b'demanded' b'forms' b'a' b'lot' b'of' b'<unk>' b'<unk>' b'.' b'Marge' b'which' b'is' b'probably'
    b'non' b'@-@' b'promotional' b',' b'then' b'conformists' b'in' b'the' b'asteroid' b'again' b'(' b'RIAA' b')' b'and' b'its' b'effectiveness' b'in' b'the' b'nation' b'were'
    b'more' b'.' b'<eos>' b'<eos>' b'=' b'=' b'Economy' b'=' b'=' b'<eos>' b'<eos>' b'English' b'Primrose' b'as' b'the' b'common' b'epithet' b'minority' b'@.@' b'Omar'
    b',' b'native' b'by' b'James' b'Gui' b'III' b'from' b'Adult' b'Symphony' b'Baptist' b',' b'his' b'<unk>' b'<unk>' b'the' b'City' b'<unk>' b',' b'also' b'written'
    b'several' b'inscriptions' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'<unk>' b'=' b'=' b'=' b'<eos>' b'<eos>' b'Competitive' b'<unk>' b'and' b'its' b'character' b'suggest'
    b'the' b'story' b"'" b'transit' b'exile' b'were' b'the' b'portrayal' b'of' b'the' b'Texas' b'Civil' b'War' b'ever' b'"' b'with' b'many' b'years' b'from' b'a'
    b'newcomer' b'and' b'good' b'meaning' b'"' b'literature' b'that' b'could' b'be' b'doubtful' b'Mrs' b'Gustav' b'M.' b'Valentine' b',' b'who' b'intended' b'12' b'@,@' b'000'
    b'to' b'two' b'other' b'scoring' b'levels' b'of' b'pale' b',' b'on' b'mass' b'fund' b',' b'saving' b'Jupiter' b',' b'handling' b'a' b'garden' b'in' b'the'
    b'Somerset' b'Dynasty' b',' b'which' b'translating' b'an' b'tooth' b'and' b'the' b'vinyl' b'crime' b'to' b'assist' b'the' b'behaviour' b'of' b'empires' b'.' b'In' b'the'
    b'2012' b'season' b',' b'an' b'primary' b'gun' b'horizontal' b'manipulate' b'was' b'the' b'beauty' b'of' b'detail' b'.' b'Apart' b'choice' b',' b'there' b'is' b'first'
    b'several' b'members' b'for' b'archaeologists' b'release' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'The' b'locker' b'of' b'Lithuanian' b'imaging'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.738778


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 213.1
    loss: 5.168
    elapsed time (seconds): 142.5


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  2.060 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
