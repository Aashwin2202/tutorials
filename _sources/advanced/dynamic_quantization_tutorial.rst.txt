.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_dynamic_quantization_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_dynamic_quantization_tutorial.py:


(beta) Dynamic Quantization on an LSTM Word Language Model
==================================================================

**Author**: `James Reed <https://github.com/jamesr66a>`_

**Edited by**: `Seth Weidman <https://github.com/SethHWeidman/>`_

Introduction
------------

Quantization involves converting the weights and activations of your model from float
to int, which can result in smaller model size and faster inference with only a small
hit to accuracy.

In this tutorial, we'll apply the easiest form of quantization -
`dynamic quantization <https://pytorch.org/docs/stable/quantization.html#torch.quantization.quantize_dynamic>`_ -
to an LSTM-based next word-prediction model, closely following the
`word language model <https://github.com/pytorch/examples/tree/master/word_language_model>`_
from the PyTorch examples.


.. code-block:: default


    # imports
    import os
    from io import open
    import time

    import torch
    import torch.nn as nn
    import torch.nn.functional as F







1. Define the model
-------------------

Here we define the LSTM model architecture, following the
`model <https://github.com/pytorch/examples/blob/master/word_language_model/model.py>`_
from the word language model example.


.. code-block:: default


    class LSTMModel(nn.Module):
        """Container module with an encoder, a recurrent module, and a decoder."""

        def __init__(self, ntoken, ninp, nhid, nlayers, dropout=0.5):
            super(LSTMModel, self).__init__()
            self.drop = nn.Dropout(dropout)
            self.encoder = nn.Embedding(ntoken, ninp)
            self.rnn = nn.LSTM(ninp, nhid, nlayers, dropout=dropout)
            self.decoder = nn.Linear(nhid, ntoken)

            self.init_weights()

            self.nhid = nhid
            self.nlayers = nlayers

        def init_weights(self):
            initrange = 0.1
            self.encoder.weight.data.uniform_(-initrange, initrange)
            self.decoder.bias.data.zero_()
            self.decoder.weight.data.uniform_(-initrange, initrange)

        def forward(self, input, hidden):
            emb = self.drop(self.encoder(input))
            output, hidden = self.rnn(emb, hidden)
            output = self.drop(output)
            decoded = self.decoder(output)
            return decoded, hidden

        def init_hidden(self, bsz):
            weight = next(self.parameters())
            return (weight.new_zeros(self.nlayers, bsz, self.nhid),
                    weight.new_zeros(self.nlayers, bsz, self.nhid))







2. Load in the text data
------------------------

Next, we load the
`Wikitext-2 dataset <https://www.google.com/search?q=wikitext+2+data>`_ into a `Corpus`,
again following the
`preprocessing <https://github.com/pytorch/examples/blob/master/word_language_model/data.py>`_
from the word language model example.


.. code-block:: default


    class Dictionary(object):
        def __init__(self):
            self.word2idx = {}
            self.idx2word = []

        def add_word(self, word):
            if word not in self.word2idx:
                self.idx2word.append(word)
                self.word2idx[word] = len(self.idx2word) - 1
            return self.word2idx[word]

        def __len__(self):
            return len(self.idx2word)


    class Corpus(object):
        def __init__(self, path):
            self.dictionary = Dictionary()
            self.train = self.tokenize(os.path.join(path, 'train.txt'))
            self.valid = self.tokenize(os.path.join(path, 'valid.txt'))
            self.test = self.tokenize(os.path.join(path, 'test.txt'))

        def tokenize(self, path):
            """Tokenizes a text file."""
            assert os.path.exists(path)
            # Add words to the dictionary
            with open(path, 'r', encoding="utf8") as f:
                for line in f:
                    words = line.split() + ['<eos>']
                    for word in words:
                        self.dictionary.add_word(word)

            # Tokenize file content
            with open(path, 'r', encoding="utf8") as f:
                idss = []
                for line in f:
                    words = line.split() + ['<eos>']
                    ids = []
                    for word in words:
                        ids.append(self.dictionary.word2idx[word])
                    idss.append(torch.tensor(ids).type(torch.int64))
                ids = torch.cat(idss)

            return ids

    model_data_filepath = 'data/'

    corpus = Corpus(model_data_filepath + 'wikitext-2')







3. Load the pre-trained model
-----------------------------

This is a tutorial on dynamic quantization, a quantization technique
that is applied after a model has been trained. Therefore, we'll simply load some
pre-trained weights into this model architecture; these weights were obtained
by training for five epochs using the default settings in the word language model
example.


.. code-block:: default


    ntokens = len(corpus.dictionary)

    model = LSTMModel(
        ntoken = ntokens,
        ninp = 512,
        nhid = 256,
        nlayers = 5,
    )

    model.load_state_dict(
        torch.load(
            model_data_filepath + 'word_language_model_quantize.pth',
            map_location=torch.device('cpu')
            )
        )

    model.eval()
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): LSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): Linear(in_features=256, out_features=33278, bias=True)
    )


Now let's generate some text to ensure that the pre-trained model is working
properly - similarly to before, we follow
`here <https://github.com/pytorch/examples/blob/master/word_language_model/generate.py>`_


.. code-block:: default


    input_ = torch.randint(ntokens, (1, 1), dtype=torch.long)
    hidden = model.init_hidden(1)
    temperature = 1.0
    num_words = 1000

    with open(model_data_filepath + 'out.txt', 'w') as outf:
        with torch.no_grad():  # no tracking history
            for i in range(num_words):
                output, hidden = model(input_, hidden)
                word_weights = output.squeeze().div(temperature).exp().cpu()
                word_idx = torch.multinomial(word_weights, 1)[0]
                input_.fill_(word_idx)

                word = corpus.dictionary.idx2word[word_idx]

                outf.write(str(word.encode('utf-8')) + ('\n' if i % 20 == 19 else ' '))

                if i % 100 == 0:
                    print('| Generated {}/{} words'.format(i, 1000))

    with open(model_data_filepath + 'out.txt', 'r') as outf:
        all_output = outf.read()
        print(all_output)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    | Generated 0/1000 words
    | Generated 100/1000 words
    | Generated 200/1000 words
    | Generated 300/1000 words
    | Generated 400/1000 words
    | Generated 500/1000 words
    | Generated 600/1000 words
    | Generated 700/1000 words
    | Generated 800/1000 words
    | Generated 900/1000 words
    b'models' b'.' b'Turk' b'is' b'chosen' b'by' b'<unk>' b'the' b'house' b',' b'<unk>' b'telling' b'all' b'of' b'Bl\xc3\xa4tter' b'.' b'An' b'involvement' b'on' b'high'
    b'<unk>' b'garnered' b'developed' b'percent' b'halls' b',' b'it' b'would' b'be' b'head' b'that' b'he' b'will' b'grossly' b'by' b'archives' b'beyond' b'intellectual' b'<unk>' b'lines'
    b',' b'some' b'of' b'whom' b'are' b'short' b'throughout' b'New' b'Zealand' b'(' b'Cleveland' b')' b'.' b'It' b'is' b'abode' b'that' b'Boise' b'listed' b'the'
    b'Dubliners' b'in' b'the' b'second' b'and' b'early' b'NBA' b'It' b'or' b'they' b'are' b'classed' b'at' b'a' b'angle' b'.' b'For' b'cluster' b'centrosomes' b'w'
    b'nut' b'instead' b'were' b'found' b'down' b'and' b'did' b'not' b'speak' b'to' b'its' b'respective' b'effectiveness' b'.' b'On' b'26' b'November' b'1931' b',' b'Puritans'
    b'may' b'report' b'the' b'Rhodesian' b'Largs' b'@-@' b'ministry' b'of' b'85' b'The' b'series' b'.' b'The' b'tackle' b'has' b'two' b'direct' b'200th' b'baht' b'hockey'
    b'in' b'mangrove' b',' b'National' b'Hero' b'in' b'the' b'surface' b'of' b'2' b'@.@' b'7' b'in' b'(' b'4' b'@.@' b'2' b'in' b')' b','
    b'and' b'from' b'display' b'before' b'introduced' b'south' b'in' b'2016' b',' b'Hawai\xca\xbbi' b'Island' b'incorporated' b'back' b'calf' b',' b'when' b'he' b'is' b'previously' b'shown'
    b'.' b'It' b'was' b'one' b'of' b'three' b'children' b'(' b'see' b'with' b'well' b'"' b'canals' b'"' b')' b'in' b'2000' b',' b'then' b'from'
    b'Westinghouse' b',' b'26' b'%' b'venues' b'production' b',' b'and' b'<unk>' b'(' b'fortress' b'loss' b'of' b'two' b'Chamberlain' b')' b',' b'compared' b'to' b'establishing'
    b'high' b'rather' b'consistent' b'.' b'<eos>' b'<eos>' b'=' b'=' b'History' b'=' b'=' b'<eos>' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Malaya' b'=' b'='
    b'=' b'<eos>' b'<eos>' b'<unk>' b'today' b'and' b'the' b'fungus' b'were' b'also' b'mandatory' b'to' b'calculate' b'members' b'of' b'animals' b'.' b'Although' b'Kanata' b'items'
    b'and' b'crops' b'were' b'discarded' b',' b'there' b'is' b'one' b'of' b'six' b'thousand' b'\xe2\x80\x94' b'half' b',' b'with' b'Istanbul' b'and' b'chicks' b'fully' b'declared'
    b'the' b'lives' b'of' b'homes' b'that' b'lasted' b'on' b'Helms' b'been' b'seems' b'to' b'have' b'Lanois' b'.' b'In' b'the' b'other' b'@-@' b'tailed' b'English'
    b'language' b',' b'these' b'damage' b'robbers' b'<unk>' b',' b'who' b'gave' b'significant' b'Scientologists' b'on' b'resemble' b'New' b'Island' b'and' b'pests' b',' b'as' b'instigator'
    b',' b'their' b'two' b'books' b'and' b'arbitration' b'.' b'If' b'walls' b'were' b'a' b'simple' b'honour' b'to' b'take' b'broadleaf' b'topics' b'and' b'the' b'head'
    b'from' b'Carrington' b',' b'expanding' b'rats' b'in' b'2006' b'and' b'field' b',' b'they' b'seem' b'to' b'improve' b'them' b'.' b'Robert' b'Forming' b'engineering' b'Honduras'
    b'upon' b'Superman' b'union' b'to' b'Gallimard' b'because' b'of' b'molecules' b'and' b'Porter' b'and' b'definition' b',' b'the' b'Jupiter' b'model' b'and' b'<unk>' b'<unk>' b','
    b'which' b'pointed' b'accused' b'to' b'blow' b'with' b'the' b'police' b'network' b'to' b'die' b'.' b'In' b'1984' b'Walking' b'post' b'names' b'(' b'present' b','
    b'yellow' b'supplies' b')' b',' b'Echmarcach' b',' b'<unk>' b',' b'Heartbreak' b'and' b'water' b'care' b'that' b'power' b'to' b'be' b'of' b'Ireland' b'333' b'.'
    b'Some' b'survival' b'of' b'2006' b',' b'grounds' b'in' b'the' b'series' b',' b'collegiate' b'farms' b',' b'Venus' b',' b'1770' b',' b'<unk>' b',' b'<unk>'
    b',' b'and' b'Twenty' b'areas' b',' b'System' b',' b'<unk>' b',' b'derivatives' b',' b'and' b'<unk>' b'travel' b'.' b'The' b'nymphs' b'<unk>' b'the' b'Fiordland'
    b'planet' b'to' b'be' b'reconstructed' b'between' b'Chulkhurst' b'and' b'<unk>' b'.' b'cardboard' b',' b'variously' b'1135' b';' b'service' b',' b'tooth' b',' b'trauma' b','
    b'reissued' b'populations' b'and' b'Alabama' b'warmed' b'Khe' b'acid' b'as' b'depicted' b'by' b'ribosomal' b'behaviour' b'.' b'The' b'common' b'starling' b'was' b'found' b'to' b'observe'
    b'part' b'of' b'second' b'Siberia' b',' b'where' b'only' b'large' b'records' b'bird' b'constraints' b',' b'management' b',' b'or' b'libraries' b'in' b'some' b'cases' b'.'
    b'<eos>' b'The' b'date' b'of' b'tornadoes' b'have' b'been' b'assembled' b'by' b'evil' b'or' b'agrarian' b'active' b'africanus' b'.' b'This' b'floods' b'is' b'dispatched' b'by'
    b'common' b'Americans' b'.' b'Each' b'objectives' b'feature' b'sealed' b'so' b'evolution' b',' b'often' b'often' b'dissolved' b'so' b'they' b'were' b'easy' b'in' b'running' b','
    b'with' b'that' b'exception' b'in' b'males' b'intercourse' b'from' b'Common' b'Alyssa' b'.' b'A' b'period' b'to' b'come' b'@-@' b'up' b',' b'Celtic' b',' b'protesting'
    b',' b'readings' b',' b'or' b'different' b'hostages' b',' b'is' b'sent' b'into' b'them' b'for' b'their' b'range' b'of' b'rocks' b'and' b'intensify' b'.' b'For'
    b'example' b',' b'entire' b'population' b'Pontus' b'and' b'dependable' b'feedback' b'are' b'light' b',' b'which' b'may' b'be' b'confused' b'by' b'cell' b'as' b'food' b'as'
    b'other' b'birds' b'or' b'their' b'male' b'.' b'This' b'is' b'levitating' b'up' b'as' b'they' b'Hitoshi' b'Slide' b'.' b'There' b'are' b'reports' b'of' b'2'
    b'@-@' b'game' b'(' b'25' b'@.@' b'8' b'\xce\xbcm' b')' b'publish' b'the' b'timeline' b"'s" b'Tennis' b'Boom' b'membrane' b'(' b'<unk>' b')' b',' b'which'
    b'is' b'written' b'during' b'some' b'or' b'two' b'palaces' b'and' b'even' b'.' b'They' b'are' b'classed' b',' b'pairs' b',' b'and' b'therefore' b'of' b'<unk>'
    b'.' b'This' b'abdomen' b'and' b'causeway' b'concepts' b'may' b'be' b'able' b'to' b'sleep' b',' b'but' b'still' b'these' b'birds' b'were' b'formed' b'rather' b'than'
    b'other' b'or' b'records' b'.' b'Instead' b',' b'it' b'may' b'be' b'broken' b'as' b'known' b'manufacturing' b',' b'with' b'their' b'sign' b'of' b'rain' b','
    b'allowing' b'it' b'to' b'<unk>' b'the' b'Scottish' b',' b'parrot' b'and' b'downs' b',' b'lower' b'of' b'to' b'help' b'a' b'sequence' b'.' b'As' b'albeit'
    b',' b'Chapman' b'probably' b'proposes' b'their' b'strength' b'.' b'This' b'nocturnal' b'energy' b'"' b'art' b'"' b'is' b'sufficiently' b'forested' b'if' b'it' b'is' b'an'
    b'reader' b'transfer' b'uncertain' b',' b'on' b'then' b',' b'the' b'eyes' b'are' b'met' b'.' b'They' b'typically' b'exist' b'Little' b'anticyclone' b',' b'but' b'often'
    b'they' b'shall' b'form' b'royal' b'residents' b'as' b'they' b'must' b'-' b'home' b'earthstar' b'in' b'present' b'areas' b'.' b'As' b'the' b'first' b'head' b'is'
    b'one' b',' b'the' b'clerics' b'of' b'their' b'father' b'ordering' b'place' b'on' b'a' b'basis' b'of' b'<unk>' b',' b'ingestion' b',' b'gases' b',' b'or'
    b'<unk>' b',' b'<unk>' b'and' b'insects' b'.' b'<eos>' b'Moreover' b',' b'after' b'the' b'tail' b'of' b'spindle' b',' b'they' b'can' b'have' b'done' b'several'
    b'males' b'after' b'may' b'be' b'smaller' b',' b'with' b'Barrows' b'and' b'wings' b'.' b'organelles' b'may' b'see' b'highly' b're' b'@-@' b'consumption' b'throughout' b'any'
    b'way' b',' b'nearer' b'in' b'any' b'impact' b'on' b'certain' b'Temple' b',' b'so' b'by' b'Saltzman' b',' b'<unk>' b'@-@' b'ancestral' b'principal' b'common' b'areas'
    b'properly' b'expression' b'study' b'but' b'the' b'early' b'end' b'of' b'native' b'.' b'Both' b'methods' b'supports' b'non' b'@-@' b'phosphate' b'of' b'foraging' b'upper' b','
    b'depends' b'on' b'two' b'folk' b'mammals' b'of' b'New' b'Zealand' b',' b'with' b'fellow' b'rare' b'warts' b'than' b'elections' b'.' b'They' b'of' b'smooth' b'guitar'
    b'levels' b'are' b'the' b'most' b'remarkable' b'of' b'their' b'species' b'about' b'a' b'pair' b'of' b'Etingoff' b'.' b'<unk>' b'Britain' b'was' b'directed' b'by' b'two'
    b'groups' b'and' b'human' b'rains' b',' b'including' b'other' b'toxic' b'forests' b',' b'<unk>' b',' b'and' b'vomiting' b',' b'under' b'definitive' b'and' b'greatness' b','
    b'to' b'be' b'roughly' b'blame' b'of' b'large' b'royalty' b'.' b'In' b'1769' b',' b'common' b'starlings' b'conveyed' b'mainly' b'standards' b'of' b'attaining' b'interference' b'between'
    b'Jesus' b',' b'Found' b'(' b'standardized' b'\xe2\x80\x93' b'<unk>' b')' b',' b'and' b'breast' b'Rose' b'.' b'In' b'worldwide' b'camps' b'exited' b'birds' b'were' b'"'
    b'<unk>' b'"' b',' b'but' b'they' b'involve' b'the' b'Kerch' b'enzyme' b'.' b'<eos>' b'<eos>' b'=' b'=' b'=' b'Publication' b'=' b'=' b'=' b'<eos>'


It's no GPT-2, but it looks like the model has started to learn the structure of
language!

We're almost ready to demonstrate dynamic quantization. We just need to define a few more
helper functions:


.. code-block:: default


    bptt = 25
    criterion = nn.CrossEntropyLoss()
    eval_batch_size = 1

    # create test data set
    def batchify(data, bsz):
        # Work out how cleanly we can divide the dataset into bsz parts.
        nbatch = data.size(0) // bsz
        # Trim off any extra elements that wouldn't cleanly fit (remainders).
        data = data.narrow(0, 0, nbatch * bsz)
        # Evenly divide the data across the bsz batches.
        return data.view(bsz, -1).t().contiguous()

    test_data = batchify(corpus.test, eval_batch_size)

    # Evaluation functions
    def get_batch(source, i):
        seq_len = min(bptt, len(source) - 1 - i)
        data = source[i:i+seq_len]
        target = source[i+1:i+1+seq_len].reshape(-1)
        return data, target

    def repackage_hidden(h):
      """Wraps hidden states in new Tensors, to detach them from their history."""

      if isinstance(h, torch.Tensor):
          return h.detach()
      else:
          return tuple(repackage_hidden(v) for v in h)

    def evaluate(model_, data_source):
        # Turn on evaluation mode which disables dropout.
        model_.eval()
        total_loss = 0.
        hidden = model_.init_hidden(eval_batch_size)
        with torch.no_grad():
            for i in range(0, data_source.size(0) - 1, bptt):
                data, targets = get_batch(data_source, i)
                output, hidden = model_(data, hidden)
                hidden = repackage_hidden(hidden)
                output_flat = output.view(-1, ntokens)
                total_loss += len(data) * criterion(output_flat, targets).item()
        return total_loss / (len(data_source) - 1)







4. Test dynamic quantization
----------------------------

Finally, we can call ``torch.quantization.quantize_dynamic`` on the model!
Specifically,

- We specify that we want the ``nn.LSTM`` and ``nn.Linear`` modules in our
  model to be quantized
- We specify that we want weights to be converted to ``int8`` values


.. code-block:: default


    import torch.quantization

    quantized_model = torch.quantization.quantize_dynamic(
        model, {nn.LSTM, nn.Linear}, dtype=torch.qint8
    )
    print(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    LSTMModel(
      (drop): Dropout(p=0.5, inplace=False)
      (encoder): Embedding(33278, 512)
      (rnn): DynamicQuantizedLSTM(512, 256, num_layers=5, dropout=0.5)
      (decoder): DynamicQuantizedLinear(in_features=256, out_features=33278, dtype=torch.qint8, qscheme=torch.per_tensor_affine)
    )


The model looks the same; how has this benefited us? First, we see a
significant reduction in model size:


.. code-block:: default


    def print_size_of_model(model):
        torch.save(model.state_dict(), "temp.p")
        print('Size (MB):', os.path.getsize("temp.p")/1e6)
        os.remove('temp.p')

    print_size_of_model(model)
    print_size_of_model(quantized_model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Size (MB): 113.944608
    Size (MB): 79.739098


Second, we see faster inference time, with no difference in evaluation loss:

Note: we set the number of threads to one for single threaded comparison, since quantized
models run single threaded.


.. code-block:: default


    torch.set_num_threads(1)

    def time_model_evaluation(model, test_data):
        s = time.time()
        loss = evaluate(model, test_data)
        elapsed = time.time() - s
        print('''loss: {0:.3f}\nelapsed time (seconds): {1:.1f}'''.format(loss, elapsed))

    time_model_evaluation(model, test_data)
    time_model_evaluation(quantized_model, test_data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    loss: 5.167
    elapsed time (seconds): 242.2
    loss: 5.168
    elapsed time (seconds): 143.8


Running this locally on a MacBook Pro, without quantization, inference takes about 200 seconds,
and with quantization it takes just about 100 seconds.

Conclusion
----------

Dynamic quantization can be an easy way to reduce model size while only
having a limited effect on accuracy.

Thanks for reading! As always, we welcome any feedback, so please create an issue
`here <https://github.com/pytorch/pytorch/issues>`_ if you have any.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 6 minutes  33.050 seconds)


.. _sphx_glr_download_advanced_dynamic_quantization_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: dynamic_quantization_tutorial.py <dynamic_quantization_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: dynamic_quantization_tutorial.ipynb <dynamic_quantization_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
