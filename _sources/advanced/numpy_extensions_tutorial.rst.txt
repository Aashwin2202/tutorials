.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.2618,  2.9837,  3.1530,  3.7980,  2.9049],
            [ 5.4536,  5.7181,  4.0480,  8.7315,  7.5490],
            [ 4.1623,  4.2971,  7.0590,  5.2204,  7.6500],
            [ 7.5396,  7.8372, 10.8114,  7.6787,  8.5535],
            [12.3232,  9.7913,  5.7384,  8.2835, 14.7010],
            [ 7.5396,  4.0377,  4.0827,  3.8350,  8.5535],
            [ 4.1623, 11.2148,  3.2724,  0.6427,  7.6500],
            [ 5.4536, 11.6852,  8.5085,  5.3480,  7.5490]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.1630, -0.8193,  1.3339, -0.0997,  0.4168, -2.2919, -0.8417, -0.7988],
            [-0.3182,  0.6642, -1.1682,  0.7010, -0.3807,  1.1903, -0.1565,  1.2834],
            [ 0.2240,  0.2897, -0.6969,  0.1935, -0.0378, -0.0973, -1.4174, -1.0305],
            [ 0.1436, -0.1103, -0.8395,  1.0912, -0.0829,  0.2168, -0.8110, -0.1385],
            [-1.4899, -0.2791,  1.2143,  0.0363,  0.2063, -0.1192,  0.1029, -1.2837],
            [-0.6414, -0.5607,  0.2207, -0.7707,  0.2964,  1.4624, -0.2232, -1.6249],
            [-0.5242,  0.3766,  0.0492, -1.9371,  0.4010, -1.2551, -0.3009,  2.0201],
            [ 0.6055,  1.5527,  0.0267, -0.3932, -0.4721,  0.9883,  1.4149,  0.8648]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.3560, -1.3068, -0.4125],
            [ 0.0653,  3.1320, -1.4212],
            [-1.6451, -1.9095, -1.0341]], requires_grad=True), Parameter containing:
    tensor([[1.4345]], requires_grad=True)]
    Output from the convolution:  tensor([[10.8355, -3.0318,  1.1912, -1.5158, -2.1163,  1.0856,  4.4547,  6.0154],
            [-5.2800,  2.7814, -1.2286, -0.7626,  0.4216, -1.3267, -4.0647, -3.5141],
            [ 7.4574,  2.1043, -4.7967,  2.1244, -0.5315,  8.9246,  1.3077,  1.0180],
            [-4.5719,  5.1636,  3.0587,  7.2222, -1.8884, -4.5507,  2.0531, -3.5329],
            [ 2.1902, -9.2810, -5.3618,  0.5163,  1.9833,  1.3620,  8.0646,  0.1233],
            [ 3.4708,  5.9100,  8.7242,  2.8786,  5.0583, -2.0050, -3.1119,  3.0847],
            [-5.2887,  5.2394, -9.0051,  7.8035, -2.8211,  3.8276, -3.9201,  1.0995],
            [ 2.4414, -2.4569,  5.4986,  4.1221, -2.1352, -1.9485,  3.7982,  6.2741]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ -0.8168,  -0.0372,   1.9613,  -0.4869,  -0.6943,  -0.4638,   1.9438,
              -2.4795,   1.1053,   0.4644],
            [ -1.5166,  -2.1398,   0.2340,   1.7392,   0.1075,   1.8280,  -0.8218,
               4.4203,  -5.5851,   1.3352],
            [  1.4243,   0.7756,  -3.2713,  -3.0182,  -5.5962,   0.7777,   0.6987,
              -0.3562,   3.0463,   0.1858],
            [  0.8359,   7.3145,  11.2058,   3.3142,   1.4760,   4.8443,   9.5326,
              -3.6181,   0.0528,  -0.3909],
            [  0.5322,  -6.4347,  -3.5763,  -0.0468,  -1.4955,  -7.0698,  -4.4156,
               1.8619,  -5.8799,   1.6755],
            [  2.5370,   3.3677,  -3.7605,  -8.7303,  -0.9415,   6.7975,   4.8572,
               4.8759,  -2.1869,   1.4024],
            [  0.3362,  -0.9073,   1.1863,   2.5307,  -3.5837,   3.8663,   0.8544,
              -3.6189,   2.0598,  -0.0882],
            [ -2.3190,   2.7448,  -7.9287,  -0.1606,   8.8048,  -6.7545,   7.5687,
              -4.1069,  -6.2886,   1.3301],
            [ -2.1265,  -4.6747,   2.2819,  -8.6575,  -3.2708,   0.8141, -10.2163,
               1.1443,   0.3272,   1.9459],
            [  1.0152,  -0.9942,  -0.3863,   1.6336,   0.7021,   1.2740,   1.6576,
               2.1177,   0.7544,   0.4510]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.518 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
