.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.7254,  6.1977,  4.7583,  6.9499,  0.2085],
            [12.2659,  7.3284,  7.9420,  2.6730, 10.2460],
            [ 5.0837,  2.2540,  3.8002,  3.6067,  3.0835],
            [ 1.6754,  5.9841,  6.9611,  3.9870, 10.3337],
            [ 4.3514, 12.0058, 10.3107,  7.5798,  6.3114],
            [ 1.6754,  8.3120,  8.3900,  3.6880, 10.3337],
            [ 5.0837,  7.9137,  2.1296,  0.9033,  3.0835],
            [12.2659, 10.4776,  9.4985,  7.3608, 10.2460]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5833,  0.2888,  1.0890, -0.2125, -1.0066, -0.4555, -0.7545,  0.2706],
            [ 0.3919,  1.0991, -1.0699, -0.2622,  0.2172,  0.8750,  0.1625, -0.5830],
            [ 0.3086,  0.7246,  0.9880, -0.3205,  1.0337,  0.5204, -0.6478, -0.2702],
            [-0.5052, -0.6134,  1.0031,  0.3788,  2.2546,  0.8721,  1.2737, -0.4489],
            [ 0.3499, -0.2334,  0.3493, -0.9642, -0.9980,  0.4612,  0.2272,  1.2436],
            [ 0.0329, -0.3465,  1.7175, -1.1876,  0.1069, -0.5807, -0.6437, -0.9298],
            [-0.7277, -0.7922,  0.3981,  0.2649, -2.6047, -1.7297, -1.0201,  1.8232],
            [-0.3112,  1.2101, -0.6020,  0.3298, -0.5640,  0.5221, -0.5652, -0.6957]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3455, -0.9940,  0.8725],
            [ 1.6380,  0.4765,  0.8337],
            [ 0.1870,  0.0170, -0.6715]], requires_grad=True), Parameter containing:
    tensor([[0.9443]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.8161, -1.3061,  5.7737, -3.0333,  0.2743,  0.6196,  0.4296, -3.7015],
            [ 3.7867, -1.2602,  2.7057,  2.2188,  2.4502,  2.8419,  6.0351,  2.6433],
            [ 1.5788, -0.3268, -0.6405,  2.0884,  3.6773, -0.7392,  3.0620, -0.1319],
            [-1.6266,  1.7349, -0.0544, -1.7022,  2.0129, -4.9697, -1.0679,  0.6902],
            [-1.1905,  2.0794,  7.4889, -1.5461,  7.7509, -0.4499,  2.5833,  3.5376],
            [ 4.9887, -1.2867,  7.3597,  2.2589,  2.2971,  4.7892,  2.3629, -0.6072],
            [ 3.3394,  3.1754,  3.6652,  5.2417, -1.1119,  1.1257, -0.3423, -0.0415],
            [ 3.3122,  2.5898, -0.2425,  0.9380,  3.6629,  3.6454,  5.8124,  6.6912]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.5039, -0.8743, -0.6624,  2.3896, -1.2117,  0.1654,  0.6473,  1.0369,
             -3.6140,  1.9410],
            [ 2.6571,  1.8190,  3.5539,  0.1992, -1.9687, -2.0986, -2.3439, -1.0021,
              1.0403,  1.9927],
            [ 1.5860, -3.3023, -2.5034, -3.3351,  0.3428, -3.3266,  1.5595,  3.0048,
              1.5830, -0.6198],
            [-0.2406,  1.2482, -0.3916,  0.5883,  2.9544,  2.1180, -0.6169,  5.1434,
             -2.4739,  1.2875],
            [-2.9201, -2.0715, -2.5541, -2.9496, -3.3004,  0.9685, -3.6149,  2.1809,
             -0.3190, -0.5121],
            [-1.2403, -0.6690, -1.1583, -0.3113, -1.7186,  4.4795, -4.3848,  0.3821,
              0.6520, -2.3431],
            [-0.7545,  0.8632,  1.8031,  2.5836, -0.1193,  5.7686, -1.2554,  0.0282,
             -1.1123, -0.6851],
            [-1.0394,  0.8578, -0.9245,  0.8488, -2.0837, -0.8537,  0.7306, -3.5192,
             -0.6247,  1.8218],
            [-2.3200, -0.6028, -1.7832,  0.3652, -0.0115, -1.6830,  1.3522,  0.7920,
              1.5342,  0.7420],
            [-0.2584, -0.0101,  0.8233, -0.0209,  0.4650, -0.3425, -0.1776,  0.9709,
             -0.4734, -0.6277]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.465 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
