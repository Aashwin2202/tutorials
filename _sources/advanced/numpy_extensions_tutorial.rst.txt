.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.4923,  7.4691,  4.0209,  9.4449,  2.6733],
            [ 5.4928,  7.2581,  5.2677,  9.3597,  1.3738],
            [ 5.9410,  6.4865,  2.8765,  4.8466,  7.0933],
            [ 6.0106,  5.3433, 10.4684,  7.4965,  2.7039],
            [ 4.2247, 14.6892,  2.7785,  7.0956, 11.3265],
            [ 6.0106,  8.8510,  3.7197,  6.5516,  2.7039],
            [ 5.9410,  3.2918, 12.9738,  9.9578,  7.0933],
            [ 5.4928,  9.9343,  8.8224,  8.7207,  1.3738]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5017, -1.2063,  1.7897, -1.5354,  0.5033, -0.8517, -0.5935,  0.9004],
            [-0.2708, -1.0365, -0.6899,  1.1207,  1.1655,  0.3817,  0.9296,  0.8228],
            [-0.3941,  0.8502, -1.0762, -0.7427,  0.9377,  0.5854, -0.3719, -1.1396],
            [-1.0430,  0.3560, -1.0279, -0.7636,  0.2029,  0.2485, -0.7219, -1.6760],
            [ 0.0107,  1.0035,  0.7574, -0.7092, -0.8452, -2.2228,  0.9242, -0.3584],
            [ 0.0341,  0.5596, -0.4364,  1.1978, -0.0495,  0.6761, -0.7623, -2.0302],
            [ 0.4937,  0.0548, -0.4077, -0.8666, -0.4571, -1.2625, -0.6985,  0.5719],
            [-2.2973,  1.4694,  0.9416,  0.5910,  0.9736, -0.6432, -0.4284, -0.4279]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4010,  0.0764, -0.2177],
            [-0.4635, -0.3195, -0.0601],
            [-0.0549, -0.5180, -1.4820]], requires_grad=True), Parameter containing:
    tensor([[-0.6352]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.4864, -0.2736, -0.3120,  2.6622,  0.8932, -2.6579,  0.7654, -0.7086],
            [ 1.7449,  1.6313,  0.3857, -1.5436,  0.0411, -1.3208, -3.0025, -1.9418],
            [-1.0554, -0.2255, -1.8119, -0.9382,  0.1973, -1.0961,  0.1640, -3.3632],
            [ 0.8627, -1.8661, -4.4894, -5.6476, -2.3880, -2.4010, -0.5886, -1.1443],
            [-1.7269,  1.1491, -1.9984, -3.2100, -3.7656, -3.8775, -2.3496, -3.4894],
            [-0.5577,  0.8633, -1.4575, -1.6615, -1.8734, -1.6798, -2.8542, -2.2838],
            [ 1.5412,  0.3748, -1.0637, -1.5643, -1.9017, -0.5666,  1.9027, -0.4057],
            [ 0.8966,  1.4969, -1.6954, -4.4175, -4.5477, -0.8135,  0.0849,  0.8537]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.5844e-01,  2.0490e-01,  1.7361e-01, -2.5816e-01,  3.4359e-01,
             -1.6468e-01, -9.7446e-02,  4.6345e-01, -3.1137e-02, -1.4837e-01],
            [-3.1123e-01,  7.3838e-02,  2.1389e-01,  4.2773e-01, -2.9361e-01,
              1.2534e-01, -2.0618e-03, -7.1540e-01, -2.0393e-01,  2.7240e-02],
            [ 4.8370e-01,  8.9436e-01,  9.3274e-01, -1.3680e+00,  4.2278e-01,
             -1.3604e+00, -6.1874e-01,  2.6204e+00, -1.1466e+00, -1.4761e+00],
            [ 2.5230e-01,  6.2445e-01,  7.6600e-01, -2.1054e+00, -1.6943e+00,
             -1.1087e+00,  2.9181e-01, -2.8001e+00, -6.0458e-01,  4.4006e-01],
            [ 2.7211e-01,  2.5801e-01,  1.2598e+00, -5.5524e-01, -5.3416e-01,
             -2.5162e+00, -2.1006e+00,  2.3790e+00, -4.2636e+00, -3.4125e+00],
            [-3.4490e-01, -3.9079e-01, -3.4946e-01, -9.3692e-01,  2.6130e+00,
              1.9104e+00,  3.1096e+00, -4.4435e-01, -1.8613e+00,  6.7027e-01],
            [-4.2112e-01,  4.5201e-01,  6.7333e-01, -1.2269e+00, -2.4532e+00,
             -2.1855e+00,  2.3910e+00,  2.5956e+00,  1.0169e+00, -8.1845e-01],
            [ 9.9431e-01,  9.7720e-01,  1.5908e-01,  1.1515e-01,  4.6231e-01,
             -1.4321e+00, -6.9040e-01,  7.6164e-01, -7.9745e-02, -5.4879e-02],
            [-6.4585e-02,  3.8600e-01,  2.5110e+00, -8.9257e-01, -1.2010e+00,
              1.1476e+00,  7.2353e-01, -1.1036e-01, -1.3146e+00,  1.1293e+00],
            [-1.9121e-02, -2.2569e-01, -8.7454e-01, -5.4066e-01,  2.1718e+00,
              1.1082e+00,  1.4772e+00,  3.9079e+00,  1.3051e+00,  1.0304e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.469 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
