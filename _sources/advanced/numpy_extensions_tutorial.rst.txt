.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.0843,  5.3780,  4.4774, 11.7503, 19.0879],
            [ 7.7781,  2.8103, 12.4919,  5.1372, 12.8529],
            [10.3601,  3.0436,  4.5794, 10.4308,  5.1364],
            [13.3944,  5.8140,  6.8099,  9.9323,  3.1174],
            [14.8703,  8.3479, 11.8943, 17.4411,  5.7893],
            [13.3944,  1.8456,  1.0835,  4.4251,  3.1174],
            [10.3601,  7.2246, 11.7682,  7.4778,  5.1364],
            [ 7.7781,  9.0574,  3.6838, 12.7956, 12.8529]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9883,  0.7125, -1.2733, -0.2321, -0.1868,  0.7855,  0.2983, -0.5028],
            [ 0.3520,  0.6622, -0.3061, -1.0472, -1.1185, -0.6186,  1.0847, -0.7360],
            [ 1.6783, -2.4002,  0.8941, -1.1926,  0.7432, -0.2250, -1.1419,  0.5311],
            [ 0.0939, -1.5554,  1.4669, -1.0346,  0.5951, -2.5526,  0.3061,  0.3722],
            [ 2.0430, -0.0572,  0.9660, -0.1927,  0.5181,  1.7995,  0.3834,  0.2484],
            [-1.4079,  0.5636,  1.4751, -1.2840, -1.3250, -2.2566, -0.1661, -1.5077],
            [ 1.6735, -0.7980,  1.6077,  0.9441, -1.4545,  2.9234,  0.3258, -0.9300],
            [ 0.4484,  0.1169,  0.8344,  1.2232,  0.6547,  0.8135,  0.5350, -0.0746]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.5119,  0.8888,  0.3341],
            [ 1.6180,  2.4223,  1.1406],
            [ 1.3312,  0.9863, -1.0142]], requires_grad=True), Parameter containing:
    tensor([[-1.0354]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.1579, -1.7077, -4.2083, -0.8026, -1.1498, -3.6754, -0.4681, -0.1416],
            [-1.7670, -2.7079, -6.2706, -6.3738, -1.8718, -0.3410, -0.1238,  1.7434],
            [-2.2552, -4.2342, -3.7741, -3.3047, -0.0103,  0.0176, -1.0310,  0.0932],
            [-5.6214, -0.5641,  2.8941,  2.3937,  0.5106, -1.3467,  1.1999,  4.5196],
            [-2.5500, -1.9052, -2.9632, -4.8229, -5.9902, -0.3562,  1.4451, -1.1988],
            [-0.1102, -0.9209, -5.8030, -4.2400, -5.8222, -5.0242, -2.9859, -3.8733],
            [ 2.4188, -2.0365, -1.3407, -2.2739, -4.8736, -5.0407, -9.2959, -7.4482],
            [-0.3283,  0.8223,  3.8601,  3.6203, -3.3150, -8.9266, -6.4333, -2.3525]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0299,  0.8359,  1.8247,  0.4212, -1.5396, -1.7834, -1.3321, -0.9795,
             -0.9736, -0.3660],
            [-1.2290, -0.2926,  2.1348, -0.5110, -3.4305, -3.9133, -1.4164, -1.0725,
             -1.9077, -1.1851],
            [-3.4410, -4.1342, -5.4461, -7.1389, -1.0743,  4.7172,  5.4286,  4.6075,
              0.4108,  1.1026],
            [-1.4600,  2.3456,  3.9431,  3.1054,  6.5401,  2.6950,  1.6994, -2.9913,
             -4.1183, -0.9451],
            [ 1.3263,  5.9572,  3.7329,  2.2409,  4.1831,  0.3894,  0.1238,  1.6100,
              2.9316,  1.4943],
            [-0.2656,  3.2872,  4.5255,  0.5484,  2.1732,  1.5693,  0.0489,  2.3866,
              5.4259,  2.4872],
            [ 1.2109,  4.1276,  6.4460,  4.8809,  1.6310,  0.0487,  0.8199,  5.1312,
              1.6737, -1.7039],
            [ 3.4367,  6.3472,  6.9633,  2.1872, -4.2115, -3.9333, -3.1116, -4.1780,
             -1.4388, -1.8891],
            [ 3.3238,  3.1628,  1.1026,  0.2263, -8.3369, -6.0655, -1.8883, -3.1096,
             -3.4065,  0.5770],
            [ 0.8503,  0.6632, -0.6057, -0.4764, -3.2311, -1.0031,  1.2463, -2.1984,
              0.7936,  0.3711]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.472 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
