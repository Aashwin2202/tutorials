.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.4187,  5.6901,  6.8372,  5.0536,  2.8276],
            [ 7.5501, 13.6987,  8.4839,  5.9392,  4.8730],
            [ 7.0134,  5.4491,  7.9203,  6.9352,  2.8661],
            [ 8.6683,  4.4447, 14.9803, 10.0816, 11.1939],
            [ 5.6172,  4.6425,  7.1529,  5.7877,  5.1927],
            [ 8.6683,  4.1167,  6.2032,  1.1544, 11.1939],
            [ 7.0134, 12.7852,  7.2199,  8.5201,  2.8661],
            [ 7.5501,  1.4641,  4.0478,  6.2776,  4.8730]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 3.0396e-01, -4.9282e-01,  1.2519e+00, -1.0760e+00,  4.9941e-01,
              1.7359e-01, -2.9573e-01,  2.5192e+00],
            [-7.4813e-01, -3.2459e-01,  2.3562e-01, -4.9504e-02,  3.3454e-01,
             -6.8133e-01, -6.2581e-01, -6.1286e-01],
            [ 9.4920e-01, -1.2224e+00, -2.6624e+00,  8.4222e-01, -5.1740e-02,
              2.9544e-01, -1.8550e+00, -5.3719e-01],
            [ 3.5899e-01, -1.4975e+00,  1.4729e-01,  5.7663e-01,  4.2760e-01,
             -6.6056e-01,  1.2177e+00, -9.0258e-02],
            [-2.5249e-01,  1.1089e+00,  1.2195e+00,  2.2464e-03, -9.9786e-01,
             -1.1477e+00, -8.3519e-01, -2.4443e-01],
            [ 1.6888e+00,  7.8109e-01,  1.3598e+00,  2.0466e-01,  6.7709e-01,
              4.8123e-01, -6.1371e-01, -7.7688e-01],
            [ 4.5931e-01, -6.5313e-01, -2.5950e-01, -8.6882e-01, -1.4397e-01,
             -8.2704e-01,  3.2025e-01,  9.6020e-01],
            [ 9.4981e-01,  1.3408e+00, -1.3831e+00, -1.0837e+00, -7.8622e-01,
              1.4332e+00, -1.8553e-01,  4.0542e-03]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.8351, -0.4159,  1.1155],
            [-0.1974, -0.6259,  0.4917],
            [-0.9273, -1.2085,  0.4189]], requires_grad=True), Parameter containing:
    tensor([[-0.7850]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.5583, -5.1047,  0.9684,  2.3263, -0.3928, -4.4061,  0.4557,  2.7337],
            [-2.4060, -1.3674, -0.4160, -0.5366, -0.1849, -0.9063,  1.7519, -0.2773],
            [-4.7827, -0.5320, -0.4638, -1.4506, -0.4373, -0.2857,  0.3992,  0.8935],
            [-5.6290, -4.6464,  3.4141,  1.7032, -3.9583,  1.9587,  2.6377, -0.1017],
            [-0.7028, -2.2392, -1.2921,  1.2846, -1.4008, -1.0054,  1.8914,  3.6174],
            [ 1.2961, -4.4908,  0.9914,  2.9388, -2.8712, -0.1739,  0.2331, -3.1459],
            [ 1.1640, -1.0768,  2.2256,  3.3751, -4.3481, -4.5403, -2.1304, -0.7651],
            [-2.0250, -4.6847, -1.0631,  3.6924, -1.5678,  0.6001,  1.6122, -6.9195]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0832, -0.8442,  1.2219,  1.1277, -2.9662,  3.1482,  0.1467, -3.6123,
              1.0883,  0.6657],
            [-0.5018,  0.2102, -0.1261,  0.9225, -0.4189,  1.7448,  2.9429, -3.7622,
             -0.9381,  0.4063],
            [ 1.6719, -0.3009, -1.0273,  1.4214, -0.1994,  1.7660, -0.4815, -2.4680,
              1.2501,  0.0785],
            [-0.6258,  0.1932, -0.7631, -0.6393,  0.4744,  2.9655,  2.8544, -0.8777,
              0.3508,  0.1929],
            [ 1.1216,  1.4523, -0.7950, -0.6578,  2.2322,  1.9895, -6.9134, -2.0117,
              3.7951, -0.1453],
            [-1.5076, -2.5525,  1.4006, -0.8553, -4.5487,  1.1387, -0.3389, -1.1496,
              1.8023, -0.8421],
            [-1.4335, -2.0717,  1.3176, -1.2235, -2.5804,  2.5194, -1.2911, -3.7166,
              0.2834,  0.6266],
            [-0.3781, -2.9518,  1.6659,  3.2846, -4.0093,  1.6820,  0.4371, -0.8831,
             -0.7733,  1.2167],
            [-0.3886, -0.6629, -0.8224,  1.5332, -3.4188,  0.7545,  2.2143, -0.1359,
             -2.3563,  0.8725],
            [ 0.7607, -0.7550, -1.0218,  1.7174, -1.4514,  2.1780,  0.7440, -0.8553,
             -1.2696,  0.4010]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.469 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
