.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.6174,  9.1309,  7.6357,  8.2935,  0.7744],
            [ 8.1217, 13.3561,  3.9077,  4.6713, 12.8394],
            [ 8.6362,  6.5381, 17.2470, 10.6733,  6.4997],
            [ 7.4832, 11.1665,  6.8788,  4.4601,  3.9450],
            [ 5.3142,  5.1095,  6.4218,  4.0233,  2.7463],
            [ 7.4832,  5.5875, 13.5658,  5.5976,  3.9450],
            [ 8.6362, 13.5518,  2.7790,  6.8204,  6.4997],
            [ 8.1217,  2.5100,  1.6217,  7.5583, 12.8394]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.3834, -0.1337,  0.6122,  0.4652,  0.5026, -0.2473, -0.4196, -1.1403],
            [-0.4526, -0.3279,  0.4305, -0.9924,  0.1874, -1.0909,  1.5492,  1.5605],
            [-0.4358,  0.2883,  1.3512, -0.9867,  0.1903, -0.4307,  1.2909,  0.8223],
            [ 1.1345, -0.0731, -0.8565, -0.3223,  1.0239,  1.6439, -0.2406, -1.1536],
            [-0.4501, -2.2900,  0.9322,  1.3575,  0.7126,  1.9987,  1.6171,  1.5645],
            [-1.2414, -1.6070,  0.4297, -0.1781, -0.1719, -0.5700, -0.9498,  1.3287],
            [-1.2535,  0.9297,  0.5313, -0.1458, -2.0835,  0.4545, -0.8684, -0.6535],
            [-1.5969, -0.6871,  0.1577,  1.5765,  0.7263,  1.6617, -0.5468, -0.1999]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1403, -0.0758,  0.1364],
            [ 0.9487, -1.4901,  0.0136],
            [-0.0206,  1.0640, -1.0687]], requires_grad=True), Parameter containing:
    tensor([[1.1489]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.5035, -0.3015, -0.2872, -2.8678,  1.8744,  3.9473, -0.0553,  0.0458],
            [ 3.9643,  0.5862,  1.1225, -2.0958,  0.4678,  3.0100,  3.7964, -0.5606],
            [ 2.4773,  3.7778,  0.5859,  0.4110, -2.3614, -0.4082,  5.0827,  3.1676],
            [-0.0287,  3.1397, -0.9150,  5.1416, -0.2762,  0.2866,  0.7693,  1.8285],
            [ 1.7211,  0.8204,  2.2960, -1.9741,  4.3702,  2.2811, -0.2735,  1.7804],
            [-0.2671,  3.5495,  0.2060,  2.9211, -1.1133,  3.0330,  2.5194,  0.3930],
            [ 3.0864, -2.6515,  4.0825, -0.5278,  2.4647, -0.2278,  2.2704,  1.4995],
            [-3.9499,  2.8641, -0.9749,  1.0739,  3.5530, -1.7880,  3.8933, -1.9923]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.7304e-01,  8.4935e-02, -3.3178e-01,  1.1792e-01,  1.2176e-01,
             -5.9833e-04,  6.2149e-02, -6.8025e-02, -1.2194e-01,  6.8714e-02],
            [-2.0185e+00,  3.3934e+00, -1.7319e-01, -8.9222e-01,  2.0005e-01,
              1.4146e-01,  4.7238e-01,  1.4317e+00, -9.5634e-01, -5.5450e-02],
            [ 1.0283e+00, -5.0013e+00,  4.1838e+00, -3.0941e-01,  2.0313e+00,
             -3.6351e+00,  2.5752e-01,  1.3862e+00,  1.7870e+00, -4.1362e-01],
            [ 9.8106e-01, -1.1776e+00, -1.0219e+00, -1.2241e+00,  1.7765e+00,
              9.7737e-01, -5.6026e-01,  2.3058e-01,  5.7772e-02,  3.5341e-01],
            [ 9.9995e-01, -1.2684e+00, -2.7498e-01,  2.3389e+00, -4.8668e+00,
              1.7249e+00, -9.9861e-01, -5.8175e-02,  2.3069e+00, -8.9007e-01],
            [ 5.3268e-01,  1.6978e-01, -3.7969e+00,  3.2851e+00,  1.2115e+00,
             -2.2036e+00, -1.0272e+00,  4.1383e+00, -3.2224e+00,  9.7520e-01],
            [ 1.7270e+00, -1.0300e+00, -1.5941e+00, -1.6444e+00,  8.1688e-02,
              1.2270e+00, -5.5815e-01, -3.2807e+00,  4.7201e+00, -1.2747e+00],
            [ 3.2466e-01,  2.1069e-01,  1.3649e+00, -2.4836e+00,  3.9553e-01,
             -1.2076e+00,  1.0010e+00,  2.3086e-01, -1.6011e+00,  1.5423e+00],
            [ 1.0147e+00,  6.8966e-02, -2.7982e+00,  7.5339e-01,  7.2128e-01,
             -1.1576e+00,  2.5726e-01, -5.3235e-01, -3.2327e-02,  5.0095e-01],
            [-2.2234e-02,  1.1270e+00,  5.3785e-02, -8.0458e-01, -1.5132e+00,
              1.7502e+00, -5.7886e-01, -5.3127e-03, -7.4425e-02,  9.7375e-03]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.544 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
