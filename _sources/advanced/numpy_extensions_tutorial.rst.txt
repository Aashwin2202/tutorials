.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.4627,  4.5746,  1.0861,  2.5709,  6.1118],
            [ 4.8539, 10.8069,  4.2878,  2.4805,  7.0751],
            [ 3.4761,  2.1012,  0.9236,  3.0608,  4.1394],
            [ 4.8341, 11.3442, 15.5597,  2.3285,  8.3030],
            [ 2.7578,  9.2453,  2.9762,  8.9398,  6.8786],
            [ 4.8341,  5.1324,  9.0954, 15.1960,  8.3030],
            [ 3.4761,  9.0637,  5.8042,  5.8790,  4.1394],
            [ 4.8539,  7.0024,  3.7601,  5.5508,  7.0751]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6491,  0.5865, -0.0941, -0.7093, -1.0091,  0.2066, -0.2294, -0.5632],
            [-0.4710, -1.2651, -1.9191, -0.8270,  1.0861,  0.1214,  1.8352,  0.1375],
            [-1.4283, -0.9106, -0.3516,  0.2145, -0.6540,  0.5520, -1.2476,  1.5927],
            [ 1.4409,  1.4433, -1.4777,  0.2541, -0.3833,  1.6270,  0.1949, -0.9520],
            [-0.5126,  0.4526,  0.4305, -0.2644,  0.3826, -0.7296, -0.4657,  0.4082],
            [-0.7040, -1.2625,  0.9341,  1.0460, -0.4560,  0.6042, -1.2108, -0.8128],
            [ 1.1014,  1.1390, -0.9703, -0.8650, -0.5352, -0.6411,  0.1797, -0.0266],
            [-0.3120, -1.1119, -0.3951,  0.7677, -0.0212, -1.5603,  0.6244,  0.1724]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4314,  1.1812, -0.2342],
            [ 0.6685, -0.5916,  0.4723],
            [ 1.6630,  0.1931, -1.1491]], requires_grad=True), Parameter containing:
    tensor([[-0.5254]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.3944,  1.0593, -1.4435,  0.7341, -2.0911, -1.5383, -0.5623,  2.6467],
            [-0.8093,  0.4908, -2.8888, -0.6168, -0.0134,  0.4437,  0.0296,  0.8143],
            [ 1.5920, -1.0492, -0.4433, -3.3664, -0.9089,  1.9051,  3.6210, -2.0197],
            [-1.8611, -4.3416, -0.0683,  1.6556, -2.1890,  3.3036, -2.8879,  0.2878],
            [ 2.3909, -2.5292, -2.0216,  3.5873, -1.3541, -3.1076,  1.9113, -3.8523],
            [-2.6761, -3.9718,  2.5140, -3.8745,  1.4571,  0.0683, -1.7459,  0.4359],
            [-5.2405,  1.9246, -1.0171,  1.3435, -4.8888,  0.2874, -1.1031, -0.7694],
            [-6.0646, -2.4590,  1.4404, -3.8632,  2.4287,  2.4621, -1.5898, -4.7425]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4491,  1.1920, -0.6135,  1.1955,  0.7877, -2.3724,  0.9137, -0.9474,
              0.4691, -0.0616],
            [-0.3963,  3.0736, -1.0768, -0.5984,  0.2597,  0.2174, -1.9155, -0.4303,
             -0.8680,  0.2650],
            [ 3.6374, -2.1538,  1.5366, -0.0609, -6.5035, -2.0923,  2.8152, -2.6609,
              0.9921, -0.5800],
            [ 3.9119, -2.2996, -4.1089, -0.0627, -2.5996,  1.2430, -6.8472,  3.2438,
              0.6498,  0.6007],
            [-1.3664, -1.0339, -3.0863, -0.5238, -1.6911, -0.6532,  4.0679, -4.3348,
              2.3540,  0.2857],
            [ 0.2565, -1.5393, -2.3655,  0.7651,  4.1919, -0.9587, -3.6440,  5.8369,
             -2.3929, -0.4240],
            [ 2.7109, -2.9534, -1.7360,  0.2991, -1.1350,  3.4316,  0.9529, -2.5167,
              1.3673,  0.2276],
            [ 0.6682,  0.2086,  0.4132, -0.3761,  1.8951, -1.3591,  2.3715, -1.4817,
             -1.2607,  0.7482],
            [-0.2198, -0.7911,  1.2951,  0.6169, -1.7654,  2.1690,  1.8329, -1.1576,
             -1.4653,  0.1013],
            [ 1.6658,  1.2878, -1.6844, -0.7144, -1.8223, -0.3803,  1.5681, -0.7027,
             -0.0756,  0.5000]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.558 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
