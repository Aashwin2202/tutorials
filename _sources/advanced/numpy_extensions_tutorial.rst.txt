.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.3746,  7.9980,  3.3568,  9.0674,  9.4077],
            [ 6.4179,  5.6167,  2.4434, 10.2982,  7.2170],
            [ 5.5768, 10.6298,  5.3948,  5.0487, 11.1401],
            [ 7.3678,  5.7455,  8.9583,  7.5779,  7.2299],
            [ 2.4644,  0.7370, 10.3226,  9.6704, 10.6762],
            [ 7.3678,  8.7595, 14.7570,  5.3416,  7.2299],
            [ 5.5768,  4.0230, 11.4105, 13.5988, 11.1401],
            [ 6.4179,  4.7407,  7.2517,  5.7072,  7.2170]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.6729, -0.1787,  1.2506,  1.9852, -0.8198,  1.0009,  0.0755, -0.7566],
            [ 1.1589,  1.1611, -0.7563,  1.2031,  1.4126, -1.9923,  0.2549,  1.2399],
            [ 0.2991,  0.2559,  0.1168, -1.8586,  0.5092,  0.1993, -1.0025, -0.1927],
            [-1.8604,  0.3153, -1.8524,  0.5065,  0.5328,  0.9606,  0.1464, -0.6304],
            [-0.7186,  0.8390,  0.1759,  1.5299, -1.0663, -0.4271,  0.8505,  0.3326],
            [-1.7993,  2.5120, -1.1899, -0.5856, -0.0154, -0.4414, -0.9535, -0.1324],
            [ 0.8403, -1.3869,  0.1416,  1.0060,  0.8187, -1.5511,  0.4787, -0.1545],
            [ 1.0395,  0.2110, -0.0454,  0.8105, -0.0881,  0.6477, -1.2776, -1.0372]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.4412,  0.7151,  1.6639],
            [ 0.1983, -0.5897,  0.0732],
            [ 0.8191, -0.2321,  0.0977]], requires_grad=True), Parameter containing:
    tensor([[1.5596]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.1019,  5.1344,  3.7299,  4.8266,  1.5464,  3.9698,  1.0800,  6.7099],
            [ 4.5762, -0.5838,  1.5507,  2.2413,  5.6475,  5.5272, -1.1512,  3.9392],
            [ 2.5692,  1.0873,  4.0045,  0.2967,  1.7687,  6.6020,  2.9826,  4.8391],
            [ 4.9736,  2.4562,  7.5881,  3.0246,  2.5145,  1.3637, -0.6044,  3.8261],
            [ 0.8328, -2.0674, -1.8719, -1.0635, -1.0175,  0.0539,  2.5818,  1.9171],
            [ 1.5434, -4.3136, -2.9232, -0.5151,  3.2395,  2.5040,  1.9553, -0.6543],
            [ 4.4772,  9.0679,  6.2911,  3.3738,  3.2055, -0.0427,  1.6272, -0.7004],
            [ 4.1026,  3.3556,  4.6262, -0.6945,  5.0649, -0.0705,  1.2613,  1.7268]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2392, -1.2291, -4.1788, -4.8288, -5.2160, -4.4014, -0.7233, -3.6557,
              0.0309, -1.9578],
            [ 0.6236,  0.2805,  0.4235, -1.3061, -0.4847, -1.2530,  2.6153, -0.1865,
              0.7258, -1.5958],
            [-2.8269, -2.0463, -2.1402,  1.9635,  3.5612,  0.9689,  2.5982,  3.3489,
              4.9625,  2.0385],
            [-0.9282, -0.1293,  0.5089, -2.4676,  1.1587, -0.0457, -2.2016,  0.4169,
             -0.0597,  3.0522],
            [ 0.9377,  5.8590,  8.3085,  5.0308,  1.2485,  0.8161, -0.0286, -2.2380,
             -2.6248, -2.4774],
            [ 0.8949,  0.1077,  3.3307,  1.4142,  2.1267,  1.8401, -0.6574,  1.0370,
             -0.9022, -0.6624],
            [ 1.8355,  0.9016, -0.6101, -3.3878, -3.6391, -3.7211, -4.4412, -5.4773,
             -3.7133, -2.7022],
            [ 1.0486,  1.0046,  0.3551,  1.6390, -0.6197,  2.3498, -0.2592, -1.6480,
             -0.5835, -3.4066],
            [ 0.1648, -0.3712, -1.1497, -0.0482, -0.7072, -0.4019, -1.6829, -1.2132,
              1.3159, -0.2905],
            [ 0.2411,  0.4242, -1.0853,  0.9319, -0.1602,  0.2880, -0.0421, -1.5759,
              0.4557, -0.1911]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.465 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
