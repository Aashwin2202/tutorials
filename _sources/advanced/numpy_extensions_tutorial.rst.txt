.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.9613, 15.0720,  3.3497,  5.4657,  7.1861],
            [ 6.1340,  1.8204,  9.2408,  0.6250,  2.4572],
            [ 1.8779,  8.5794,  5.5209,  2.9060,  4.2228],
            [14.3543,  2.7192,  6.1871, 10.8283,  8.5415],
            [ 5.8711, 12.1670, 10.4922, 11.5324,  3.5440],
            [14.3543,  2.2572,  7.3390, 12.5876,  8.5415],
            [ 1.8779,  4.6857,  1.4355,  4.2407,  4.2228],
            [ 6.1340,  5.7674,  9.1067, 11.7426,  2.4572]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.7342,  0.6785,  0.2795,  0.8129,  0.4463, -0.4154,  0.2312,  0.4446],
            [-0.8678, -2.0607,  0.6962, -1.2637,  1.2721,  1.3220, -1.7685,  0.1507],
            [ 0.4538,  1.5430,  0.4046, -0.4375, -0.3331,  0.3810,  0.9352, -0.6479],
            [-1.0375, -2.3400, -0.0271, -1.3429, -0.7297,  0.7633, -1.2286, -0.3706],
            [-0.3907,  0.7732,  0.6705, -0.2309,  0.0961,  0.5438,  0.7734, -2.1675],
            [-0.4038, -0.3385, -0.2005,  1.2689,  1.0614,  0.8584, -0.6467, -1.6061],
            [-0.9262, -1.2989,  0.4818, -0.2332, -0.0801, -1.2726, -0.4201,  0.5938],
            [ 0.5127, -1.0176, -0.3054,  0.6033,  2.2261,  0.0956,  1.1716, -0.3629]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2043, -0.0744,  1.7485],
            [ 0.0510,  0.0528,  0.2375],
            [-0.6574,  2.2487,  0.1328]], requires_grad=True), Parameter containing:
    tensor([[-0.1564]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.4905, -0.7851, -0.2668,  0.0820, -3.8332, -1.3882,  3.7170, -0.7519],
            [ 1.4693, -0.4539,  1.0988, -2.1593, -0.6081,  0.3936,  5.2775, -1.4786],
            [-1.2899,  3.3240, -0.0408,  5.4461, -4.0060,  0.8622,  1.6471, -6.7286],
            [-2.7933, -0.2327, -3.2381,  1.8159, -3.3696,  4.5260,  0.9733,  0.4399],
            [ 0.7798,  0.4045,  1.8258,  2.8871, -2.6292,  3.1655, -5.1712,  0.5673],
            [ 0.2801, -4.5642, -1.1866, -1.0829,  3.5292,  1.5084,  2.2504, -1.5260],
            [ 3.2759,  1.6991, -4.1323, -1.2934,  1.6400,  0.8416,  2.7737,  0.2734],
            [-1.3028, -2.3766,  1.7530, -4.7202,  2.1081,  0.3334,  0.7880, -2.5028]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.1909,  0.0227,  1.2925, -1.0185,  3.0862,  0.8103,  0.4997, -0.4941,
              2.1169, -0.0306],
            [-0.1429, -0.4428,  2.3226,  4.1500, -3.8896, -4.1475, -0.6413, -1.3534,
             -0.5720,  2.3753],
            [-0.6962,  2.1512, -1.2361,  6.5811,  2.8387,  2.3500, -2.1328,  4.9052,
              0.5426, -1.7107],
            [-0.2988,  1.1280,  4.0005, -4.4574, -3.2912,  0.0416, -2.8337, -3.9850,
              4.0426, -1.7036],
            [-0.6008,  0.1637,  3.8799,  2.8955,  0.4178, -0.7124,  4.5160,  1.4578,
             -0.7307,  0.2945],
            [ 0.9316, -2.5104, -1.1791,  0.1968, -3.2416, -2.5776, -3.7896,  2.2717,
             -4.0190, -0.2836],
            [-0.4791,  0.9439,  1.4449, -3.3011,  2.4429,  7.4068, -0.1480,  2.2052,
              3.9235, -3.1285],
            [ 0.1802,  0.7877, -2.3410, -2.6125, -2.5743, -1.6701,  2.2698, -3.9474,
             -1.2522, -2.1546],
            [-0.4163,  0.7461,  0.5529,  2.9713,  5.9370,  0.4107, -1.2560,  4.9136,
             -4.0164, -0.4709],
            [ 0.5309, -2.6190,  3.0005, -0.6718, -1.7360,  1.4208, -1.2369, -0.9441,
             -2.2846, -0.1298]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.494 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
