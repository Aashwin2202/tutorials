.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.6103, 10.6682,  6.1528, 12.8191,  5.3329],
            [ 9.2958, 11.8270,  4.7521,  4.9045,  5.3026],
            [ 3.2145,  8.6345,  4.4397,  0.6886,  4.8613],
            [ 5.4419,  7.9997,  7.7072, 12.1420,  7.9689],
            [ 2.4229,  9.9862,  4.0407, 15.9434,  4.4357],
            [ 5.4419,  6.3112, 13.3709,  5.7085,  7.9689],
            [ 3.2145,  4.3690,  3.2960, 10.6922,  4.8613],
            [ 9.2958,  3.1429,  2.7908,  3.9981,  5.3026]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9781, -1.1541, -0.8790, -0.8361, -0.1294,  1.0504, -0.1049,  1.3858],
            [ 0.5315, -0.6674, -0.4530, -0.5798,  1.2531,  1.0384,  0.2830,  0.1186],
            [-0.0783, -0.2422,  0.5707, -0.2300, -0.3534,  1.6213,  0.4153, -0.5927],
            [ 1.6770, -1.0045, -1.3621, -0.2515, -0.1862,  0.0058,  0.6179, -1.5552],
            [-1.2778, -0.2351, -1.2663, -1.1516,  1.2971,  0.5552,  0.1501,  0.5809],
            [ 1.2016, -1.0739,  0.7175,  0.2421, -2.1924, -1.1786, -0.6963, -1.4796],
            [ 0.7445, -1.4500,  0.3509, -0.8611,  0.8923,  0.5592, -1.3825,  0.4789],
            [ 0.9477,  1.2692,  0.1091,  0.4383, -2.6654,  0.8112,  1.1508, -0.0835]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.3764, -0.1956, -0.7695],
            [ 0.8744,  1.7897, -0.2654],
            [ 1.2225,  1.5413, -0.8888]], requires_grad=True), Parameter containing:
    tensor([[-0.0737]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.2903e-01, -1.0366e+00, -6.4536e+00,  2.1346e-03,  5.9034e-01,
             -3.3415e+00, -8.8973e-01, -1.6507e+00],
            [-1.3975e+00, -5.4103e-01, -7.2063e-01,  4.0360e+00,  4.4524e+00,
              8.0381e-01,  1.7622e+00,  7.6694e-01],
            [-9.0227e-01,  4.9902e+00, -1.7129e-01,  7.8092e-02,  1.0383e+00,
              4.2540e-01, -1.8822e+00, -1.8857e+00],
            [ 1.3578e+00,  1.7280e+00, -3.3139e+00,  2.5457e+00,  2.4277e+00,
             -4.3374e-01,  1.5864e+00, -4.9993e-01],
            [ 2.3943e+00, -8.1514e-01, -2.0919e+00,  2.2158e+00,  9.6800e-01,
             -7.3724e-02, -7.6575e-02, -3.1407e+00],
            [ 7.9489e-01,  4.1327e-01,  2.2551e+00,  1.7568e+00,  4.3270e+00,
              4.2079e+00,  3.2349e-01, -1.7162e+00],
            [-1.6900e+00,  1.0688e+00,  2.1317e+00, -2.3891e+00, -2.2043e+00,
              1.7667e+00,  3.1971e-01, -1.5329e+00],
            [-3.9888e+00, -2.8512e+00, -6.0285e-01, -3.5573e+00, -5.9637e+00,
             -3.1273e-01,  1.6469e+00, -1.0784e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1522, -0.0618, -0.3456, -0.4949, -0.8808,  0.3217,  0.2020,  0.0371,
             -0.5501,  0.4707],
            [-0.2872, -0.3507,  2.5761,  2.0124, -0.6947, -1.7375,  2.0078,  2.1240,
             -1.5692,  0.8713],
            [-1.3020, -0.8069,  0.5703,  1.2077, -1.2885, -5.6310,  1.2418,  1.7233,
             -1.9227,  1.8557],
            [ 0.6778,  2.6391, -1.9572,  3.0760,  3.5903, -6.6585, -1.6737, -4.3518,
             -5.0065,  0.1832],
            [ 3.9301,  5.4846, -2.0170,  5.0376,  5.3710,  0.5426, -0.4155, -1.2451,
              1.5843,  1.7686],
            [ 1.4125, -0.9902, -4.5507, -0.5086, -0.7072, -1.8340,  1.7787,  2.2801,
             -1.0301, -1.6578],
            [-0.3565, -2.5453,  4.3758,  0.8530,  0.2744,  1.1531, -0.2284, -0.6436,
             -0.3737,  0.4421],
            [-3.4273, -4.9030,  3.5068, -1.9237, -1.5319, -3.3430, -2.3899,  3.2785,
              4.0945, -0.6121],
            [-4.5099, -5.8813,  1.1996, -2.0620,  4.0406,  4.1577, -2.7771, -2.5092,
             -0.2485, -0.2019],
            [-0.5599, -1.7192, -0.2576,  2.9959,  4.3484,  2.5284, -4.7602, -3.8218,
              1.0130,  0.4832]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.474 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
