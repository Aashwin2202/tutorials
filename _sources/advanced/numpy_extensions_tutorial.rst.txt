.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[13.5988,  8.8497,  3.5666,  9.0855,  6.1922],
            [19.3660,  5.5037,  5.5104,  2.8579,  1.5133],
            [18.6585, 10.1106,  3.5902, 10.0812,  9.8569],
            [ 5.2420,  8.0714,  7.7663,  8.1888,  4.5834],
            [ 8.6456, 10.7496,  4.9119, 14.2614, 13.9973],
            [ 5.2420,  2.1451,  0.5505,  8.1410,  4.5834],
            [18.6585,  9.2304, 12.2941,  7.1940,  9.8569],
            [19.3660,  2.7951,  5.9121,  2.6223,  1.5133]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8456,  1.4399,  0.5075, -0.4261,  0.8431, -0.0843, -0.4691, -0.1463],
            [-0.1530,  0.8397, -0.8483,  0.6922, -0.7383, -0.3472,  2.0028, -0.6810],
            [-0.9072, -1.5220,  0.2380, -3.2408, -1.9877, -1.1484, -0.1903, -0.5135],
            [ 0.6241, -0.6404, -2.0974, -0.5860,  0.2613,  0.4908,  0.4096,  0.9662],
            [ 0.2221,  2.6706,  1.1395,  1.4752,  1.8860, -0.2277,  0.4957,  0.1554],
            [ 2.2775,  1.3390, -0.0980,  1.3205,  0.0784,  0.7509,  1.4119, -0.1818],
            [-0.0074, -0.5761,  0.5518, -0.3921,  1.7419, -1.6871,  1.3761,  0.4142],
            [ 1.3977,  0.5633, -0.8558,  0.3409, -0.0328,  1.0906, -0.0299,  1.5547]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.4130, -0.1702,  0.0312],
            [-0.4351, -1.2039, -0.8836],
            [-0.3460, -0.0197,  0.7481]], requires_grad=True), Parameter containing:
    tensor([[-0.4537]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.6014,  1.4306,  2.9051, -1.3855, -2.4572, -2.9108, -1.0306,  1.6099],
            [ 1.2884, -0.6197, -2.4976, -4.2865, -3.1482,  2.6141, -0.4404,  2.3919],
            [ 0.3988, -2.8371, -2.7190, -0.0304,  1.7544,  1.6640, -1.9684, -1.3709],
            [ 0.6277,  3.3600, -0.9666,  1.7334,  0.5104, -3.2255,  0.1919,  0.9799],
            [-4.7552, -0.8303, -2.9837, -0.0647, -1.0969, -1.1896,  1.6863, -0.4544],
            [ 4.3297,  4.3379, -0.4626, -2.5045, -2.4677, -1.2326, -2.6188, -3.3559],
            [ 1.5172, -2.7354, -7.5014,  1.1169,  3.6337,  2.0105, -1.2529,  1.0460],
            [-3.0235, -2.8311, -0.9818,  1.8099, -2.6341, -4.9999, -4.1462, -0.9064]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-4.3744e-01,  8.3894e-01,  2.3709e+00,  9.3675e-01,  6.4814e-01,
             -1.1813e+00,  1.6467e+00,  1.1704e-01, -5.7277e-03,  7.1125e-03],
            [ 6.4424e-01, -1.1132e+00, -8.1227e-01, -3.4629e+00, -2.0831e+00,
             -1.2953e+00, -2.8173e-01, -8.7994e-01, -1.1877e+00, -2.0670e-01],
            [ 1.0591e-01,  2.8225e+00, -1.4333e+00,  4.4442e-02,  1.1089e+00,
              1.1346e+00,  4.2773e-01, -6.9482e-01,  1.2745e+00,  3.1437e-01],
            [ 1.2415e+00, -2.6353e+00, -1.5757e+00, -2.4806e+00,  2.9791e+00,
              1.5422e+00,  1.0974e+00, -1.5570e+00, -1.1341e-01,  1.0877e-01],
            [ 7.8713e-01, -5.4647e-01,  1.9156e+00,  2.6003e+00, -6.4197e-01,
             -5.4581e+00, -2.9652e+00, -2.4829e+00,  2.3240e-01,  2.0073e-01],
            [-2.0246e+00, -2.9858e-01, -2.2362e+00,  1.3522e+00,  4.7066e-01,
              5.9403e-01,  4.3949e+00,  5.9739e+00,  1.7323e+00,  3.2393e-01],
            [ 1.6997e+00,  1.6021e+00,  5.5003e-01,  2.5832e+00, -3.2873e+00,
             -1.1817e+00, -1.0577e+00, -2.7485e+00, -2.1522e+00, -1.7792e+00],
            [ 6.3023e-01, -1.8648e-02, -3.7615e+00, -3.6869e+00, -3.0167e+00,
             -1.7663e+00,  9.8016e-01,  6.5526e-01, -3.2499e-01,  1.1530e+00],
            [-6.4410e-01, -1.5862e+00, -9.1752e-01,  2.1140e-01,  2.2822e+00,
              2.9737e+00,  8.8390e-01,  1.8504e-01, -2.7694e+00, -1.6979e+00],
            [-1.9846e-01, -4.8238e-01,  6.7312e-01,  1.4833e+00, -5.1199e-01,
             -5.3751e-01, -3.6910e-01, -1.5948e+00,  5.8968e-01,  1.3963e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.469 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
