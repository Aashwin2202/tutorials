.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.0804,  8.5224,  9.8842,  7.1312,  2.0914],
            [ 8.2203,  4.5952,  4.7139, 16.2268,  3.3656],
            [ 2.0409,  5.2649,  9.1945, 10.4732,  7.3443],
            [ 1.1822,  2.7843,  7.9482, 11.9726,  5.0743],
            [ 2.6707,  7.9421,  1.0007, 11.5228,  8.9890],
            [ 1.1822, 11.3876,  5.5152,  7.5893,  5.0743],
            [ 2.0409,  9.3748,  4.2348,  2.0492,  7.3443],
            [ 8.2203,  6.7923,  6.7668,  2.3547,  3.3656]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.2739,  0.0522, -0.4687,  1.2547, -0.2454, -0.6531,  0.4767, -0.1553],
            [ 0.9032,  0.3975,  1.8492, -0.2863,  0.6523, -0.7319, -1.1098, -0.2854],
            [-0.9806,  0.7274,  0.0816,  1.6742, -0.2853, -0.2637, -1.0365, -0.3925],
            [-2.1254, -0.5334, -1.0258,  0.6549,  0.6888, -1.4703,  1.4802,  0.2018],
            [-0.0945,  0.3957,  0.0206, -0.8665, -1.7311, -0.0922,  0.8167, -1.4078],
            [-0.0767,  0.1571, -0.1052,  0.7368, -0.0568, -0.5416,  0.8613, -2.2050],
            [ 1.2777, -1.6239,  0.6360,  0.7197, -2.2857,  0.5082,  0.3827,  0.4096],
            [-1.2850, -0.3887,  1.7234,  0.2680,  0.6225,  0.7265, -0.3287,  0.4274]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.2480, -1.0589,  0.1501],
            [ 2.1682,  0.7698, -0.7280],
            [ 2.0773, -0.2479,  0.2373]], requires_grad=True), Parameter containing:
    tensor([[-0.1928]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.3121, -0.7826, -5.8058,  7.2178, -7.0080,  0.6953,  2.5509,  0.4601],
            [ 3.0874, -2.5502,  3.6849,  2.7785, -5.0990, -1.5331, -4.1291,  2.5519],
            [ 2.1573, -2.9953,  0.1221,  2.1677, -3.3265, -1.3543,  0.8744, -0.2653],
            [ 0.3807,  2.1741, -0.0153, -2.7719, -0.3248,  5.2622,  1.2274,  0.4627],
            [ 4.8722,  3.4555,  3.2994, -1.4334, -1.5568, -1.6677,  3.2602,  3.0522],
            [ 1.0649,  4.5460,  2.7341, -4.8925, -2.0502, -4.4385,  1.8822,  0.9450],
            [ 2.5430,  0.8616,  1.1941, -3.9804,  2.5876, -0.0656, -1.6896, -5.0423],
            [ 4.4073,  5.3662,  1.0950, -6.6559,  9.5648, -0.7518, -0.6063, -0.6638]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.7191e-01,  6.8703e-01,  4.1100e-01, -1.2755e+00, -1.7061e-01,
             -1.5828e-01,  1.0357e-01, -1.6427e-01,  1.2437e+00, -1.7926e-01],
            [-1.4980e+00, -1.2855e+00,  4.7615e+00,  6.1426e-01, -5.5318e-01,
              2.5107e-01, -1.6892e+00, -1.8014e+00, -1.9451e+00,  1.0207e+00],
            [-1.2228e+00, -3.6026e+00,  3.6627e+00,  2.9046e+00, -1.1846e+00,
              1.5044e+00, -1.3928e-01, -8.1226e-01,  3.2851e+00, -1.3148e+00],
            [ 9.5948e-01,  1.6348e+00,  2.9905e+00,  1.3581e+00,  4.4575e-01,
              1.3814e+00, -3.3762e+00, -1.6748e+00, -7.5973e-01,  1.6047e+00],
            [-4.2119e+00,  1.3382e+00,  2.1301e+00, -2.1880e+00, -6.5038e-04,
             -2.1501e+00, -1.5015e+00, -6.1981e+00,  2.2107e+00, -3.3575e-01],
            [-8.8170e+00, -7.0828e-03,  4.2604e+00, -4.0244e+00,  1.1566e+00,
             -3.3364e+00, -4.3646e+00, -2.2884e+00, -1.0534e+00,  1.0068e+00],
            [-4.1829e+00, -4.3058e-01,  3.3543e+00, -1.5662e+00, -4.5318e-01,
             -4.6382e+00, -2.4790e+00, -4.5230e+00, -2.6776e-01, -2.3453e-02],
            [-3.4107e+00, -3.6110e+00,  2.0997e+00,  8.8503e-01, -1.1679e+00,
              2.6946e+00,  3.4751e-02,  1.7360e+00,  8.0321e-01, -8.1801e-01],
            [-5.6440e+00, -7.9060e-01,  4.5351e+00,  3.0116e+00, -4.9259e+00,
              9.2311e-01, -2.1286e+00,  6.0805e-01,  3.6772e-01,  5.5546e-01],
            [-2.7925e+00,  1.9140e+00,  1.8825e+00,  3.6432e-01, -2.9227e+00,
             -5.5922e-01, -2.8590e+00, -7.5535e-01, -1.8518e-01, -1.0910e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.495 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
