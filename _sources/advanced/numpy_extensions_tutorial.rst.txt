.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.1286,  3.0643,  5.9745,  2.6009, 11.8899],
            [ 4.9123,  4.4952,  5.1329,  6.8212,  5.8491],
            [ 6.1871,  3.4093,  6.0667,  4.3555,  4.8514],
            [ 9.4645,  6.7083,  3.4832,  8.8929,  8.5896],
            [13.8382,  2.7334,  6.0183,  6.8093,  4.3195],
            [ 9.4645,  8.1734,  8.1137, 17.2037,  8.5896],
            [ 6.1871,  1.2245, 15.2380,  2.6190,  4.8514],
            [ 4.9123,  8.0095,  3.3084,  4.4732,  5.8491]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5059, -0.9844, -0.3657,  1.0567, -1.3099,  0.7049,  0.6268, -0.8620],
            [-1.1376, -1.1742, -1.0047, -0.5999,  0.6142, -2.2179, -1.7761,  0.1732],
            [ 0.0514, -0.0243, -0.1598,  0.0310, -0.0632,  1.2900,  0.6736,  0.5985],
            [-0.2172,  0.1491, -0.9339, -0.7796, -0.2021, -0.4455,  0.5556, -0.5705],
            [-1.6868,  1.6815,  0.5946,  0.6214, -0.7920,  0.5774, -0.1455,  1.0965],
            [ 0.1846, -1.3199, -0.6292,  1.0722, -1.7999, -0.4309,  0.0953,  0.6828],
            [ 0.5347,  0.8658,  0.4922, -0.4325, -0.9218, -0.5211, -1.4093, -0.9696],
            [-1.5347,  0.6834,  1.2616, -1.3725, -0.9432,  0.9773, -0.6670,  0.8237]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7228,  1.2752,  0.1556],
            [-1.4231,  1.2412, -2.2724],
            [-1.0108, -2.3763,  0.2248]], requires_grad=True), Parameter containing:
    tensor([[0.3819]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.7201e+00, -6.0797e+00, -2.8123e-01,  2.5414e+00, -4.2869e+00,
              6.4049e+00,  2.2471e+00, -2.4833e-01],
            [ 3.7557e+00, -5.0839e-02,  3.6208e+00, -3.0291e+00,  1.8694e+00,
             -6.3817e-01,  1.6668e+00,  1.0602e+01],
            [-8.1690e-01, -5.4004e-01, -3.9943e+00,  1.2562e+00,  1.2318e+00,
              8.1955e-01, -8.9823e-03, -1.3959e+00],
            [-1.9623e+00,  2.9482e+00, -2.2866e+00,  7.7080e+00, -9.0228e+00,
              2.2801e+00, -8.1878e+00,  7.3290e+00],
            [ 2.6684e+00, -9.4688e-01,  4.1452e+00, -4.9443e+00,  5.1319e+00,
             -6.6561e+00,  2.8504e+00,  3.1025e+00],
            [ 3.2082e+00, -4.9227e-01,  4.2038e-01, -3.2313e-02, -1.6351e+00,
             -5.1386e+00,  7.5498e-01, -6.7837e+00],
            [ 3.8782e+00,  6.0866e-01,  3.0724e+00,  2.1152e+00,  7.5715e-01,
              3.7520e+00,  7.1964e-01,  2.1380e+00],
            [ 2.5886e+00,  7.1297e-01,  7.7691e+00, -7.3683e+00,  1.3249e+01,
              6.9822e+00,  6.3305e+00,  5.8107e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3799,  1.1542, -0.0995, -1.5445,  0.1480,  1.1110, -0.8560, -0.5811,
             -0.9027, -0.0973],
            [-0.8816,  2.4589, -1.6091, -0.7066,  3.2413, -0.3358, -0.8214,  3.1919,
             -0.5714,  1.2588],
            [-1.0012,  1.9531,  0.3758,  1.7635,  2.3779, -0.8373,  6.8736,  1.5294,
              0.0457,  2.2275],
            [-1.3819,  3.4642,  0.6039,  1.4556,  2.1044, -2.2809,  2.4803, -2.0981,
              5.9474, -0.2150],
            [-1.8103,  0.5853,  0.6954,  1.4917, -6.5792,  0.7916,  4.6130, -0.4913,
              3.1434, -1.3641],
            [-0.5244, -4.2055, -1.7346, -1.9018, -0.6493,  7.2631, -9.2921,  5.7975,
             -1.3277, -0.3094],
            [ 0.3824,  2.5959, -4.3219,  1.4303,  2.7406, -3.9645, -3.5073,  0.8609,
              0.1076, -1.9192],
            [-0.7742,  7.2741,  0.3397,  1.4254,  1.3326,  2.7055, -4.6119, -9.0276,
             -0.2242, -6.1353],
            [-1.2664,  0.2703,  3.7967,  4.4675, -0.3553,  2.3592, -0.3770, -6.6560,
             -4.0018, -3.0336],
            [-0.2245, -0.0833,  0.8386, -0.2672,  1.7911,  2.9005,  3.1812, -1.3707,
             -3.9113,  0.3649]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.538 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
