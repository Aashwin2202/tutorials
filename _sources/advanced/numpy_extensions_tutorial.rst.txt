.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.9399,  4.7510,  4.4404,  8.8738,  9.6069],
            [ 4.9624,  8.3171,  8.3253,  2.6537, 11.1663],
            [ 3.8350,  5.2879,  3.0525,  9.8181,  0.8821],
            [ 5.7635,  9.2248, 10.3798,  4.8769, 11.3626],
            [ 7.0927, 10.5737,  8.9372,  3.7811,  1.7945],
            [ 5.7635, 21.9617,  2.8487,  9.2668, 11.3626],
            [ 3.8350,  8.1423, 10.6400,  9.1552,  0.8821],
            [ 4.9624,  5.3853,  5.7196,  2.4754, 11.1663]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4654, -1.8664,  0.3333,  2.6452,  0.0480,  1.0274,  0.7489, -0.1626],
            [-0.3738, -0.3266,  0.0154, -1.1892, -2.1114,  1.5228,  0.3554,  1.1465],
            [ 0.8449,  0.0490,  1.0793,  1.2187,  0.1049, -0.6391, -0.8509, -1.3305],
            [-0.2249,  0.3742, -1.0894, -1.3651, -0.3669,  0.6723,  1.0952,  0.1028],
            [ 0.7842,  0.0096,  1.0637, -1.7051, -1.0976, -0.2020, -0.0375, -0.7000],
            [ 0.9503, -2.2937,  1.2144,  0.0454,  0.1575,  0.3571,  0.9658, -1.1657],
            [ 1.3142,  0.5381, -0.0479, -0.0740, -0.4861, -1.1338,  0.8752,  2.6306],
            [-0.2218, -0.2958, -0.1439, -0.7614,  1.8272,  0.0184, -0.4869, -0.9807]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.9781,  0.5327, -0.8421],
            [-0.4261, -1.1839, -0.4016],
            [-1.1881, -0.0781,  0.2046]], requires_grad=True), Parameter containing:
    tensor([[-1.0121]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.0169, -0.3444, -1.7931,  2.3785, -3.7476, -3.5414, -4.9713, -3.3269],
            [-0.0806, -6.2025, -2.7535,  0.2367, -2.0186,  2.2355,  3.1041,  4.4672],
            [-2.6785, -2.5860, -0.7932, -1.6304, -2.9592, -4.0664, -2.8241, -4.5192],
            [-2.7660,  4.4911,  4.8595,  0.1550,  0.3023, -1.5774,  1.5976, -0.7890],
            [ 0.6147, -0.7923, -2.0366, -4.6830, -1.1446,  2.4358,  0.5995,  1.9443],
            [-4.5746, -3.7477,  0.7137, -2.7128, -2.6692,  0.8929, -5.2759, -1.9210],
            [ 0.5466,  3.5447, -1.0226, -1.0134,  2.4513, -1.4828, -3.7011, -1.0616],
            [ 0.1561,  1.4363, -4.5329,  1.1735,  2.1717, -2.7815, -0.1292,  2.3179]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.9437,  0.7691,  0.8288,  2.7903, -1.2581, -1.1499,  0.7365, -1.4237,
             -0.3233,  0.5277],
            [-3.4124,  0.6574,  3.3690, -3.7420, -2.3436,  1.9619,  2.2242, -0.6449,
             -0.5291,  0.7511],
            [ 0.6019,  0.8815, -1.2113, -0.9794,  2.6302, -2.5964,  1.2350,  2.7690,
             -0.7872, -0.4730],
            [ 1.3341, -3.6938, -2.0381,  2.2431,  0.1415, -0.8235, -1.0846, -2.4172,
             -1.7459,  0.1378],
            [ 0.8165,  3.1127,  0.6418,  0.8253, -1.4741, -2.7037, -6.6018, -1.2886,
              2.8546,  0.2765],
            [ 1.1371,  0.6187, -0.3369, -0.4346,  1.9824,  0.4929, -0.8785,  3.4477,
              1.0391, -0.0500],
            [-3.4537, -2.0118,  0.2104, -2.1311,  1.2036, -2.4308,  1.7055,  0.7410,
             -0.4775,  0.3399],
            [-2.9208, -2.3652, -3.5899, -1.4685, -2.5724, -2.4611,  0.7887,  2.7897,
              0.6276, -0.5582],
            [ 2.1920,  2.1501,  3.3485,  2.9180,  0.6690,  2.0865,  1.5975,  0.4502,
             -0.7952, -0.3652],
            [ 1.7127,  1.9162,  2.0276,  0.8225,  0.0251,  1.3913,  0.1246, -1.1643,
             -0.0736,  0.1558]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.490 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
