.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.7988, 11.2265,  5.6813,  9.1746,  6.8987],
            [ 6.4092, 11.9788, 11.5054,  3.4521,  8.5348],
            [ 8.4835, 10.0297,  5.5599,  5.9639,  3.0464],
            [ 9.3275,  4.5971,  7.8916,  3.5590,  7.3939],
            [ 1.2774,  8.3731,  3.3418,  1.4513, 11.0876],
            [ 9.3275,  6.7338,  2.8713,  6.1265,  7.3939],
            [ 8.4835, 10.9120,  5.9838,  5.5713,  3.0464],
            [ 6.4092,  7.8704,  8.9167, 11.7010,  8.5348]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0410, -3.0607, -1.1379, -0.8269, -1.9714,  0.7557,  1.2353,  1.3953],
            [-0.0384,  0.4661,  0.1093,  1.0539,  0.7120,  0.7594,  0.5645, -0.3726],
            [ 0.3200,  0.8574, -0.6520,  0.4795,  2.1588,  0.9426,  0.6492,  0.4647],
            [ 0.6492,  1.1710, -0.1212, -0.9440, -1.2006,  0.9952,  0.0841,  1.0221],
            [ 1.7522,  0.3123,  0.8458, -1.1943,  0.7214,  0.0868,  0.5605, -0.9594],
            [ 0.9950,  0.1502,  0.5319, -0.9489,  0.7767,  0.3265, -2.3711, -0.2902],
            [ 0.7249, -0.9742,  0.9022, -0.9315,  0.5545,  0.3778,  0.5045,  0.4088],
            [ 1.1088, -0.7677,  0.1534, -0.1503, -0.4866,  0.7816,  0.7547,  1.0640]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.8903,  0.3398, -0.6919],
            [-2.2147, -0.1927, -0.7399],
            [ 0.1028, -0.7053, -0.3081]], requires_grad=True), Parameter containing:
    tensor([[0.9512]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.8767,  2.6972,  5.7653,  5.9564,  2.2444, -2.9305,  2.7237,  2.1405],
            [ 0.0865,  2.4463,  2.1295,  3.5918,  2.6341,  0.4927, -3.8578, -3.4955],
            [-2.2138,  0.3006, -2.6162,  0.6694, -1.0893, -0.8767, -0.6276, -1.1966],
            [ 0.5851, -1.7759,  0.6519, -0.5914,  0.0246,  1.2083, -1.1686, -0.9777],
            [ 1.9677, -0.2400,  3.1320,  0.5241,  0.5835,  1.7120,  1.1221, -4.2482],
            [-0.9653,  6.2458,  3.5703,  4.7444,  2.6826, -3.0304,  2.7097, -1.4756],
            [-5.0638,  9.2068,  3.4387,  6.5955,  3.7969, -2.3273, -1.0444, -3.0919],
            [-1.9766,  4.0557, -1.2663,  3.3691, -2.2702,  0.2932, -0.7946,  1.0388]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4357,  0.8548, -0.0885, -0.4033,  1.0167, -0.5143, -0.3793, -0.9069,
              0.0449, -0.9880],
            [ 0.0793,  1.7130,  3.0083, -0.2659,  2.1926, -1.3890, -0.3752, -4.7195,
             -0.9346, -1.2758],
            [ 3.3249,  0.1739,  5.6737,  2.3630,  3.0407, -3.8498, -1.4232, -2.4415,
             -2.0430, -1.1613],
            [ 0.7429, -1.7520,  2.2116, -1.7500,  2.3255,  1.4569, -3.7887, -2.3232,
             -1.7141, -0.7789],
            [ 0.2824, -1.1368,  0.5409, -2.0825,  1.4026, -3.2629, -1.5883, -1.8554,
             -2.7752, -0.3240],
            [ 1.2388, -0.9031,  4.2981, -2.2083,  1.2190, -3.3105, -5.8116, -1.8614,
             -2.1536,  0.0259],
            [-0.2891, -2.5653,  0.9007,  4.1665, -4.9142,  1.5200, -2.9405, -3.4781,
             -0.4169, -0.5114],
            [-0.8788,  3.5946, -0.4797,  6.2607,  0.9701, -0.2185, -1.5560, -2.1301,
             -0.0894, -0.7610],
            [-1.1503,  2.8488,  3.6095,  2.7958,  0.5473,  4.1231, -1.6205,  0.4570,
             -0.6324, -0.4290],
            [ 0.0543, -0.5198,  0.7020,  1.3867,  0.9497, -0.6672,  0.7401,  0.3889,
             -0.2044, -0.0729]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.598 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
