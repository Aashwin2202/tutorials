.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.0537, 13.3965, 10.5735, 13.3500,  1.3378],
            [ 3.8887,  7.1274, 10.5627, 10.1437,  3.1393],
            [ 4.4460, 12.4497,  8.5318, 10.0130,  4.4525],
            [ 4.5055,  8.6522,  2.0185, 11.5295, 10.1983],
            [ 3.3755,  6.1662,  9.1710,  5.0899, 16.9635],
            [ 4.5055,  6.6672, 12.8196,  6.7564, 10.1983],
            [ 4.4460,  3.9880,  4.3733,  5.0414,  4.4525],
            [ 3.8887,  6.8385,  6.5394, 13.1140,  3.1393]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.3375, -0.4385,  0.6222, -0.9424,  0.0786,  1.2124, -0.1363,  0.2226],
            [-1.7436,  1.2260, -0.5541,  0.1368,  1.8733, -0.4757,  0.8920, -0.3848],
            [ 0.6597, -0.5879,  0.2440, -0.4096,  0.1954, -0.6872,  0.7538, -0.4092],
            [-1.7784,  0.6608,  0.3858, -0.4679,  0.5903,  1.7175,  0.2253,  0.3542],
            [-0.6356, -1.1131,  1.5509,  0.0441,  1.2866, -0.9597, -0.5694, -0.5200],
            [-0.2736,  0.7644,  2.2324,  0.3081, -0.0909,  1.1887, -3.2820,  0.3480],
            [-0.4288, -2.5491,  1.0995,  0.9245, -0.8028, -0.2662,  2.1376,  1.0469],
            [-0.9001, -1.6918,  0.4165,  0.4697, -0.4095,  0.0484, -0.6594,  0.5346]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0480, -0.8656,  0.9108],
            [-1.3933, -0.8971,  0.9175],
            [ 0.0740, -2.9312,  0.1565]], requires_grad=True), Parameter containing:
    tensor([[0.5773]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.0162,  3.1921, -1.9442,  1.9657, -6.8952, -0.7897, -3.0673,  2.9575],
            [-3.8855,  4.7347,  5.2600, -0.2604,  0.7002,  1.3982, -4.3203,  4.3358],
            [-1.7568, -2.4497,  5.9404,  2.2987,  2.6134, -0.3119, -2.3867,  4.3772],
            [ 0.5188, -2.1089,  8.0579, -2.9445,  2.9438,  8.9672, -1.9035,  0.8341],
            [-0.9123,  1.5520, -0.0835, -5.0898, -2.0084,  7.7475,  4.8426,  1.1801],
            [-3.4374,  2.3160,  5.7731, -2.0522, -2.5457, -2.8730,  9.8456, -5.1951],
            [ 1.8991, -0.9105,  2.8725, -0.1571,  3.0204, -0.8746,  4.8412,  7.0694],
            [ 2.9424,  2.9096, -5.8172,  2.9079, -0.1304, -3.8396,  5.5053,  3.4545]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0621, -1.1282,  1.0160,  0.3100,  0.1946, -0.2631,  0.6545, -1.8824,
              2.2283, -1.0683],
            [-1.8065, -1.5159,  1.5430,  1.6271, -0.1580,  0.0496, -0.7715,  0.1903,
              2.3374, -1.8343],
            [-0.0857, -4.0233,  2.4160,  3.0226, -0.2018, -1.1437,  4.1373, -3.3973,
              3.2967,  0.0545],
            [-0.7190,  0.3501,  3.4673,  3.8924,  2.2350,  0.1238, -1.7221,  0.4407,
              0.3332,  2.0404],
            [ 0.8743, -1.2120,  0.6751,  4.7163,  3.5620,  0.6453,  0.4850, -2.3987,
             -3.0934, -0.0373],
            [-2.3003, -1.8438,  0.4767, -1.4120,  1.2906,  4.8692, -3.7394,  5.9127,
             -4.7346, -0.7469],
            [ 1.6661, -3.9398, -9.6981, -2.4146,  1.0613, -0.4613,  1.0107,  1.0292,
              1.7654,  0.3587],
            [-0.0933,  2.3733,  0.5279, -4.2684, -0.6657,  1.7591, -1.5761, 10.0518,
             -5.6989,  2.2027],
            [-1.8881, -1.8083,  1.1663,  2.4782,  0.8853, -5.0636,  0.8626, -0.0353,
             -4.3456,  2.0162],
            [ 0.1001, -3.9294, -1.2351, -0.4023,  3.4799, -1.1921, -3.7018,  6.5007,
             -6.6876,  0.3395]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.568 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
