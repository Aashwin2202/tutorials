.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.7320,  5.5049,  2.9945,  7.8213, 25.9079],
            [13.0252, 13.6044,  9.5574,  9.3225,  5.8905],
            [10.9211,  7.9474,  8.7739,  7.3245,  1.6875],
            [ 9.2810,  4.7551,  4.6223,  9.1393,  7.9940],
            [ 5.2747, 11.0661,  7.4849, 10.8589,  9.0418],
            [ 9.2810,  7.1471,  8.5534,  6.7102,  7.9940],
            [10.9211, 10.2151,  9.5378,  2.9519,  1.6875],
            [13.0252,  9.8010,  7.5282,  5.4389,  5.8905]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.1396e+00,  5.3094e-01,  1.9808e-03,  2.1134e+00,  1.4153e+00,
              5.3974e-01, -1.7223e+00,  2.7404e+00],
            [ 6.8750e-01,  5.8004e-01,  1.8076e-01,  2.2563e+00,  6.8605e-01,
              4.3929e-02, -5.7983e-01, -1.9976e+00],
            [ 3.9556e-01,  6.6318e-01, -1.1088e+00, -6.6939e-01, -8.6793e-01,
              9.6094e-01, -1.3990e+00,  3.5823e-01],
            [ 3.8485e-01, -3.7119e-01,  3.8651e-01,  2.2405e-01,  1.3510e-01,
              8.6350e-01, -5.4659e-01,  9.2862e-01],
            [ 4.3712e-01,  8.7135e-01, -1.3414e+00, -7.2919e-01,  1.3344e-01,
             -8.6027e-01, -3.5448e-02,  1.8215e+00],
            [-1.5364e+00, -9.9135e-01, -8.3258e-02,  1.9204e-01, -1.5094e+00,
             -1.5593e-01, -8.2288e-01,  6.6437e-01],
            [-1.6604e+00,  1.3536e-01, -1.7841e+00, -2.3601e+00, -1.0216e+00,
              2.4246e-01,  3.4516e-01,  1.7645e+00],
            [-1.7593e+00,  7.5218e-01, -7.7146e-01, -1.5622e+00, -2.0716e+00,
             -2.5606e-01, -2.4814e-01, -2.0583e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5612, -1.0541,  0.6480],
            [ 1.1828,  1.9093, -0.5692],
            [ 1.6334,  1.4265,  0.7965]], requires_grad=True), Parameter containing:
    tensor([[0.0944]], requires_grad=True)]
    Output from the convolution:  tensor([[ 6.2121, 12.0393,  5.4520,  0.0846, -0.0757,  2.5955,  0.9581,  1.1014],
            [-4.4690, -4.5659,  0.1173,  1.0552, -5.3088, -8.3612, -4.4755,  7.5355],
            [ 0.7779, -4.1174, -2.5347, -1.4880, -1.9696, -1.9866,  3.7733, -2.6905],
            [ 1.9299,  8.1060,  2.1841,  3.2614,  4.2819,  2.6238, -0.7364,  6.6197],
            [ 6.5300, -0.4729,  2.3913,  0.7407, -1.2861,  3.3058,  3.2357, -2.1261],
            [ 1.0245,  1.5913,  2.2441, -3.3150, -1.8085, -0.2636, -4.8630,  3.1284],
            [ 8.1218,  3.1782, -2.3447, -2.9275,  1.3666, -1.4743, -3.1600, -3.7735],
            [ 3.9808, 12.0104, -1.0583,  1.3696, -2.9027, -2.2147,  5.1475, -4.9920]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0111, -0.9220, -1.8561,  0.2866, -1.6403, -1.8420,  0.5976,  0.6251,
              0.1476, -0.1292],
            [ 0.4304,  2.1114,  2.0005,  1.6823,  3.9089,  4.0114, -0.2223,  1.6881,
             -0.6078, -0.3325],
            [-0.8589,  2.9095,  6.1508,  1.7012,  3.6664,  5.0601,  2.1743, -2.9880,
             -2.0802,  0.5004],
            [-1.7653, -1.8333, -2.4928, -0.9930, -0.8688, -2.0107, -3.9632, -3.8225,
              0.5641, -1.5544],
            [ 0.9877,  2.3477,  2.8559, -3.6676, -4.5356,  0.5940, -2.8573, -2.4730,
             -2.7443,  0.9005],
            [ 2.2723,  0.4449, -0.3852,  3.2424, -1.0497, -2.7576,  0.0224, -3.2986,
             -3.2599,  0.0615],
            [ 1.9373, -2.5130, -1.7940,  0.7499, -3.2183, -5.4929, -1.0688,  1.5676,
              2.7465, -1.1458],
            [ 3.9057,  5.7738,  4.5688,  4.3008, -0.3520,  2.1711, -0.4389,  0.2121,
              2.6603,  1.2469],
            [ 1.7845,  1.2130,  3.8280,  6.1275,  6.3121,  1.6419,  4.3343,  4.4118,
             -1.4672, -0.2019],
            [-0.8539, -1.6525, -0.9774,  2.0084,  1.6353,  0.1551,  2.4909,  2.3528,
              1.4136, -0.0797]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.470 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
