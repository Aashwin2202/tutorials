.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.4435,  6.5846,  3.0245,  8.6555, 12.4315],
            [11.6763,  8.3906,  8.8197, 10.9113,  8.0578],
            [ 9.5651,  6.1089, 10.0148,  7.9031,  6.0810],
            [11.1607, 11.5712, 11.5954, 10.4850,  5.9414],
            [13.8572, 11.6123,  5.1090,  3.4620, 18.3768],
            [11.1607,  6.7532,  8.3548,  6.4688,  5.9414],
            [ 9.5651,  5.9881,  3.8779,  1.8487,  6.0810],
            [11.6763,  8.7117,  9.4537,  2.1972,  8.0578]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.7344, -1.6831,  0.4488,  0.4562,  0.7433, -0.0561,  1.6012, -0.8149],
            [ 1.3992,  0.4791,  1.3665,  1.4780,  1.6982,  0.5205, -1.1008,  0.9529],
            [-1.6253, -0.2485,  0.2843, -2.1006,  0.2930,  0.2804,  1.8300, -0.7768],
            [ 0.7568,  1.5258,  1.5099,  2.3444,  1.4049,  0.0916,  0.7390, -2.0959],
            [ 0.2519, -0.7297,  0.1775,  0.4400, -0.1122, -1.1988,  1.6824, -0.4831],
            [-0.9458,  0.2833, -0.2407, -0.0196, -1.0595,  1.7091,  1.9069,  0.0370],
            [ 1.1432, -0.8452, -1.2542, -0.6944, -1.0516,  0.1227,  0.2019, -0.7236],
            [-0.6763, -0.2499, -1.4463, -0.2230,  0.1352,  0.0075, -1.3583,  0.2206]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4385, -1.0011, -1.3228],
            [ 0.2486,  1.1928,  0.1089],
            [-0.5681,  0.3088,  0.1114]], requires_grad=True), Parameter containing:
    tensor([[-0.5885]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.1641e+00, -1.0462e-01,  5.7108e-01,  1.0231e+00, -2.0902e+00,
             -2.7530e+00, -5.4356e-01,  4.1008e+00],
            [-1.6428e+00,  4.7565e-03, -2.4298e+00,  1.1815e+00, -4.0010e-02,
             -1.7406e+00, -3.5746e+00, -1.7743e-01],
            [-1.6812e+00,  9.2378e-01, -8.0126e-01, -1.7657e-01,  2.9714e-01,
             -1.0267e+00, -9.3660e-01, -1.1462e-01],
            [-4.0068e+00, -2.3189e+00, -3.2608e+00, -3.6210e+00,  3.7720e+00,
              3.3960e+00,  2.5411e+00,  2.3414e+00],
            [ 3.6159e+00,  1.8107e+00, -2.1062e-01, -3.6937e+00, -2.4262e+00,
             -3.2355e+00, -1.6226e+00, -1.4145e-01],
            [-4.6334e-01, -1.1555e-01,  3.0174e+00, -6.2412e-01,  1.5277e+00,
             -1.6490e+00, -2.0444e+00,  5.9762e-01],
            [-4.5600e+00, -5.8824e+00, -4.1386e-01, -9.2334e-01, -6.4904e-02,
              1.4288e+00,  2.4309e-01, -2.0251e+00],
            [ 4.6958e+00,  1.8504e+00,  1.7962e+00,  1.8319e+00,  5.9224e-01,
             -5.1311e+00, -3.0012e+00, -1.1792e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4077, -1.1801, -1.3898, -0.5953, -0.3704, -1.4675,  1.4103,  1.2349,
             -0.0610,  0.8018],
            [-0.0168,  1.7179,  2.5798,  3.2936,  2.7125, -1.4192, -3.3831, -3.9939,
             -6.0196, -1.0801],
            [-0.4358, -0.5691, -2.9904, -3.0081,  2.5961,  1.0686,  0.9556,  4.2930,
              0.9733, -0.6379],
            [-0.0540,  2.7362,  2.5654, -0.5959,  0.0392, -1.7469, -2.7062,  1.6662,
              1.0369, -0.9944],
            [-0.5919, -2.5806, -1.1060, -0.3335,  2.8333,  2.3503, -0.9039, -0.6641,
              2.5012,  2.2647],
            [ 0.2452,  0.9884,  0.7801,  0.0209, -0.0677,  2.4178,  3.3202,  1.3983,
              1.6012,  2.3283],
            [-0.0507,  1.6068,  1.6177, -0.4768, -0.7909, -1.2641,  0.0383, -2.5133,
             -3.5004, -1.6019],
            [ 0.2654,  0.8665,  0.9933, -0.6509,  1.9868, -0.9304,  1.3384,  0.4777,
             -0.5014, -2.1916],
            [-0.0750, -1.6420,  0.5570, -0.8517, -0.0145, -0.8681,  0.3080, -0.6548,
              2.0982,  0.2752],
            [ 1.0458, -1.2522,  0.5241,  0.3505, -0.3954, -0.0980,  0.3502, -1.0412,
              0.4308,  0.1760]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.472 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
