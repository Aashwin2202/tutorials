.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[11.2792, 10.3725,  8.5213,  3.6049,  3.4923],
            [ 9.6969,  1.2188,  8.7979,  7.0332,  3.1841],
            [ 7.9559,  5.9293,  7.0097,  6.2922,  4.5092],
            [ 1.6943,  2.9346, 13.0927,  6.2055,  6.1088],
            [ 9.4837,  6.5472,  7.3956, 14.6001,  5.6132],
            [ 1.6943,  4.7097,  5.2573,  3.3791,  6.1088],
            [ 7.9559,  9.4292, 17.3266,  1.7410,  4.5092],
            [ 9.6969,  7.8034,  5.1569, 16.6757,  3.1841]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-2.0195,  0.6192,  1.3211, -1.8755, -0.8560, -0.5647, -0.9990,  0.5857],
            [ 0.9910, -0.1889, -1.7110, -0.1554,  0.6575, -1.5757, -0.6236,  0.2772],
            [-0.1827, -0.6550, -0.3942, -0.7575, -0.9348,  1.1037, -0.6924, -0.1898],
            [ 0.3460, -1.0381,  0.1310, -1.0262, -2.3703,  0.8415,  2.1117, -0.9142],
            [ 0.2146, -0.4123, -0.1236, -0.2043, -2.1583, -1.8687, -1.0756,  0.3060],
            [ 0.8626, -0.6809,  0.1425,  2.5337, -1.4786, -1.2677,  1.0254,  0.0670],
            [ 0.0715,  1.3932,  0.7985, -1.3400,  0.2947, -0.2982,  1.0146, -0.5022],
            [-0.0571,  0.3247,  0.1084, -0.1354,  0.4173,  0.3601,  1.2748, -0.1468]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.1198,  0.2861, -0.1916],
            [ 1.0955,  1.2050, -1.4494],
            [-0.2857, -0.6467, -0.9700]], requires_grad=True), Parameter containing:
    tensor([[-0.0704]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.2030, -1.6012, -2.4097, -1.9688, -3.4676,  0.3953,  1.3601, -0.4919],
            [ 1.5846, -0.8302, -1.0524,  3.1258,  6.3131, -2.1673, -3.0621, -2.2040],
            [-2.6730, -1.1966, -2.5149,  0.2540, -1.3958, -1.5937, -0.3052, -1.5114],
            [ 1.7163, -0.5714, -2.4949,  0.3675,  2.5046, -1.9183,  0.0271,  0.0858],
            [-2.9348, -4.7592,  0.5150,  1.7633,  0.2941, -2.2353, -1.4879, -5.2738],
            [-2.8718,  0.8360, -0.6985, -2.2609,  2.0100,  0.9789,  0.6765,  2.2398],
            [-3.5324, -1.1551,  1.9440,  0.8692, -1.9694,  1.1938,  4.4792, -1.4061],
            [-0.9637, -1.8724,  2.7494,  5.0025,  2.6577, -3.6364,  1.1133, -3.0711]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 6.2127e-02,  1.4824e-01, -5.7961e-02,  1.3438e-01,  6.8792e-02,
              1.0495e-01, -1.0272e-01, -2.8483e-01,  1.4204e-01,  7.1653e-03],
            [ 6.0256e-01,  8.4094e-01, -1.5244e-01,  3.7975e-01,  3.3121e-01,
              4.5251e-01, -7.9058e-01, -7.8798e-01,  6.3030e-01,  7.1479e-02],
            [ 1.9215e-01,  1.3312e+00, -8.7657e-02, -2.5645e+00, -7.8261e-02,
              7.3590e-02,  3.1075e+00,  1.6902e+00, -2.6771e+00,  2.9660e-01],
            [-8.1021e-04, -3.6025e-01, -5.2414e-01,  1.5840e-01,  2.0943e+00,
              2.0358e+00, -1.2023e+00, -7.1341e+00, -1.8271e+00,  1.5188e+00],
            [-1.3714e+00, -1.3223e+00,  2.6261e+00, -1.2269e+00, -3.5857e+00,
             -1.7194e+00, -4.4395e+00, -5.1856e-01, -2.0634e+00,  4.3822e+00],
            [ 8.2228e-01,  9.9485e-01, -4.8188e-02, -9.2235e-01,  6.4841e-02,
              1.1996e+00, -2.5664e+00,  2.1948e+00, -1.2748e-01,  4.6096e+00],
            [-5.8443e-01,  5.7575e-01,  2.5084e+00, -1.4933e+00, -1.4646e+00,
              1.8780e-01,  8.0257e-01,  3.3115e+00,  1.8341e+00,  1.1058e+00],
            [-5.3258e-01,  1.1368e+00,  3.3820e+00, -3.7701e+00, -2.4908e+00,
              1.8265e+00, -8.1942e-01, -3.1383e-02,  1.9138e+00, -1.1166e+00],
            [-5.5006e-01, -1.5567e+00,  9.9661e-01, -1.0396e-02, -2.1550e+00,
              3.3753e+00,  5.0151e-03, -7.3438e-01,  1.9759e+00, -8.1629e-01],
            [ 1.8146e-01,  5.6270e-01,  5.4201e-01, -2.6131e-01, -1.1682e+00,
              9.4994e-02, -6.2308e-01, -1.4164e-01,  6.7161e-01, -1.7361e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.498 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
