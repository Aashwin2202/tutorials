.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[13.9783,  4.0125,  6.2902,  0.8716, 10.4334],
            [ 1.5840,  7.9025,  5.0512,  4.8049,  5.5398],
            [ 2.1718,  8.9720,  9.3797,  9.2414, 12.5276],
            [ 8.5061,  4.3797,  4.0076,  9.0520,  7.9133],
            [ 3.9413,  2.1721,  4.9523,  7.0555, 10.6230],
            [ 8.5061,  2.4187,  5.7796,  5.4839,  7.9133],
            [ 2.1718,  2.3676,  5.0276,  0.9299, 12.5276],
            [ 1.5840,  3.8888,  6.1177,  4.9440,  5.5398]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.1450e-03, -6.2606e-01, -3.4406e-01, -3.1877e-01,  6.9437e-01,
              6.1552e-01, -3.7236e-01,  6.1184e-01],
            [-1.2018e+00, -6.4332e-01,  4.1878e-01,  4.5998e-01, -4.7391e-01,
             -2.5049e-01,  1.7404e+00, -2.1034e+00],
            [-7.3425e-01, -2.9154e-01,  5.6498e-01, -2.9800e-01, -1.4028e+00,
              5.7907e-01, -1.1337e+00, -3.3707e-01],
            [ 2.2652e-01,  4.6731e-01, -7.8405e-01,  6.6185e-01, -2.9662e-01,
             -3.4236e-01, -3.3254e-01,  2.6682e-01],
            [-1.1314e+00,  2.3318e-02, -1.2583e+00,  3.8540e-01, -9.0170e-01,
             -1.9684e-01, -1.1162e+00,  2.2238e+00],
            [-4.9523e-01, -8.1525e-01, -5.3988e-01, -1.0570e+00,  3.8672e-01,
             -1.0096e+00,  1.3030e+00,  5.3530e-01],
            [ 2.8635e-01,  3.4287e-01, -4.6535e-01,  5.5158e-01, -4.4002e-01,
             -4.6705e-02, -2.1083e-02, -4.6359e-01],
            [-7.5255e-01, -9.8350e-01, -7.5488e-01, -8.5193e-02, -1.7631e+00,
             -2.1922e-01, -1.1134e+00,  5.9080e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3478, -0.9188,  1.5269],
            [ 1.1498,  1.5420,  2.7444],
            [ 0.5728, -0.3476,  1.1112]], requires_grad=True), Parameter containing:
    tensor([[0.2864]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.3767,  3.1760, -0.4779,  4.5069, -1.9505, -1.2079,  3.1976, -2.5071],
            [-4.5096, -1.6339, -2.8929,  2.0954, -1.1225,  1.8105,  1.0854, -4.0014],
            [ 1.5378,  3.2471, -0.5782,  4.5147, -0.1074, -4.4506, -2.2311, -0.9202],
            [ 1.2296,  4.6111,  4.2460,  6.7929,  1.4560, -0.4463, -0.0409,  1.6246],
            [ 2.7415,  0.6537,  3.1115, -0.4519, -0.6136,  1.0148,  1.1544, -0.2697],
            [ 3.4888, -2.0203, -0.1005, -1.0722,  1.2200, -2.7370, -4.9160,  0.8307],
            [-0.0271, -4.1697,  3.1602,  0.0326,  5.1564,  0.6620,  4.2919, -0.2109],
            [ 8.4833, -1.0730, -0.6398,  0.5267,  3.2079,  2.0929,  3.4797,  1.2370]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.3125,  0.5258, -0.9628, -0.0689, -1.6431, -0.9206,  3.6810, -1.6019,
              1.1880, -0.3947],
            [-1.0393, -2.6710, -4.9093, -2.9722, -3.4868,  6.8397,  0.1783, -0.1899,
              2.4900,  0.1643],
            [-0.6186, -1.0373, -4.9973, -5.9740, -8.3561, -2.9833, -0.3411,  3.0968,
              5.9160,  1.8059],
            [ 0.1537, -1.6275,  0.0422,  2.4970,  1.6032,  2.5727,  1.1553,  0.6781,
              4.5469,  1.1319],
            [ 1.9424,  1.8093,  9.8238,  3.9967,  1.0281,  1.8569,  1.2925, -5.7069,
              0.3493, -1.0908],
            [ 2.2949,  4.2122,  3.7516,  3.2694,  6.8784,  0.9214, -4.7553, -5.7414,
             -1.4937, -1.0580],
            [ 0.0478, -4.6470,  5.6574, -0.3028,  2.5062,  0.7868,  1.3640, -0.0399,
              1.1952, -0.6063],
            [ 0.8430,  2.3852,  0.3100, -7.4285,  1.7924, -0.5880, -5.1056, -0.7795,
             -2.6323, -0.5090],
            [-0.5805, -5.2954, -1.6236, -4.0188,  1.7631, -1.2622, -3.6462,  0.4674,
             -0.3001,  0.8938],
            [-0.8243, -0.1207, -0.7664, -1.2483, -0.0556,  1.2607, -1.9833,  1.1051,
             -0.6632,  0.6482]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.471 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
