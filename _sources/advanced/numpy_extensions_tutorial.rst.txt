.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.3100, 10.6857,  3.2958,  6.4347,  7.4627],
            [ 7.8021,  7.8206,  8.0211,  2.1605,  5.4372],
            [ 1.3909,  9.2795,  5.2245,  5.8139,  2.6935],
            [ 0.8528,  3.3643,  5.9788, 10.5546,  6.9287],
            [ 5.1672, 15.2068,  5.5127,  9.0238,  1.5391],
            [ 0.8528,  9.5635,  9.1594,  5.0924,  6.9287],
            [ 1.3909,  3.6479,  7.6714,  7.6498,  2.6935],
            [ 7.8021,  5.4028,  2.0153,  1.1827,  5.4372]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 6.2891e-01, -2.2386e+00,  1.7617e-01, -6.4387e-01, -3.1021e-01,
              6.6853e-01,  8.0279e-01,  5.4641e-01],
            [-2.4166e-02,  6.8805e-01,  2.8750e-01,  7.1413e-01,  9.4063e-02,
             -6.9937e-01, -2.2648e-01, -1.2619e+00],
            [-1.3209e-03, -2.1319e-01,  7.8799e-01,  2.8939e-01,  3.4799e-01,
             -7.0383e-01,  1.1836e+00,  3.0335e-01],
            [ 1.0726e+00,  5.8713e-02,  1.0445e-01, -2.1445e-01, -2.6776e-01,
              6.6326e-01, -7.5944e-02, -1.9653e-01],
            [ 3.5071e-01,  1.1587e+00,  3.0137e-01, -4.8402e-01, -5.4065e-01,
              9.5868e-02,  7.5183e-01,  3.1178e-01],
            [ 7.6088e-02,  6.2858e-01,  2.0847e+00,  8.7359e-01, -1.6527e+00,
             -2.4779e-01, -1.9518e-02, -1.8651e+00],
            [ 4.6488e-01,  1.4405e+00, -1.8292e+00, -8.0514e-01,  2.3052e-01,
             -1.0095e+00, -4.9520e-01,  1.1721e+00],
            [ 1.3523e+00,  6.4627e-01, -5.7656e-02, -2.7607e-01, -1.0162e+00,
             -1.5325e+00, -6.9521e-01, -1.4438e+00]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.3526,  0.0020, -0.0769],
            [ 0.7690,  0.4106,  0.8030],
            [ 1.1618,  1.6260,  0.0714]], requires_grad=True), Parameter containing:
    tensor([[0.8792]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.8730, -1.3569,  2.0582,  0.0904, -3.8245,  0.5858,  2.6798,  0.8315],
            [ 1.9594,  2.1362, -0.8586, -0.1024, -0.0268, -0.9531,  4.2255, -5.1304],
            [ 1.0354, -0.2413, -2.6257, -0.1403,  2.0875,  2.1061, -3.8133,  2.4275],
            [ 0.5311,  0.6172, -0.6742, -2.8969, -3.9238,  0.8237,  3.1890,  3.3760],
            [-0.4849, -1.3856,  2.5563, -1.6731, -2.4867,  3.4383,  3.9121,  0.2232],
            [-0.8683,  0.5081, -1.7774,  2.2530,  2.9277, -1.2549, -1.3433, -0.7532],
            [-1.7258, -0.0217,  3.7131,  0.0410,  0.1586, -2.0176, -4.2218,  1.3977],
            [ 3.0848,  1.1349,  3.7556,  3.2620, -1.2099,  0.4425,  5.1180,  2.2715]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3473,  1.1537,  0.8850,  1.0143, -3.1176,  1.4551, -1.0365, -0.1474,
             -0.0482, -0.0130],
            [ 0.0287, -0.8465, -0.0211,  3.4572,  0.2098, -1.9377,  0.5191, -2.6625,
              0.5014,  0.0148],
            [ 1.4998, -1.8533, -3.4118, -5.0216, -2.8148,  2.1169, -0.1962,  4.1881,
              1.7178,  1.2861],
            [-1.1101,  0.0097, -1.0541, -3.8209, -3.3357,  3.3507,  4.9637,  1.9391,
              3.1793, -0.1090],
            [-1.6579, -2.6154, -0.9985, -1.1469,  1.3927, -0.6086, -0.0476,  1.4078,
              0.2949,  0.6821],
            [-1.0762,  1.8112, -0.7248, -3.3868, -1.1689,  0.0865,  1.3988,  1.5073,
              1.1857, -0.0963],
            [-0.0766, -0.9943,  3.9951,  4.1839,  4.6240,  1.9152,  2.8925, -0.4295,
             -1.1304,  0.2753],
            [ 1.2608, -1.5110, -1.7947,  1.8274,  5.3766,  3.1998, -2.4998,  1.0598,
             -0.6105, -0.0642],
            [ 0.2780,  0.9380, -2.5950, -3.3646, -4.5559, -0.5014,  0.1710, -3.3648,
             -0.5398, -1.1893],
            [-0.2079,  0.3020, -0.4246, -1.4442, -2.0480, -4.0213, -0.4389, -0.6396,
             -2.3238, -0.1042]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.507 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
