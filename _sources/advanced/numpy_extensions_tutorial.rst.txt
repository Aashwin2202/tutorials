.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.4056,  4.3510,  3.2368,  8.6712, 12.3745],
            [ 9.8592,  6.3057,  6.9756, 12.7532,  8.2070],
            [ 3.7704,  4.5994, 16.5930,  5.8721,  3.7923],
            [ 4.0188,  2.4563, 13.0324, 16.2480,  7.8616],
            [ 9.1579,  6.0166,  7.5357,  1.3289, 10.3800],
            [ 4.0188,  5.8188,  2.0996,  1.8852,  7.8616],
            [ 3.7704, 12.9235,  5.4979,  2.8559,  3.7923],
            [ 9.8592,  5.9493,  8.8809,  7.4667,  8.2070]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.0933e-01, -7.3566e-01, -1.8712e-01, -7.6071e-01,  4.5367e-01,
             -1.0776e+00, -3.6597e-01, -1.5531e-01],
            [-1.3273e+00,  7.3543e-01, -1.7278e+00,  1.5646e-01,  2.1187e+00,
             -4.7391e-01, -3.1024e-01,  1.0341e+00],
            [-8.1774e-01, -8.7278e-01, -7.7504e-01, -1.1152e+00,  3.4907e-01,
             -1.2101e+00,  2.5228e+00, -9.2155e-01],
            [-8.2830e-01, -1.0982e+00,  9.8402e-01, -1.0060e+00, -8.1406e-01,
             -3.2181e-04,  4.2295e-01, -9.9018e-01],
            [ 3.9157e-01,  1.5104e-01, -1.0370e-01, -6.9891e-01,  1.7308e-02,
             -2.0556e+00, -1.7658e-01, -8.8315e-01],
            [ 4.9335e-01, -1.4608e+00,  4.0497e-01,  3.1285e+00, -1.5598e-01,
             -1.4298e+00,  3.1818e-01, -6.4008e-01],
            [-1.0982e+00, -6.3334e-01,  8.5625e-01, -4.3012e-01, -5.9419e-01,
              1.7918e+00,  8.6629e-01, -2.2226e-01],
            [ 9.5497e-01,  1.8660e+00, -5.9685e-01, -2.1510e-01,  1.3191e+00,
              4.4474e-02, -3.1909e-01,  2.8885e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0142, -0.0713, -0.7850],
            [ 0.3673,  0.0128, -0.2169],
            [-0.9941, -1.2069,  0.3723]], requires_grad=True), Parameter containing:
    tensor([[0.0157]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.8445,  2.2958,  1.8110, -0.2717, -2.5853, -0.9633, -0.4939, -4.3423],
            [ 4.1732, -0.4783, -1.8780, -2.1991,  1.0182,  0.1337, -1.8199, -1.0872],
            [-1.3471, -1.1647, -2.9821, -0.5393,  1.0326, -1.4460,  0.0050,  0.8104],
            [ 1.0955, -0.2532, -0.6520,  1.2190,  1.4140,  0.3139,  0.3980, -3.7420],
            [-0.4412, -1.8061,  1.9369, -0.6015, -2.4696,  0.9926, -2.2135, -3.8037],
            [ 2.4999,  2.3242,  0.7819,  0.4932, -1.5645, -1.9995, -3.8165,  0.4034],
            [-1.4523, -2.9786, -0.5828,  0.2935, -0.5755, -2.0976,  0.1608,  0.6836],
            [-0.5146, -0.0926,  0.8815, -2.3769, -1.4126, -1.8004, -0.9671,  2.6665]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0129,  0.0584,  0.7575,  0.2834, -0.8982, -0.6848,  0.6631, -0.4608,
              0.9539,  1.5046],
            [-0.3271, -0.2308,  0.4018,  2.0487, -0.6424,  0.6768, -0.8585, -0.6303,
              0.1811,  1.0424],
            [ 1.0358,  0.8415,  0.0359, -1.4721,  0.2485, -0.1367, -0.6124,  2.4532,
              1.3119, -0.7012],
            [-0.7850,  1.0992,  1.8195,  0.4658,  1.4221, -1.9634,  1.0516, -0.8070,
              1.5283,  0.8303],
            [ 1.4467,  2.4354, -0.3264, -2.9550, -1.1837,  0.1788, -2.1258, -1.7920,
             -0.1431,  1.5193],
            [-0.9250, -0.9258,  0.3965,  0.7771, -0.0442, -1.0508, -1.4219,  0.2380,
              1.5136, -0.7612],
            [ 0.1173, -2.7285, -3.3867,  4.1096,  0.5475, -0.9047,  0.6664,  0.3036,
              1.9939, -1.4625],
            [-0.3271, -0.4644,  2.7561,  0.6327, -2.7159, -5.9581, -2.6450,  2.4783,
             -1.8823,  0.6888],
            [-1.5521, -0.2542,  2.4402, -0.0780, -0.1040,  0.2248, -0.1051, -0.6183,
             -1.5792,  0.5575],
            [ 0.0945, -0.6285, -1.4741, -4.7664, -4.8619,  4.0138,  0.9638, -1.6376,
              1.5475, -0.3143]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.524 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
