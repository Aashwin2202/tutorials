.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.5954,  6.3409, 10.2802,  7.6424,  0.6476],
            [ 7.2085,  9.3059,  6.1582, 19.2282, 14.5635],
            [ 6.2341, 12.0999,  8.2916, 15.5841,  5.8659],
            [12.8947,  5.9121, 12.4260,  4.0806, 13.1427],
            [ 6.9203,  6.1224,  4.2661,  8.4720,  1.8716],
            [12.8947, 15.4163,  4.0967, 13.0652, 13.1427],
            [ 6.2341,  7.7729,  4.6540,  6.8232,  5.8659],
            [ 7.2085,  9.5790,  5.7681,  5.7739, 14.5635]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.9067, -1.2119, -1.5723, -0.9120, -1.7901, -0.0304,  0.8652,  0.7648],
            [ 0.6816, -1.4527,  2.0239,  1.4546,  1.2114, -0.2183, -0.5764, -0.5823],
            [-0.3223, -0.3267,  0.3226,  1.7184, -0.9915,  0.0088,  1.9880, -1.8973],
            [ 1.1663,  0.3620,  1.9776, -2.0916, -0.0525, -0.0553,  0.2277, -0.1573],
            [ 0.7757,  0.0470,  1.1835,  0.8768, -0.1156,  0.4967, -0.1992,  1.1233],
            [-2.9973, -0.0529, -1.8923,  0.8304, -0.0419, -0.0666,  1.1326,  2.3036],
            [ 0.6158,  2.2596, -1.1719,  0.0183,  1.7794, -0.4142,  2.4847,  0.9780],
            [ 0.3316, -0.5472, -1.0985,  1.5707, -1.8716, -0.5228,  0.1406,  0.2003]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.5652,  1.1223, -0.9630],
            [-1.4138, -1.4113,  0.1677],
            [ 0.2731, -0.4026,  1.2502]], requires_grad=True), Parameter containing:
    tensor([[0.2322]], requires_grad=True)]
    Output from the convolution:  tensor([[-5.2695,  1.7658,  1.2544,  1.5435,  0.6940,  4.6004,  4.2237,  1.1561],
            [ 3.0984,  1.9883,  1.4818,  3.4074,  1.7695, -5.2346, -1.6743, -0.8500],
            [ 1.5678, -1.4613, -0.1099, -0.7168,  1.2970,  0.6466,  1.0224,  2.2151],
            [ 3.2787, -0.4519,  4.3529,  1.4374,  0.3398,  1.5003, -0.6898,  2.2138],
            [ 0.7264, -0.1925, -1.2223, -0.4208,  0.9817,  5.6498, -4.8590, -2.3573],
            [-0.7792, -1.1422, -2.4654,  0.1404, -3.1572, -1.3202,  4.5559, -0.7230],
            [ 1.6412,  2.1764,  0.0529,  2.2518,  2.4385,  2.0084,  3.2383,  4.0049],
            [ 1.4982,  0.8594, -4.9829,  0.8719,  2.9386,  0.4409, -0.9641, -1.2640]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.6471,  1.3539, -1.1506, -1.5557, -1.5136,  2.0184, -0.8941,  1.3191,
             -0.8520,  0.1735],
            [-2.3319, -2.8767,  1.8743,  1.2215,  1.7710,  0.7050,  0.1023, -2.5597,
             -0.2387,  1.0930],
            [ 1.3546, -0.2246,  3.0739, -1.2366,  3.0432, -4.1076,  1.1174,  1.9290,
              1.8507,  0.1781],
            [ 1.8507,  1.1509, -3.3113,  1.8420, -1.0328,  1.7487,  3.8353, -0.5014,
              0.0548, -1.2233],
            [-1.5755, -0.3025,  0.6200,  7.1832,  1.2988, -0.5107, -5.5076,  0.2228,
              2.6636, -1.7964],
            [ 0.9670,  1.9130,  2.4075, -3.8644, -3.7301,  0.7866,  1.8005,  2.9178,
             -3.3838,  0.1397],
            [-0.4650, -3.7493, -3.2966,  0.1774,  1.3424, -1.5598, -0.3454, -3.2780,
              0.3525,  0.9770],
            [ 0.8307,  1.2553,  1.2156,  5.0048, -0.2771,  2.6249,  1.0888,  2.4685,
              0.0077, -0.1990],
            [ 1.1749,  3.5778,  0.2665,  2.1654,  0.7039, -0.5634, -1.9732, -1.0703,
             -0.5903,  0.2031],
            [-0.2819,  0.0449, -0.7171, -2.3517,  1.1993, -3.2867,  1.4472, -1.6082,
              1.7131, -0.3929]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.530 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
