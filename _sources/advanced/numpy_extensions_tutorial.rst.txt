.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.3004, 10.6778,  6.8486,  9.3810,  4.0262],
            [ 2.3825,  8.0504, 19.1585, 12.3974,  3.0137],
            [ 4.3330,  1.8551,  7.6584,  5.5751,  5.6535],
            [ 9.2859, 11.5055, 12.3618,  3.3784, 12.0466],
            [ 4.8305,  3.5687,  1.4251,  5.7026,  6.2833],
            [ 9.2859,  5.7046, 12.6663,  6.1484, 12.0466],
            [ 4.3330,  6.0715,  4.8618,  2.3203,  5.6535],
            [ 2.3825, 13.0508,  6.5095,  4.8201,  3.0137]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6748,  1.8110, -2.1530, -2.4725,  0.9940, -0.5077, -0.3023,  0.0141],
            [-0.1853,  0.2796, -0.0971,  0.6673, -0.0977, -0.1365, -0.4918,  0.2718],
            [ 0.6479, -0.2602,  0.6504,  0.8819, -0.1809, -1.8776,  0.2615,  0.5206],
            [ 0.0607, -0.1014,  0.4338, -0.4305,  1.3149, -0.2066, -0.4247, -0.6988],
            [-1.3516, -0.6215,  1.0424,  2.9056,  0.5597,  0.5506, -0.2361,  0.9287],
            [-0.2479, -0.5158,  2.2931, -1.3131, -0.2664, -0.3669, -0.8957, -1.6959],
            [-0.8483,  0.5812,  0.9943, -1.1647,  1.6156,  2.1067, -1.1502, -1.0495],
            [ 0.4002, -0.0489,  0.1637,  0.0328,  1.3326,  0.7946, -1.3476,  0.2586]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.9928,  1.6688, -1.2281],
            [ 0.5529,  0.1624, -0.7377],
            [ 0.6007, -1.0730, -1.7790]], requires_grad=True), Parameter containing:
    tensor([[-0.7198]], requires_grad=True)]
    Output from the convolution:  tensor([[ 2.1070,  1.5459, -2.7887,  4.9515,  0.7178, -3.8147,  4.4542, -4.4967],
            [-2.0229,  0.6303, -1.5634,  9.3411,  4.1842, -2.5451, -2.4862, -1.0934],
            [-0.7930, -4.3867, -1.3666,  5.2864, -7.6450, -2.5582,  1.1873, -4.7692],
            [ 1.0693, -1.1371, -2.8183, -3.3187, -6.8698, -4.1267, -1.9215,  3.8476],
            [-4.2363, -3.7870,  1.8288,  0.8481, -6.5704, -0.8645,  0.4021,  2.6860],
            [-2.8021,  0.1455,  3.2967,  2.8697,  1.4805,  2.9087,  4.0641, -2.9904],
            [-3.7637, -1.4613,  6.6267,  2.4566, -6.1272, -3.3068,  2.9444, -2.3554],
            [-1.7576, -1.7341, -3.6905, -0.8239, -4.8121, -2.0159,  1.0801,  1.0314]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3978,  0.5152, -1.0568, -1.1715, -0.7631,  2.2376,  3.2618,  3.4618,
             -2.3680, -0.4298],
            [ 0.1286, -0.2699,  0.2681,  0.3842, -0.4711,  5.2720,  0.1007, -4.2859,
             -2.5097,  1.3128],
            [-0.5187, -1.7016, -0.0810, -1.7398,  3.8704,  5.0290, -2.3913, -3.8662,
             -6.5604,  1.2016],
            [-1.1533, -0.6666,  4.8181, -0.0279, -2.5848,  5.1131, -7.0668, -3.2812,
              0.7322,  4.3942],
            [-1.5533, -1.5777, -0.2120, -1.8895,  1.6968,  0.4443, -5.1719, -1.1058,
             -1.7604,  2.8872],
            [-1.4817, -1.8094,  0.5439, -5.1687, -1.5171,  6.3805, -4.4638, -0.0754,
              4.0311,  1.5946],
            [-0.4178,  2.8885,  6.1607, -1.9421,  3.1755,  2.7992, -0.7824,  4.3763,
              3.3859, -1.4515],
            [-0.6721,  1.5844,  3.3991, -3.8101,  2.1775,  4.2029, -0.8648,  1.5427,
             -2.6101, -1.9093],
            [-0.0419,  1.5909, -3.7017, -6.2672,  1.4963,  2.3129,  1.6165,  0.9421,
             -2.7565, -2.0810],
            [-0.2998,  0.9076,  0.0603, -1.3230,  1.4538,  1.8506, -0.2587, -2.8227,
             -1.3384,  1.0625]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.474 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
