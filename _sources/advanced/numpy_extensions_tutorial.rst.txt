.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.5064,  8.7460,  9.1884,  5.3809,  2.6394],
            [ 6.9637,  8.0834, 22.0212,  7.3195,  6.2842],
            [ 4.4124,  6.8846,  2.2010,  7.0857,  8.6391],
            [12.2656, 11.1542,  7.0073, 11.9266,  4.9309],
            [ 3.9030,  4.9602,  1.8726,  5.5447,  5.5452],
            [12.2656,  6.6920,  7.2732, 11.7409,  4.9309],
            [ 4.4124,  7.5879,  6.6094,  6.5704,  8.6391],
            [ 6.9637,  6.2274,  6.8611,  8.7653,  6.2842]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.0926,  0.3460, -0.7980,  0.4539,  0.3611,  1.2098,  1.6218,  0.2853],
            [-1.7941,  1.5746, -1.0794,  0.0920,  0.7975, -1.7977,  0.0143, -0.4693],
            [ 1.1165, -0.1831, -0.1345, -0.3690,  0.1811,  0.4557,  0.0680,  0.1673],
            [-0.5985, -1.5515, -0.7459,  0.1084,  1.3878, -0.1743, -1.9617, -1.5958],
            [-0.6659, -0.3183, -0.6816,  1.4417,  0.4511, -1.8128,  0.3141,  0.1521],
            [ 1.2712, -0.8573,  1.7735,  1.6804, -0.7258, -0.1523, -0.6531,  0.7294],
            [-0.6849, -0.9411,  1.1446,  0.1614,  0.3231, -0.9844,  0.8715, -1.7616],
            [-1.5439, -0.3259,  1.3718,  0.0510, -1.8891,  0.8713,  2.0467,  0.9414]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.4307,  0.1892,  0.8246],
            [ 0.6859, -0.7152,  0.5663],
            [ 0.9986,  0.4129,  0.4197]], requires_grad=True), Parameter containing:
    tensor([[-0.6419]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.6289,  3.0095, -2.1613,  1.1841, -0.2181,  0.6158,  1.9769,  1.6751],
            [-3.0275,  4.7032,  0.1185, -3.4172,  3.2635,  0.7933,  2.4045, -3.8277],
            [-1.5550,  1.6977,  2.2230, -5.1929,  0.7020, -0.9739,  2.0728,  0.0095],
            [-0.4262,  0.2571, -1.5766, -5.5498,  3.5119, -1.8451, -1.9429, -1.3080],
            [-1.8229, -2.3317,  4.8801, -4.7513,  2.5679,  0.1181, -2.0081, -1.2003],
            [-4.3054, -4.4997, -0.0979,  3.9840, -4.4601, -0.2741, -4.6963, -0.1981],
            [ 0.4923, -1.3236, -0.7418,  0.3180, -0.2815, -6.9100, -1.3076,  0.1424],
            [ 2.4002, -1.9370, -2.1823, -6.5200,  0.0510,  2.0720, -3.0291,  1.0984]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 2.2158e-01, -2.0830e-02, -2.1142e+00, -7.0290e-01,  4.2386e+00,
              2.3174e-01, -6.2917e-02, -1.4450e-02, -9.8726e-01, -1.4134e-01],
            [-7.5193e-01, -2.4751e+00,  2.3929e+00,  3.3490e-01, -8.3480e-01,
              1.0288e+00, -3.9112e+00,  4.0203e+00,  1.3137e-01, -1.5448e+00],
            [ 2.2427e-01,  1.0794e+00, -8.0589e-01,  5.2010e+00, -4.1828e+00,
              2.0220e-02,  1.0249e+00, -2.9274e+00,  2.8684e-01, -1.0731e+00],
            [ 6.5083e-01,  3.0830e+00, -2.5967e-01, -2.2888e+00,  2.3651e+00,
             -1.1170e+00, -1.7076e-02,  8.3631e-01, -1.2100e-01, -1.1557e+00],
            [ 1.0888e-03, -6.2774e-01,  9.0777e-01, -2.9170e+00,  5.7322e-01,
              3.7935e+00, -1.5685e+00, -5.2988e+00,  1.3802e+00,  8.4563e-01],
            [-5.1590e-01, -1.1909e-01, -2.4648e-01,  2.3761e-01,  8.7642e-01,
              1.0460e+00,  2.3702e+00, -2.6814e+00,  3.3983e-01,  1.3233e+00],
            [-4.7461e-01,  3.9970e-01,  1.6836e+00, -1.6736e+00, -1.2226e+00,
              7.8428e-01,  3.1582e-01,  1.7426e+00,  1.0313e+00,  1.3966e-01],
            [-1.8912e+00,  1.8809e+00,  1.4842e+00,  9.9898e-01, -1.1665e-01,
             -1.6495e+00,  3.0478e+00, -1.1580e+00,  9.5563e-01, -4.6291e-01],
            [ 1.4573e+00, -2.7946e+00,  1.5209e+00, -6.0230e-01,  1.5027e+00,
             -1.7075e-01,  6.4267e-02, -6.3918e-01, -5.7487e-01, -6.1766e-01],
            [ 1.6197e+00, -1.1088e+00, -9.3758e-02, -1.4757e+00, -6.8077e-01,
             -6.2866e-01, -1.3258e+00, -7.5898e-01, -5.5670e-01, -9.7106e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.476 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
