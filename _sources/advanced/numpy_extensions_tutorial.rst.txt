.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.9804,  3.4520, 15.7342,  8.4942,  2.6307],
            [ 5.7079,  5.3758,  2.9367, 19.0679,  3.3054],
            [ 2.5327,  6.1361, 13.4931,  9.9813,  2.1436],
            [ 6.8436,  4.6836,  7.8475,  6.2922,  2.8906],
            [ 6.8352,  2.3595,  4.1906,  7.6917,  8.0716],
            [ 6.8436,  8.7410, 12.6848, 10.7793,  2.8906],
            [ 2.5327,  3.9470,  2.7031, 10.9323,  2.1436],
            [ 5.7079, 12.2460,  4.8355,  4.6695,  3.3054]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8492, -2.0169,  0.0157, -1.7943,  1.1420,  0.9270, -2.1879,  1.4001],
            [ 1.0220, -1.4293, -0.6120, -0.1216,  0.3741, -0.1957, -0.9336,  1.2510],
            [-1.3485, -0.2131, -0.4342, -1.5210, -0.2077, -1.1469, -0.1733,  0.3306],
            [ 0.3403, -0.6124, -0.2961, -0.3111, -0.1613, -1.5576,  1.4556,  1.2081],
            [-0.0758, -0.5063, -0.4007,  0.4561,  0.8426, -0.5034, -1.8025, -0.2879],
            [-0.2504, -0.8847,  0.6123,  0.9993,  0.9360, -0.7277, -1.0514, -0.4641],
            [ 1.4852, -1.8295, -0.5879,  2.8250, -1.0203, -0.0993, -0.2116,  0.8861],
            [ 0.4422, -0.3486,  0.4606,  0.6663, -0.9432,  0.8616,  0.2442, -2.0454]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.9509,  0.7432,  0.2723],
            [ 0.2634,  0.6809, -1.1997],
            [ 0.1070, -0.4329,  0.1074]], requires_grad=True), Parameter containing:
    tensor([[0.0828]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.2591,  1.5139,  0.4692, -5.1069, -0.3085, -0.8960,  1.4107,  1.0308],
            [ 2.8688, -3.3698, -0.9425,  2.4143,  2.4268,  3.5021, -0.1778, -1.3744],
            [ 0.5721, -0.2247, -0.0639,  0.1870,  0.2129, -3.0436, -4.9450,  0.4135],
            [ 0.9526, -1.3391,  0.3105, -4.1240, -2.9920,  2.7166,  1.3856,  1.3840],
            [ 0.8634, -0.7147,  0.2034,  1.8622,  4.0697,  1.4623, -0.7893,  0.6088],
            [-0.3182,  0.1895,  0.7627, -1.0775,  1.2955, -3.3372, -3.2292,  2.7069],
            [-2.6347, -0.9350, -0.1170,  1.1912, -1.0076,  1.2363,  0.1383, -0.7293],
            [ 2.3799, -0.0583,  2.1528,  4.3304,  0.0356,  0.7760,  1.3100, -1.1796]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 3.0553e-02,  2.8552e-01,  8.2581e-01,  1.0933e-01,  2.9065e-01,
              1.8429e+00,  1.1430e+00, -1.0966e+00, -1.1370e+00, -3.9078e-01],
            [-7.8082e-02, -6.7212e-01, -2.0512e+00, -1.5244e+00, -2.0930e+00,
             -4.8531e-01, -2.3939e+00, -4.7261e+00, -1.5042e+00,  1.5898e+00],
            [ 4.6632e-01, -2.6616e-01, -1.6750e+00, -8.2397e-01,  3.5368e+00,
             -8.1214e-03, -2.0402e+00,  1.3609e+00,  3.4209e+00,  9.3961e-01],
            [ 1.8636e-01,  3.3273e-01, -1.3787e+00,  1.0517e+00,  9.6105e-01,
              2.0035e+00,  4.6725e-01,  9.8829e-02,  2.5834e+00, -2.4408e+00],
            [-1.0070e+00, -1.3273e+00,  1.0866e+00, -1.2882e-01,  1.3375e+00,
              6.3784e-01,  2.4697e+00, -8.3408e-01, -1.5113e+00,  7.5258e-01],
            [ 1.0519e+00,  4.5552e-01,  1.6193e+00, -9.0621e-01, -4.5091e+00,
              4.2381e+00,  1.0985e+00,  4.3973e-01,  2.9208e-03, -6.1021e-02],
            [ 2.0067e-01,  9.0735e-01, -1.7257e+00, -5.8116e+00, -2.1664e+00,
              2.3104e+00,  2.5174e+00, -8.8105e-01, -8.6460e-01,  2.9162e-01],
            [ 3.1349e-01, -1.3390e+00, -7.3157e-01,  2.3915e+00,  1.4215e+00,
              6.1538e+00, -4.7093e-01,  1.5790e+00,  2.0592e-01, -9.6650e-02],
            [ 4.3141e-02, -1.0906e-01, -4.4173e-01,  1.1555e+00,  3.8418e+00,
             -3.4447e+00, -1.2932e+00,  9.3298e-01, -2.9092e-01, -1.1065e+00],
            [ 1.9821e-02, -1.5981e-01,  3.5153e-01,  1.8496e-01, -1.1026e+00,
             -2.0704e-01,  3.8038e-01, -2.7325e-01, -3.2842e-01,  1.0173e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.474 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
