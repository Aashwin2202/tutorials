.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.5866,  5.7962,  7.0605,  6.7670, 15.4238],
            [11.0163,  5.5214,  9.3723,  2.7403,  3.3109],
            [14.6077,  8.2006,  2.8699,  6.1612, 13.5588],
            [11.7489,  6.3567,  4.1219,  6.9454,  3.4280],
            [ 6.5666,  8.6619,  8.2378,  4.5626,  8.9088],
            [11.7489,  3.6366,  1.9246,  3.0039,  3.4280],
            [14.6077,  5.9314, 13.1244, 10.6683, 13.5588],
            [11.0163,  8.7522,  3.7609, 10.0230,  3.3109]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.4511,  0.2601,  0.4470,  1.7333,  1.1245,  1.4926,  0.5998, -0.1370],
            [ 0.9282,  1.5514,  0.0768, -0.8173,  0.6771, -1.3601, -0.6225, -0.3524],
            [ 0.9836, -0.6034,  0.8380, -0.1779, -0.0879, -1.3159,  0.5854, -0.8018],
            [ 1.3338, -0.1896,  0.8789,  1.5903,  1.1493,  0.3256, -0.5315,  1.5297],
            [ 0.0789,  0.3735,  0.7224,  1.0033,  0.1126,  0.0724, -0.9202,  0.0263],
            [ 0.1862, -0.2660, -0.0415, -1.4076, -0.4350, -1.5891, -0.6582,  0.1980],
            [-1.2198, -2.4772,  2.3393, -0.8983,  0.2182, -0.2920,  1.0987, -1.0526],
            [ 0.9210, -1.5499, -1.3089,  0.4644, -0.9129,  0.4538, -0.0073, -0.2049]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.2553,  1.2760,  1.6587],
            [-0.9770,  1.1283, -0.5371],
            [ 1.2903,  1.3267,  1.4417]], requires_grad=True), Parameter containing:
    tensor([[0.3475]], requires_grad=True)]
    Output from the convolution:  tensor([[ 9.6008, -4.2705,  3.2926, -0.5876,  4.4637, -3.9160, -0.2870,  6.0506],
            [-2.9767,  2.9738, -1.5495,  7.9380,  1.5582, -0.5687, -0.7345,  3.3220],
            [10.3125,  3.0904,  4.0837,  2.4495, -0.8748, -2.4630,  1.3232,  4.7310],
            [-0.3664,  2.0831,  0.3685, -1.6343,  0.3527,  1.5633, -0.5344,  3.2169],
            [ 1.4949,  4.0478,  3.6943, -3.1287, -4.1376, -1.2977, -0.4108,  1.8525],
            [-0.0388,  4.0780,  2.3937, -5.2422, -0.5999, -3.8601, -1.7534, -0.2614],
            [-2.5894,  5.8502,  1.5054,  3.6541, -4.2852, -0.7189, -1.4394,  0.8011],
            [ 1.1382, -5.6857, -2.0911, -9.6325, -3.6915, -2.7747, -4.2698,  3.2660]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.7975, -0.1476,  0.2488,  1.6961, -1.0643, -3.7218, -5.3594, -1.2741,
              0.9752,  2.5286],
            [ 0.1917, -2.5905,  0.2207, -1.5003,  1.1560, -2.2958, -2.4696, -2.7024,
             -1.1563, -0.3650],
            [-0.0125,  1.7769,  2.4539,  6.2528, -3.2076, -6.9678, -5.3436, -5.7628,
             -0.0910,  2.1454],
            [-1.0718, -4.8397, -3.1750, -0.5339, -0.5929, -3.4194, -3.8422, -6.8909,
             -1.5889,  0.9736],
            [-1.7940, -0.9122, -6.4203, -2.2665, -2.8969, -3.2772, -8.4399, -3.6372,
             -4.3268,  0.0484],
            [ 2.7299, -4.8117, -2.3132, -3.8747,  1.8715, -5.2624, -7.0340, -7.8591,
              0.2999,  0.5281],
            [-1.9696, -1.3345, -8.8297, -8.0530, -6.9611, -7.9614, -9.1657, -4.0272,
             -2.7375,  0.8562],
            [-1.2553, -2.2094, -5.5830, -4.7301, -2.6773, -3.8074, -3.0954, -4.3492,
             -2.2325, -1.6406],
            [ 2.4263,  0.9833, -0.6761, -2.2927, -6.9203, -6.1101, -3.0231, -2.4335,
             -1.2589,  1.1039],
            [-1.2850, -3.1442, -3.7470, -4.0625, -1.8399, -0.1130,  0.6639, -0.6709,
             -2.3287, -1.2589]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.490 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
