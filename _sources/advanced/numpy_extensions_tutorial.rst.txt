.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.1743,  5.6072,  7.9630,  3.5600,  8.5631],
            [ 2.3794, 13.2743,  5.7558,  5.0131,  8.6534],
            [16.4277,  8.8271, 10.3604,  5.0820,  0.9161],
            [13.4158,  7.2225, 12.6750,  4.9222,  2.4785],
            [14.2211,  5.6157, 11.0706, 11.7951, 10.3026],
            [13.4158, 11.1315,  2.8178, 14.7899,  2.4785],
            [16.4277, 10.3257,  0.2511,  6.4776,  0.9161],
            [ 2.3794,  8.6683,  8.6821,  6.9552,  8.6534]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.7533,  0.8884, -0.1387,  1.9775,  1.2700,  0.1506,  0.0029, -0.4471],
            [ 0.7886, -2.4165, -1.5411,  0.6588, -2.1376,  0.3092,  0.8382,  1.0725],
            [-1.9619,  0.0785, -1.1964,  1.0983,  0.0091, -1.0161, -0.1224,  1.0968],
            [-2.0917, -0.9013,  0.4800, -0.6039, -0.3905, -0.9192, -1.0477, -0.7536],
            [ 1.8012,  1.8036,  1.0913,  0.9312,  1.3569,  1.3773, -1.1416,  0.8051],
            [ 0.5562, -0.4068,  0.1338,  0.8451, -0.8425, -2.6242, -0.0487, -0.4873],
            [-0.4524,  0.9072,  0.3011, -2.5360, -1.4021, -0.2393, -0.6186, -0.3980],
            [ 1.0280,  0.0546, -0.1569,  1.1640, -0.6288, -0.5737,  0.1466, -0.2015]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.7901,  0.7140, -0.5665],
            [-0.1165, -1.4793,  1.1482],
            [ 2.0121,  0.7653, -0.6810]], requires_grad=True), Parameter containing:
    tensor([[-0.6038]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.3269e+00, -5.4569e+00, -6.4389e+00,  1.5329e+00,  2.7402e+00,
              2.4558e+00, -2.8901e+00,  4.9232e-01],
            [-3.2553e-01,  3.2186e+00,  3.1725e+00,  7.9958e-01,  1.6175e-01,
             -6.5128e+00,  1.6120e+00, -7.7720e-01],
            [-2.7312e+00, -2.4948e+00, -3.9068e+00, -7.3595e+00,  2.9255e+00,
              6.9442e-01, -2.9903e+00, -3.8911e+00],
            [ 9.1036e-01,  3.6217e+00, -1.9337e+00,  1.2699e+00,  4.6625e-03,
             -8.4838e+00,  2.2706e+00,  3.4799e+00],
            [-1.0518e+00, -5.9539e+00, -3.8322e+00, -5.3554e+00,  6.3910e+00,
             -1.5166e+00, -3.6072e+00, -4.6815e+00],
            [ 3.7486e+00,  4.9724e+00,  1.3794e+00, -5.2804e-01, -2.4912e+00,
             -2.3925e+00,  1.7573e+00,  1.6442e+00],
            [-1.7142e+00,  4.2848e-01, -3.3947e+00, -8.7537e-02, -2.4444e+00,
             -8.2479e-01, -6.8055e-01, -3.9458e+00],
            [ 4.1352e+00, -5.7464e-01, -1.4879e+00,  2.3401e+00, -7.6904e-01,
              4.5600e+00,  2.2258e+00, -2.3065e-01]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0406,  0.7716,  0.6131,  0.3585,  0.8281,  0.3187,  1.6012, -0.3216,
             -0.7619,  0.1959],
            [-0.1763, -0.9105, -2.0163,  1.2160, -1.7626,  0.3685, -1.0626,  0.5915,
              0.2002,  0.1134],
            [ 1.3707,  2.2314, -1.7199,  0.8099,  2.4506,  4.1989,  2.5036, -1.4660,
              2.2520, -1.5235],
            [ 0.7576, -2.3145,  2.6558,  1.3503, -2.7813, -5.6583,  5.7919, -0.7407,
             -2.4227,  1.6966],
            [ 3.7317, -4.4548, -5.1031, -1.4744,  4.9539,  3.2882,  1.4937,  3.3217,
             -0.4518, -0.2852],
            [ 3.2655,  0.2518,  2.6765,  1.1315, -1.7079, -2.7711,  1.6383, -2.5146,
              4.6708, -0.9966],
            [ 2.3829, -1.1360, -2.8677, -0.7951, -1.4442,  3.1844,  1.4340,  7.8565,
             -7.5899,  1.9118],
            [-0.6698, -2.2413,  2.1260,  3.2391, -4.4813,  1.4265, -5.2354,  0.4586,
              4.7054, -1.9518],
            [ 1.0667, -0.8734, -1.0663,  1.1059, -0.8962, -0.5231,  1.0475, -1.1380,
             -1.4441,  0.9265],
            [-0.7698, -2.2754, -0.9063,  0.7538, -0.5657, -1.3774, -0.4613,  1.2703,
              0.5259, -0.3616]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.493 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
