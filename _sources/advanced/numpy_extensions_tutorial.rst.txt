.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 6.0827,  2.5818,  7.5230, 11.4844,  0.9301],
            [ 3.0260, 13.1136, 12.8114,  5.8423,  7.7283],
            [ 4.1339,  1.5016,  4.3311,  7.2197, 13.8861],
            [ 8.5765,  5.7760,  6.3638,  4.3803,  3.3055],
            [ 2.1424,  8.3972,  1.8537,  9.7575,  4.5552],
            [ 8.5765,  7.2954,  3.2884, 11.5032,  3.3055],
            [ 4.1339,  4.7987,  5.4163,  8.4893, 13.8861],
            [ 3.0260,  5.8318,  1.3882, 11.6952,  7.7283]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4353,  0.6814, -0.4338,  0.8172, -0.1059, -0.2068, -0.2559, -0.7340],
            [ 0.7001,  0.4781, -1.1069,  0.0920,  1.7659, -1.2123,  1.0626, -0.8718],
            [ 0.2919, -0.1507,  2.0746,  0.0558,  0.0881, -0.4243, -2.2298, -0.7497],
            [ 0.4742, -0.5115, -1.0709,  2.2195, -0.6410,  0.5165, -0.0461,  1.0021],
            [-0.2938,  0.1234, -0.3791,  0.8176, -1.1727, -0.1364,  0.6652,  1.8730],
            [-0.2350, -0.1890, -1.1692,  0.1500, -0.0208, -1.1712,  1.8881, -0.8352],
            [ 0.4063,  0.2003,  0.0626,  0.2495,  0.7399, -0.1316,  2.1277,  0.6778],
            [-1.9985,  0.1230,  0.4094, -0.5154,  0.8743, -0.2249,  1.4701,  0.5639]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.0382, -0.4627, -0.9959],
            [ 0.0757,  3.0248, -0.0816],
            [-0.0820, -0.6267,  0.1347]], requires_grad=True), Parameter containing:
    tensor([[-0.7147]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.6738e-01, -2.8529e+00, -8.5760e-01,  7.5917e-01, -1.7345e-01,
              2.1153e+00, -5.6482e+00,  1.0541e+00],
            [-1.3244e+00,  3.4757e-01,  6.2657e-01,  1.9119e+00, -3.1419e-01,
              2.5982e+00,  3.4879e+00,  4.8556e+00],
            [ 6.7816e+00, -4.1651e+00, -7.6612e-01,  1.2065e+00, -1.6715e+00,
             -1.8553e+00, -2.2283e+00, -6.6082e+00],
            [-3.4641e+00, -7.1092e-01, -1.1142e+00, -2.6054e+00, -7.5495e-03,
             -3.5695e-01,  1.1288e+00, -5.8556e+00],
            [-1.6884e+00,  1.6908e+00, -1.1562e+00, -1.1791e+00,  3.3546e+00,
             -2.3969e+00,  6.3499e-01,  1.1768e+00],
            [ 3.9696e+00, -4.2773e+00, -3.5597e+00,  1.7160e+00, -4.6001e+00,
             -5.3713e+00, -2.5849e+00, -4.9821e+00],
            [-4.7327e+00,  2.6221e-01,  2.4518e+00, -3.8605e+00,  3.7874e+00,
              1.6890e+00,  9.5606e-01, -2.8479e+00],
            [ 8.0424e+00,  8.5162e-01, -1.4319e+00, -3.2338e+00,  1.0157e+00,
              1.0061e+00, -4.2748e+00, -2.6614e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0435,  0.6426,  2.6253,  4.0425,  1.7484, -1.0091,  0.3321, -0.3884,
             -0.1590, -0.6828],
            [-0.0821, -3.5961, -8.7397, -5.0861,  5.7390, -1.5886,  0.8981, -1.5053,
              3.0318, -1.2853],
            [ 0.0417,  0.0486, -1.5323, -3.7565,  1.3156,  0.5657,  3.9271, -5.3202,
              2.5898, -0.8405],
            [ 0.1272,  4.0354,  2.3629, -2.9421, -3.0055,  1.8843,  0.7807,  2.9213,
              0.8357, -0.4825],
            [-0.2434, -4.4151, -6.4891,  1.2699, -0.1444, -1.5845, -3.1999,  0.6116,
              2.1823, -0.2151],
            [ 0.2410,  7.4628, -0.6500, -2.3728,  3.8697,  1.0932,  3.2014, -2.7028,
              1.7749, -1.5214],
            [-0.2388, -2.0084,  1.2182,  2.6530, -2.5279,  1.2043, -0.5570, -3.1119,
              5.3900, -0.3125],
            [ 0.1384,  4.3599, -3.0371,  2.2397, -2.7757, -1.6896, -4.2403, -2.3349,
             -0.6965, -0.5676],
            [-0.1785, -3.4112,  3.2676, -3.1903,  7.2797, -0.2532,  3.6768, -0.1588,
              2.0733, -0.0326],
            [ 0.0736,  0.4946, -0.5687,  0.4719, -1.4629,  0.2147, -0.5591,  0.1621,
             -0.5018,  0.1031]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.474 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
