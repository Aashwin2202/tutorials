.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.2886,  8.5516,  2.3902, 11.9322, 13.9446],
            [ 8.8621,  4.8826,  1.8075, 10.9029,  2.9333],
            [ 2.1453,  5.6599,  7.3597,  3.3768,  8.5675],
            [10.3695,  8.7067,  3.8626,  0.8209,  9.2048],
            [ 5.6548, 13.6549,  7.4819, 12.3560,  0.3439],
            [10.3695,  7.5651, 10.1810,  3.9788,  9.2048],
            [ 2.1453,  5.0904,  2.5354,  3.0257,  8.5675],
            [ 8.8621,  2.3834,  4.7260,  6.0439,  2.9333]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.8046, -0.4156, -0.7945, -0.9560, -0.0881,  0.2709, -0.3562, -1.1143],
            [ 0.7165, -1.2140,  0.7086, -1.1519,  0.5596,  0.1248, -0.7609,  0.8239],
            [-1.6547,  0.4854, -0.7851, -1.0221, -0.2454,  0.3975, -0.2731,  1.5944],
            [-0.6745,  0.1267,  0.4337, -0.3200, -0.2217, -0.1330, -0.3980,  1.2880],
            [-0.7069,  0.4574,  0.0689,  0.0906,  2.0998,  0.6823,  0.2276,  1.1060],
            [ 1.0551,  0.2421, -0.8394, -0.6862, -0.4284,  0.7719, -0.6937,  1.0714],
            [-1.2552,  0.1060,  0.6684,  0.8056, -0.2134, -0.8356,  0.0547,  0.4337],
            [ 2.1678,  1.3344, -1.3550, -0.3645, -1.8208,  1.5961, -0.5073,  1.2321]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.8192, -0.2608, -0.4495],
            [-2.5855, -0.3771,  0.0726],
            [-2.0440,  0.5538,  0.0263]], requires_grad=True), Parameter containing:
    tensor([[-0.3401]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.5776,  0.3643,  4.1315, -6.1835, -2.6971, -2.5098, -2.4598,  4.2013],
            [-3.9441, -2.7378, -6.2341, -1.3158, -2.9191, -1.1952, -2.3010, -4.9834],
            [-1.0202,  2.1961, -6.3818,  3.2887,  1.5252,  4.0154, -1.9649, -3.8390],
            [-4.3445, -2.2206,  0.6297,  1.6102, -5.2103,  2.2233, -2.3706,  1.6999],
            [-2.2832, -2.8107, -5.3981, -3.8898, -6.4304, -7.5935,  3.4518,  5.2642],
            [-0.9992,  3.8633,  0.6864, -3.6526,  0.1338, -2.3745,  6.7399, -1.0725],
            [-6.3773, -4.1762, -0.6592, -2.6714, -1.9839,  0.2722,  2.2825,  3.5644],
            [-6.3583, -3.1458,  2.4127,  1.9328, -4.3681,  3.8907, -0.6891, -0.2595]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-3.5270e-01, -9.4124e-01,  2.8142e+00, -1.0109e+00, -9.6591e-01,
              1.6188e+00,  7.3345e-01,  1.7052e+00, -5.0920e-01, -5.3162e-01],
            [-3.3199e-01,  1.0918e+00, -1.3183e-01,  4.5621e-01, -2.7341e-03,
             -1.3144e+00, -9.5714e-02, -5.8308e+00, -4.2269e-01,  6.6150e-01],
            [ 3.4961e+00,  1.3965e-01, -8.2183e+00,  2.4281e-01,  1.0975e+00,
             -3.5503e+00, -5.7093e+00,  3.2726e+00,  1.7899e+00, -4.4514e-01],
            [-3.3801e+00, -8.8639e-01, -3.1495e+00,  3.8454e+00, -1.4153e-01,
              8.7209e-01,  4.6457e+00, -7.7930e-02, -1.1357e+00,  4.0773e-01],
            [ 8.4600e-01,  4.7981e+00,  2.1109e-01,  5.9302e-01, -2.2752e+00,
              4.5840e+00,  2.7580e+00,  3.6943e-02,  5.9758e-01, -3.2174e-01],
            [-2.4179e+00,  8.7470e+00,  4.5198e+00,  8.3881e-01,  8.1531e+00,
             -3.8028e+00, -2.9759e+00, -3.3143e-01, -1.9252e-01,  4.0059e-01],
            [ 4.1453e+00,  2.2063e+00,  4.0116e+00, -5.7339e-01, -1.8619e+00,
              1.7789e+00,  2.7541e+00,  4.9522e-01,  6.6704e-01,  4.5298e-02],
            [ 4.0170e+00, -6.4443e+00, -4.2046e+00, -2.4887e+00,  2.5702e+00,
              1.2057e+00,  2.3295e+00,  3.2912e+00, -1.1570e+00, -3.4653e-01],
            [-2.1259e+00, -3.3269e+00,  1.9350e+00,  5.7475e+00, -1.2024e+00,
              9.8001e-01, -2.6036e+00, -1.9170e+00, -2.7780e-01,  4.4819e-02],
            [-1.2643e+00, -2.4183e-01,  2.7927e+00,  2.5593e+00, -3.3698e+00,
              2.8619e+00, -3.1784e+00, -7.3324e-01,  4.1539e-01,  1.8105e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.517 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
