.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.5997, 10.8168,  4.6427, 10.6489, 11.6872],
            [ 3.5391,  7.6003, 11.4443,  9.2513,  4.9098],
            [ 9.1788,  3.5623,  5.4322,  8.9908, 12.8806],
            [ 8.2621,  7.9150, 11.8479,  7.1460,  2.0707],
            [ 6.1768, 13.2884,  4.3532, 10.9607,  8.4536],
            [ 8.2621, 12.5244, 10.3238,  0.6973,  2.0707],
            [ 9.1788, 20.1959,  1.3033, 16.4001, 12.8806],
            [ 3.5391,  7.7581,  5.4344,  9.4870,  4.9098]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.0197, -0.5525,  1.6805,  1.2127,  0.9362, -0.1383,  0.5735,  0.2666],
            [-0.3693, -1.6599, -1.9242,  0.7088,  0.5742,  0.7529,  0.9999, -0.0261],
            [-1.6743, -0.0603, -1.0544, -0.3367,  0.1220,  0.9056, -0.4713, -0.4503],
            [-0.1219, -1.9389,  0.9237,  0.1093, -1.5021,  2.5334, -1.0138,  2.7879],
            [ 0.3122,  1.2348,  2.9048, -1.7379, -1.1356,  0.3653, -0.7394, -0.2451],
            [-1.4638, -0.3077, -0.3503,  1.6095,  0.3623,  1.9103, -0.8051, -3.3821],
            [-0.8662,  0.6066, -0.8709,  0.3617,  0.0330, -0.0601,  0.3658,  1.3803],
            [ 0.4222, -0.0124, -1.0704, -0.8893, -0.6361,  1.5433, -0.2049,  0.1519]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3011, -0.6897, -1.4454],
            [ 0.5842,  0.2250, -0.3800],
            [-1.4835, -0.5575, -0.2717]], requires_grad=True), Parameter containing:
    tensor([[-0.2380]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.9901,  0.1698,  0.4022,  1.0452,  1.1011,  2.2676,  2.2776, -3.0257],
            [-1.0386,  1.6963, -2.9331, -3.1917, -2.2701, -0.7166,  2.5563, -0.3918],
            [-1.4314,  0.6636,  0.4792, -1.6492,  3.9580, -2.5267, -3.2973, -0.3633],
            [-1.8672, -4.6588, -0.1179, -3.9414,  0.3935,  1.2760, -3.2217, -0.8163],
            [-3.1699, -2.1473,  2.0466, -4.4546, -3.6119, -0.7237,  0.8659, -1.8532],
            [-2.8024,  0.0967, -2.9185,  1.4787, -0.3242,  0.2907,  2.2404, -2.2852],
            [ 0.7092,  0.0560, -5.3146, -3.7719, -3.4192, -1.7200,  1.4175,  1.5205],
            [-0.8274,  0.8881, -0.2162, -0.8719,  0.3883,  0.6717, -2.7993,  4.5431]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3171, -0.5242, -2.3569, -0.2732,  2.2696,  0.8320, -1.5503, -1.4113,
              0.1074, -0.7359],
            [ 0.3497,  1.4562, -0.1732, -1.5225, -0.6069, -0.8945,  0.4149,  0.9292,
              1.6874, -0.0579],
            [-2.1212, -1.3826,  1.7004,  3.7549,  2.1075, -2.1136, -0.1260, -3.3219,
             -1.2558, -0.8406],
            [ 1.3722, -1.0447, -2.2207, -3.4846, -1.4553, -1.1655, -0.0732, -0.7740,
              0.9991,  0.7547],
            [ 0.3326,  1.3632,  4.8197,  1.3946,  1.3227, -0.5140, -3.4671, -4.7373,
             -0.3298,  0.5572],
            [-0.5393, -2.4257, -4.5914, -3.3714, -2.8733, -1.0543, -0.7671, -3.4491,
             -2.7746, -0.6542],
            [ 1.9162,  2.2429, -0.9125,  0.2397, -1.2378, -2.8424, -0.6558, -0.1878,
              3.0353,  3.0893],
            [-2.8331, -3.4184,  1.1139,  3.4826,  0.8495, -3.6617, -4.3494, -2.7723,
             -1.2526,  0.3606],
            [-0.4754, -0.3744, -0.2434, -0.3247, -0.5378, -1.6914,  1.2813,  4.5005,
              1.5981,  0.5283],
            [ 1.0433,  3.1146,  1.7330,  0.0801, -0.8043,  1.1617,  0.2269, -0.1295,
             -0.1631, -0.0595]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.475 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
