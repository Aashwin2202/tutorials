.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.9030,  7.1898,  4.7936,  8.4636,  5.3439],
            [11.3443, 11.4086,  4.0153,  9.7307, 13.4370],
            [ 6.9778,  8.7837,  3.3714, 11.7415,  5.8838],
            [ 3.8781,  0.5743, 11.2457, 10.7991,  8.2763],
            [ 0.8205,  2.4903,  4.3916,  5.6487,  6.7307],
            [ 3.8781,  5.5427,  6.6590,  5.6645,  8.2763],
            [ 6.9778,  6.0944, 13.0336,  6.6332,  5.8838],
            [11.3443,  5.3181,  4.3508, 10.8345, 13.4370]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.5371, -1.1932,  0.9570,  0.2198,  0.1726, -0.2556,  0.0219,  0.3510],
            [-0.5889, -1.2643, -0.0712, -1.0524, -0.1990,  0.2635,  0.4119,  0.1708],
            [ 0.9967, -2.8251, -0.5206, -0.7617,  0.8450, -0.4258, -0.3385,  1.0346],
            [ 1.3000, -1.7769,  0.6997,  0.0364,  0.1907,  0.0109,  1.0311, -1.3424],
            [-0.5685,  1.2504, -0.0587,  0.1699, -1.4454,  0.6719, -0.3225, -1.0664],
            [-0.0450,  0.8074,  0.3141,  0.6724, -0.7118, -1.6691,  0.2361,  0.8798],
            [ 1.0472,  1.4239, -1.4703,  1.5742, -0.2072,  0.1672,  2.0124,  0.9426],
            [ 1.6534, -0.0250,  0.8053, -0.8186, -1.2203,  2.2695, -0.2668,  0.3401]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4751, -1.1510,  0.6650],
            [ 0.7365,  0.8289, -1.0939],
            [-1.5883,  0.3667,  0.4547]], requires_grad=True), Parameter containing:
    tensor([[-0.1587]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.4060,  0.5021,  0.6721, -2.7880,  0.4712,  3.3983, -5.0202,  3.4016],
            [-3.4011, -1.1367,  0.3753,  2.2578, -0.6833, -1.1835, -3.1361, -0.5340],
            [-2.1755, -0.8290, -2.2092,  0.6718, -0.7993,  2.1159, -1.6464, -3.7540],
            [ 1.5535,  0.8652,  0.1510, -1.7272,  0.9211, -3.2914,  1.1031,  4.1675],
            [-1.2883, -1.7834,  3.4317,  1.6674, -3.3893, -0.9650, -1.7182, -6.3313],
            [ 1.7985, -1.4284, -5.2582,  0.8863,  4.0266,  0.0293,  4.4890,  3.2939],
            [-4.8432,  1.9007,  3.4314, -0.4032, -1.7351, -2.1809, -1.9217,  2.2477],
            [ 3.1182,  1.6572, -1.0439, -0.9670, -1.8500,  3.3659,  2.8459, -4.2651]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2883, -0.6735,  0.6192, -0.6671, -2.9904, -0.2398, -1.4991,  1.4975,
             -0.0754, -0.0460],
            [ 0.6580,  1.3695, -0.0650,  1.6147,  3.1048, -0.1054,  0.3497, -4.5619,
              2.1892, -0.3557],
            [-1.6263, -1.2706,  0.7893, -5.2310, -1.2690, -1.8166,  0.9403,  2.8606,
             -1.4835,  0.2598],
            [ 0.8310,  0.5298,  0.0329,  2.0976,  3.8146,  0.6621, -2.8733,  1.2812,
             -0.7702,  0.1881],
            [-0.6283,  1.2893, -1.1346, -1.4219, -3.1668, -0.1497,  0.6239, -2.1479,
              1.8800,  0.0699],
            [-1.4310,  1.2327,  0.7126, -0.0424,  5.3240,  0.3033, -1.7981,  4.5036,
             -2.8359, -0.2964],
            [ 0.1773, -0.7208, -0.6800,  3.7152, -5.3314,  2.5374, -2.3534,  0.2259,
              1.5992, -0.1028],
            [-2.1396,  1.6610, -2.2780,  0.2305,  6.0817, -2.9857,  0.6626, -0.9674,
              1.6856, -0.4519],
            [ 1.8895,  1.9529, -1.6531, -0.1909, -0.5245, -2.2092,  2.7504, -0.0444,
             -1.9334,  1.2534],
            [-3.2380,  1.1658, -1.2880,  1.3744,  2.6134, -1.3920, -1.0605,  2.4359,
             -0.3350, -0.6125]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.536 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
