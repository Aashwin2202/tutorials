.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.1316,  9.1256, 10.9152,  6.8241,  4.0169],
            [ 2.1136,  6.2167, 15.9555,  4.4739,  5.0502],
            [ 1.5625,  6.2698,  4.2486,  4.1051,  8.1559],
            [ 6.1219,  4.1268,  9.1705,  3.5457,  6.5734],
            [ 1.4740,  6.4575,  2.9615,  8.4824, 15.8488],
            [ 6.1219,  9.0589,  6.2243,  6.2405,  6.5734],
            [ 1.5625,  3.7408, 10.2382,  2.8602,  8.1559],
            [ 2.1136,  2.7771,  5.7282, 13.8802,  5.0502]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.0959, -1.3284,  0.9780,  2.6141, -0.9283, -1.8744, -0.5137,  0.9690],
            [-0.0704, -0.0474, -0.6081,  0.2239,  0.1423, -0.2249,  0.7432,  0.1243],
            [ 0.6051, -0.4616, -0.1345, -0.4522,  0.5665,  0.1595,  0.2377, -2.0649],
            [-0.9080,  0.8679, -0.4957,  1.5196, -0.0040, -0.4414,  0.3988, -0.5641],
            [-0.2030,  0.2237, -1.6102, -0.1767,  1.5579, -0.0823, -0.0230, -1.1720],
            [-0.4746,  0.9276, -2.0985,  0.1721,  0.5458, -0.0971, -0.9198,  0.6550],
            [ 0.8957, -0.8142,  1.0253,  0.6441,  1.2905, -0.6201, -0.7878, -1.4444],
            [-0.7018, -1.3672,  0.3502, -0.4698,  0.5706, -0.5195, -1.0795,  0.5477]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.0163,  1.5112, -0.2111],
            [-0.5925,  2.7424, -1.1009],
            [-0.1288, -0.7041,  0.4281]], requires_grad=True), Parameter containing:
    tensor([[0.3352]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.2696, -4.0718,  8.6762, -6.1742,  0.6677, -1.9993,  2.1821, -1.9563],
            [-3.5158,  0.4762, -0.4496,  0.9903, -0.4768,  1.6144,  2.0559,  0.3535],
            [-4.3668,  2.6147,  4.2876,  2.0878, -5.3963,  4.6285, -4.4635,  4.9831],
            [-5.7464,  2.3266,  7.0658, -5.3101, -5.4873,  7.7396, -1.1022,  0.3098],
            [ 0.7333, -5.6175,  4.5025, -2.2265,  1.4436,  2.7817,  1.4395, -0.1765],
            [ 1.2685, -5.4822,  0.1864, -1.4941,  1.3155, -1.8752,  3.6489,  2.9424],
            [ 0.7625, -0.6263,  1.2555, -0.2766, -0.9661,  0.1617,  1.2882,  1.1732],
            [ 1.5910,  2.4650, -3.3952,  2.8144, -1.1020, -1.8601,  1.2983,  1.9456]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0085,  0.7989,  0.7804, -0.7420,  2.9993, -1.4890,  2.2462,  2.4974,
              1.9384, -0.3247],
            [-0.3311, -0.9303,  1.3364, -3.0561,  6.0617, -5.6018,  3.2514,  4.5667,
              0.4164, -1.4808],
            [ 0.7202, -3.9682,  1.0549,  0.7356, -4.2204,  0.8494, -2.5730,  3.1948,
             -6.1222,  2.0008],
            [ 0.1663,  1.1853, -2.5802, -0.1765, -4.4680,  4.0221, -0.8628,  0.5263,
             -0.0999,  0.5673],
            [-0.0959,  2.4273, -3.4307, -2.8914,  6.5224,  0.7424,  0.4702, -0.8652,
              4.7844, -1.9013],
            [-0.4590,  2.2197, -0.3040, -0.9490,  4.9943, -4.6479,  2.8004, -6.5696,
              1.1064, -0.2480],
            [-0.1507,  0.5745, -3.3144,  0.2703,  4.4604, -4.4728, -3.0644,  2.9595,
             -5.1016,  2.3351],
            [-0.2112,  1.4977, -2.8740,  1.6242,  4.6174, -1.3698, -0.6141, -2.3916,
              3.1489, -1.5283],
            [ 0.0210, -0.5225,  1.0018,  3.7116, -6.7818,  5.2274, -0.4984, -1.8129,
             -1.5062,  0.9950],
            [ 0.0138,  0.0414, -0.4261, -0.7986,  1.3126, -1.0780,  0.5239,  0.6127,
              0.0809, -0.2580]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.469 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
