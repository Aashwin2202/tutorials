.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.7171,  9.4206,  5.4620,  7.5553,  8.5418],
            [10.5937, 15.0803,  5.5433,  7.2314,  7.8632],
            [ 6.5768, 11.6564,  1.1425,  3.2490, 15.1402],
            [ 0.7965,  4.5254,  9.6129,  2.9385, 12.1959],
            [ 1.0897,  5.9253,  7.1968,  9.7937,  6.0962],
            [ 0.7965,  2.8571,  4.0125,  7.1534, 12.1959],
            [ 6.5768,  2.2327,  8.4466,  3.1618, 15.1402],
            [10.5937,  3.3071,  7.2963,  2.7431,  7.8632]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.2556,  0.1656, -0.9772, -1.0240,  1.1239,  1.6208, -0.3897, -0.1727],
            [-1.1036, -0.3470,  0.7581,  0.2173,  1.5018, -0.1721,  0.7673,  0.1421],
            [-1.3315,  0.7993,  0.9828,  0.5873,  0.3053, -0.0399,  0.4297, -0.7545],
            [-0.7145,  1.0939, -0.9400,  1.3254,  0.5748, -0.0349, -0.8743,  0.8647],
            [ 1.1956, -0.7228,  1.7072,  0.1748,  0.9233, -0.0616,  0.7124, -1.1992],
            [-0.0983,  1.6251, -0.1780, -0.2789,  0.9167, -1.0131, -1.3112, -0.0408],
            [-0.5564,  0.1174,  0.0574,  0.9591, -1.2558, -0.0140, -3.1897,  0.2691],
            [ 0.3134,  0.1465, -1.3609, -0.3801, -1.1228, -1.2284, -1.2395,  1.2884]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.5290, -0.9754, -1.3209],
            [-0.0028, -0.7490,  0.7562],
            [ 0.9718,  0.7846,  1.9514]], requires_grad=True), Parameter containing:
    tensor([[-0.8585]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.3780, -0.1716,  5.8837, -0.8622, -1.7047,  2.0627, -2.2714, -3.0828],
            [-1.0999, -2.6258, -2.6242, -4.6892, -0.6375, -2.5653, -2.0671,  1.8429],
            [-4.2316, -7.3343, -1.9441, -4.5859,  1.7065,  0.3393, -1.1713, -2.2830],
            [ 5.5850,  2.5772,  0.6855, -1.7064,  4.3616,  1.2196,  0.8282, -0.6583],
            [-0.3094,  2.5917, -0.6644, -0.2103, -1.4391, -5.4560,  0.1389,  2.2654],
            [-7.5220, -2.2061, -1.1605, -1.4262, -0.5694, -1.2850,  0.8654, -3.5336],
            [ 1.9818, -1.5166, -2.6840,  1.4006,  6.0870,  5.0279, -1.0337, -4.1164],
            [ 6.7342,  0.3210, -1.7459,  0.8517, -4.4111, -6.0092, -5.0293,  4.4939]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.0349, -0.2128, -0.0072,  0.5832,  1.3165, -1.3546,  0.2503,  0.5559,
             -0.3413,  0.9318],
            [ 0.7622, -2.3442,  0.1161,  1.2609,  2.0660, -1.0342,  0.3097, -1.1146,
             -0.3226, -1.3131],
            [-0.7213,  0.3168,  2.4119, -1.4337,  4.4900, -0.9378,  6.0044, -3.3864,
              0.0313, -1.3575],
            [ 1.2271,  0.8562,  1.4718, -3.6275, -0.8027, -2.8928,  2.4164,  2.2601,
              3.2534,  0.8442],
            [-1.2398, -1.2216, -5.0266, -1.2049, -6.2436, -5.4229, -0.3901, -0.4059,
              1.5477,  3.4322],
            [ 0.7867, -3.3325, -2.0395,  5.0415,  3.0109, -2.7519,  0.3069,  0.1208,
              0.7367, -0.2456],
            [ 0.1807, -1.9343,  4.2272,  0.7439, -4.5283,  4.9154,  2.4217, -3.7027,
             -3.1821, -4.7786],
            [ 1.3493,  3.2037,  0.8708, -6.7837, -2.8877,  3.2449, -2.6716, -6.5214,
             -3.7230, -1.0200],
            [-0.3099, -0.1253, -2.9567,  0.2684,  0.3009, -0.7747, -3.0494,  1.9846,
              1.7195,  1.9050],
            [-1.2809,  1.0642, -0.9241,  4.2866, -0.9890,  0.4484, -0.4897,  3.3269,
              1.9273,  1.4807]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.535 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
