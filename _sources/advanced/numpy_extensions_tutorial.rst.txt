.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 1.2829,  9.9901,  8.7267,  7.1185,  2.0385],
            [10.7087,  7.3472,  5.1048,  1.9883,  7.0957],
            [ 4.6018,  9.1236,  3.9812,  8.6576, 11.5563],
            [ 8.9817,  7.3753,  6.7347,  8.2442,  3.4901],
            [ 4.3233, 12.1180,  2.7305,  6.3235,  0.9307],
            [ 8.9817,  7.4212,  7.0709,  6.0495,  3.4901],
            [ 4.6018,  3.2962,  6.7949, 12.7262, 11.5563],
            [10.7087,  9.3473,  1.5081, 10.1268,  7.0957]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.4687, -0.3103, -0.8324, -1.9480,  0.5775,  0.3485,  0.0250,  1.0471],
            [ 1.3282, -0.0196,  0.9690, -0.4598,  1.3748, -0.6423,  0.6029,  0.1014],
            [ 1.4739, -0.9872, -0.7003, -0.5844, -1.2440,  1.7873,  0.9261, -1.1163],
            [ 1.2389, -0.1900, -1.7921, -1.1857, -1.9109,  0.0301,  0.0215, -0.2408],
            [-0.0551, -1.3089, -2.3372,  0.2076,  0.7801, -0.2569,  0.2884,  0.6161],
            [ 0.2883,  1.2476, -0.3570, -0.3957,  0.4571, -0.9689, -0.7521, -1.4300],
            [ 0.5654,  0.4732,  0.3215, -0.1280, -0.3880, -0.2225, -0.0569,  0.7043],
            [ 0.3386,  1.2959, -0.4006,  2.3625, -0.3261,  0.9633,  0.4219, -0.4502]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.4032, -0.3415, -0.6431],
            [-1.0755,  0.2273, -0.4463],
            [-1.0130,  1.5982, -0.4039]], requires_grad=True), Parameter containing:
    tensor([[1.9189]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.6591,  3.2532, -1.2619,  2.2376,  3.8526,  0.6634,  3.0451,  3.5679],
            [ 0.1791,  4.0529,  1.6749,  0.7184,  1.5335,  2.8012,  3.5704,  0.3580],
            [ 2.3741,  0.8133, -0.8218,  0.2935,  4.3326,  1.6926, -0.0861,  1.2638],
            [ 4.4416, -0.8068,  3.8693,  2.9238, -0.7607, -0.8186,  3.9267, -1.1814],
            [ 2.6067,  3.5298,  0.3157,  3.4422, -0.2747,  1.2241,  5.4162,  1.4499],
            [ 2.4067,  4.9205,  0.6994,  4.1070,  3.9314,  1.4220,  3.9824,  3.4463],
            [ 5.6105,  0.2177,  4.0098,  0.5654,  5.7140, -0.3356,  1.7984,  1.2179],
            [ 1.2228,  0.6765,  5.4271,  3.2273,  4.3639, -1.8141,  2.2131,  1.8859]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0859, -0.2310,  0.4338,  0.7118, -0.3796,  0.2231,  0.0619, -1.3289,
             -0.5084,  0.1867],
            [ 0.4897,  1.1806, -1.0269, -1.4031, -0.1640, -1.8904, -0.0490,  0.7689,
             -0.5444, -0.4212],
            [ 0.2881, -2.5418, -1.4216, -0.2956,  0.6594, -1.4311,  2.5943,  0.8880,
             -0.4808, -0.4014],
            [-2.5733,  1.5857, -0.4906,  1.3200,  0.4284, -0.9190, -1.0412, -1.5056,
              0.9188, -1.6915],
            [-1.9576,  6.2566, -8.1901,  1.1810, -1.6814, -3.0667,  0.2405, -3.5340,
              1.4666,  0.0267],
            [-0.6446, -1.6555, -2.3546, -2.2143,  1.1416, -0.2971,  3.5707,  0.1033,
              3.3903, -0.1406],
            [-1.9509, -2.0115,  3.8464, -2.4518,  1.6541, -0.9463,  1.9773,  2.4299,
             -1.6620, -0.3313],
            [-1.7899,  1.0789, -2.7602,  0.9136,  1.7069,  0.3644,  2.0310, -3.6382,
              0.4967, -0.8901],
            [-0.0982,  0.5739, -0.0148,  4.6148,  1.9611, -1.6525,  0.7867, -3.8681,
              2.3771, -0.7373],
            [ 0.2822, -0.2813,  1.8684, -1.2888, -1.3469, -1.3141,  0.6153,  0.9959,
              0.1333, -0.1429]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.467 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
