.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[15.0539,  6.3425, 10.5657,  1.4502,  6.3335],
            [ 7.7741,  7.7754,  5.8751,  7.1947,  8.5966],
            [ 1.8974,  4.5287,  9.2387,  7.3401,  3.5061],
            [ 6.3188,  8.5959,  4.1473,  7.8728,  6.8118],
            [ 5.1622,  4.0871,  3.2785,  8.5231, 12.1885],
            [ 6.3188,  1.1765,  6.7341,  6.2848,  6.8118],
            [ 1.8974, 13.4867, 10.1292,  8.4309,  3.5061],
            [ 7.7741,  8.5647,  2.3761,  2.5895,  8.5966]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 6.9938e-01, -3.9768e-01, -2.6019e-01,  5.5686e-01, -1.7924e+00,
              3.6036e-01,  1.5655e-01, -4.3262e-01],
            [ 2.6803e-01, -7.9628e-01,  1.2781e+00,  3.3218e-01,  1.4558e+00,
              4.8507e-02, -5.5904e-01, -7.0326e-01],
            [-9.8040e-01,  1.4544e+00,  6.9597e-01,  1.4663e+00, -1.9129e-01,
              1.8751e+00,  9.5826e-01, -1.1627e+00],
            [-1.6155e+00,  6.4940e-01,  9.4112e-01, -7.5088e-01,  4.8908e-01,
              7.2228e-01,  1.0884e+00, -3.2454e-01],
            [ 9.9793e-01,  1.0506e+00,  1.4032e+00,  1.0678e+00,  2.8405e-01,
              6.7035e-01, -9.1017e-01,  9.1458e-01],
            [ 3.9147e-01,  1.8689e-01, -2.2545e-01, -1.1807e-01,  6.7280e-01,
              3.7402e-01,  6.6383e-01, -1.4074e-01],
            [-8.7873e-01, -1.0131e+00,  4.4317e-01, -3.8902e-02,  1.6492e+00,
              2.2360e-03,  1.3157e+00,  1.4418e-01],
            [-2.0648e-01,  7.9226e-01,  3.6007e-01, -1.8443e+00, -1.6989e-01,
             -6.9388e-01,  2.2711e+00,  1.0878e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.9450, -0.9831, -1.0464],
            [-0.7466,  0.2056, -0.5353],
            [-1.3135, -0.3852, -0.7905]], requires_grad=True), Parameter containing:
    tensor([[-0.6770]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.4460, -1.2753, -1.7576,  0.9176,  2.9752, -0.4840, -4.0108, -2.9523],
            [-5.6654,  1.6972, -1.2741,  0.7762, -3.3819, -4.9996, -1.9427,  2.9823],
            [ 1.9296,  3.4564,  1.5303,  2.9244, -0.1561, -1.5979, -5.3142,  1.8883],
            [ 1.9271, -2.5130,  5.0174, -6.6874, -2.1195, -1.1867, -2.9373, -2.8887],
            [ 1.3059,  2.7428,  0.5301,  0.2125, -1.6427, -4.2517, -0.8107, -4.5141],
            [ 1.6299,  0.0889, -1.9855, -0.1775, -3.3916, -2.8518,  1.5881,  0.5433],
            [ 1.5119, -0.7387,  3.1538, -1.7635,  0.5294, -0.1306, -1.2049,  0.8912],
            [ 0.6612, -1.3642,  2.1842, -0.6972,  1.2062,  4.1193,  3.4833,  0.7757]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3697, -0.5035, -2.3530,  2.0238,  3.0246, -0.6348, -1.0767,  1.6334,
              1.0204, -0.1078],
            [ 0.1537, -1.5460,  1.0053,  1.8710,  2.9977,  1.2927,  0.2390, -0.9113,
              0.0273, -0.0870],
            [-1.0712, -1.5994,  6.0003,  5.5975,  1.7116,  1.2422,  1.7994, -0.5277,
              0.0632,  0.2538],
            [ 1.1101,  2.5502, -0.0069,  3.4790,  1.7862, -1.7416, -3.3076, -0.2409,
             -1.8668, -0.5125],
            [-1.6111,  4.6343,  2.5093,  1.0039, -0.7133,  0.1183, -2.3620, -1.5434,
              1.4836,  1.7302],
            [-1.1891, -1.7595, -1.4648, -2.1926, -5.0730,  0.5676, -2.2479, -1.1727,
             -1.1656,  0.4451],
            [ 1.9722, -1.1224, -5.2585,  4.5701, -1.1931,  0.9095, -0.8918,  2.1879,
              3.0246,  2.5138],
            [-1.6567, -0.2422, -1.6240,  1.2698,  1.4434,  0.0301, -0.2512, -3.5039,
             -0.0504,  1.4934],
            [-2.0885,  0.8312,  1.7468,  1.0256,  2.3318, -1.4521,  1.4975,  1.7636,
              0.7359,  1.3149],
            [-0.1771,  1.1735,  0.9058,  1.0041,  0.0787, -1.8538, -1.9583, -0.3229,
             -0.4103,  0.6744]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.525 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
