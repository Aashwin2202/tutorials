.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.0408, 11.7420,  9.0716,  1.0761,  3.8808],
            [ 6.1731,  8.4256,  8.2256,  4.2872,  5.4192],
            [ 3.5613,  3.5596, 17.5343,  6.2396,  4.4025],
            [10.5097,  7.0508,  9.8306,  4.3733, 15.5717],
            [ 8.0668, 10.5105,  2.8967,  4.5804,  1.6649],
            [10.5097,  5.5780,  8.6655,  4.2362, 15.5717],
            [ 3.5613,  7.0487, 12.7216,  2.2618,  4.4025],
            [ 6.1731, 10.1373, 10.9792,  5.4685,  5.4192]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.3899, -0.3947, -1.4652,  0.0988,  0.8582, -0.7670,  0.3559,  0.6850],
            [-0.8724, -1.8512, -2.5166, -1.5495, -0.2201,  1.7838, -0.7547,  0.5908],
            [ 1.2547,  0.4072,  0.7427, -1.3980,  0.6013,  0.2896,  0.2073, -0.8717],
            [-1.0448,  0.3331, -0.0309, -1.2485, -0.6114,  0.6534,  0.3552, -0.8659],
            [ 2.3486, -0.7466, -0.3245, -0.0183, -0.1313, -0.2152, -0.0221,  0.8768],
            [ 0.4720,  0.5824,  1.5362, -0.8489, -0.1475, -0.4745,  0.9079,  0.2639],
            [-1.9114,  1.9247,  0.3842, -0.6682, -2.8024,  0.6849,  0.6572, -0.5172],
            [ 0.1445, -0.4243, -1.4485, -0.4104,  1.3195,  0.4217,  0.1888, -0.7868]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.6799,  0.4622, -0.0824],
            [-0.3019,  1.5264, -0.7218],
            [ 0.4954, -0.1538,  0.6286]], requires_grad=True), Parameter containing:
    tensor([[0.0492]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.2753e+00,  3.4014e+00, -3.9058e+00,  2.4958e+00, -3.2553e+00,
              3.3797e+00, -1.5645e+00, -1.6786e+00],
            [ 2.4328e+00, -1.9498e+00,  2.4021e+00, -4.2005e+00,  2.3753e+00,
             -4.0398e-01, -2.8897e+00,  4.0067e+00],
            [ 1.9137e+00, -1.1496e+00,  3.0605e+00, -1.8846e+00,  2.3169e+00,
             -7.4766e-01, -7.0055e-01,  3.4625e-01],
            [-3.4690e+00,  1.8663e+00,  8.2848e-01,  4.8945e-03,  3.3278e-01,
             -2.6010e-01,  1.0073e+00, -6.0261e-01],
            [ 1.0206e+00, -5.2755e+00,  1.8191e+00,  1.6375e+00, -2.1086e+00,
              9.0173e-01, -1.4793e+00,  3.4164e+00],
            [ 3.9226e+00, -4.1724e+00, -1.7575e+00,  2.1904e+00, -1.3537e+00,
             -1.8452e+00, -2.7509e-01, -1.0417e+00],
            [-3.2457e+00,  4.2589e+00, -3.2472e+00,  3.1324e+00, -1.0050e+00,
             -1.5071e+00,  1.7187e+00, -1.9201e+00],
            [ 3.2426e+00, -3.6038e-01, -1.4507e+00, -1.1118e+00,  1.0979e+00,
             -2.3338e-01,  2.0251e+00, -1.4755e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-3.1325e-02, -4.5925e-01,  1.2490e+00, -8.8689e-01,  5.7031e-01,
             -1.0526e+00, -9.1504e-02,  1.2144e+00, -6.6022e-01,  1.0302e-01],
            [ 3.0735e-01, -1.5829e-01,  1.6523e+00, -2.8794e+00,  1.4114e+00,
             -7.7010e-01,  2.8010e+00,  9.0334e-01, -2.9208e+00,  9.8048e-01],
            [ 2.3582e-01,  5.0461e-01, -1.2829e+00,  3.1338e-02, -9.0209e-01,
              2.2478e+00, -1.9816e+00, -2.3226e+00,  1.2234e+00, -2.1845e-01],
            [-2.2746e-01,  1.2540e+00, -3.3797e+00,  8.8730e-02, -2.3435e-02,
              9.8171e-01, -3.6488e+00,  2.7039e+00, -1.2726e-01, -1.6093e+00],
            [ 1.0779e-01, -5.9604e-01, -1.5330e+00,  3.5323e-01,  1.4065e+00,
              2.3269e+00, -3.5551e-01,  6.3223e-01, -1.2478e-01,  1.1204e+00],
            [ 4.1480e-01, -6.2773e-01,  2.4854e-02, -2.1052e+00,  3.6124e+00,
              1.0788e-01,  1.8040e-01, -6.7441e-01,  2.7197e+00, -1.0112e+00],
            [ 4.8945e-01, -9.6203e-01, -3.5241e+00,  5.7702e+00, -1.5818e+00,
             -2.1786e+00,  8.5222e-01,  1.7604e-01, -1.9326e+00,  1.2935e+00],
            [-2.8930e-01, -1.4463e+00,  1.4715e+00,  8.2109e-01, -3.0162e+00,
              3.5011e+00, -1.7380e+00, -3.8849e+00,  1.4874e+00, -3.3247e-01],
            [-4.6013e-01,  1.3742e+00, -1.4390e+00,  1.9011e+00,  1.3713e+00,
              6.5347e-02, -1.7494e+00, -1.3913e+00,  1.0421e-01, -4.9024e-01],
            [ 1.9240e-01, -3.3143e-01,  9.2637e-01, -1.4060e-01,  1.1748e+00,
              4.9663e-02,  3.2567e-01,  4.2608e-03, -6.2927e-01,  2.7896e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.563 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
