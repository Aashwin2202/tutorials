.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.7364,  6.6407, 12.3694,  4.8403, 12.5903],
            [ 5.5469,  8.2780, 11.1747, 18.1904,  5.2398],
            [ 5.5354,  9.7013,  3.7251, 10.9333,  5.2532],
            [ 0.9668, 10.9108,  0.6266,  6.6939, 15.7326],
            [ 4.2261,  7.7915,  4.8556,  6.3764,  9.3227],
            [ 0.9668,  3.4870,  4.9702, 10.4339, 15.7326],
            [ 5.5354,  4.7518,  9.6032,  4.2997,  5.2532],
            [ 5.5469,  6.7985,  8.9494, 18.8216,  5.2398]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.7541,  0.4970, -0.4952,  1.4563, -1.1582,  1.0178, -1.2667,  0.7152],
            [-0.4583,  1.4733, -0.4178, -0.8112,  0.8387, -0.9895,  2.7712, -1.0534],
            [-1.8407, -0.0706, -0.0784,  1.4349,  1.0452, -0.2298,  1.6720,  0.0655],
            [-1.3659,  0.2986, -1.3962, -0.2657,  0.0126, -1.3276, -0.1717,  1.9955],
            [-0.3607, -0.6991, -2.4432, -0.0535,  1.3359, -1.0982,  0.7755,  0.5682],
            [ 0.0645, -1.7654, -0.3508,  1.1151, -0.4609,  0.9804, -1.3792,  0.1882],
            [ 0.4540, -0.6101,  1.1848,  2.5813, -1.2671,  0.1772, -1.9088,  0.0984],
            [-0.7857, -1.2587,  1.2715, -0.7632, -0.6457,  0.0718, -0.0839,  1.1881]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5055,  0.2182, -0.7194],
            [ 0.7535, -1.4556,  2.9534],
            [-0.2935,  0.0287,  1.0000]], requires_grad=True), Parameter containing:
    tensor([[0.4809]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.0846, -2.5299,  0.5968,  1.7901,  3.5915,  0.5842, -0.6425,  4.4847],
            [-0.0822, -3.5030,  2.3554, -0.8801,  1.1453,  0.5443,  1.4052,  4.4949],
            [ 4.1675,  3.9204, -0.9074,  2.7935, -2.9089,  8.3163, -5.1270,  1.5755],
            [ 2.9955, -1.3268,  2.6284, -0.9873,  2.3937, -1.8144,  1.1669,  1.5170],
            [ 0.7850, -4.0895,  4.2557, -3.0522, -1.5254,  7.3742,  0.4483, -2.1345],
            [-1.3019,  3.3802, -3.7649,  5.0210, -2.3942,  5.8448,  3.0608, -1.6614],
            [ 1.0079,  1.8863,  0.4773,  3.2355,  2.7637,  0.9889, -4.8474,  4.3761],
            [ 0.3509,  6.7387, -0.7284,  2.6795, -0.6127, -6.4794,  6.4058, -1.6836]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.5950, -1.0693,  0.3597, -0.7641, -1.3100,  0.0112,  0.3239, -0.1984,
              0.5818,  0.1439],
            [-0.4350,  3.1063, -4.3325,  3.5957,  4.6352,  0.4652,  0.3576,  1.4953,
             -1.7773, -0.3208],
            [-0.5150, -0.2187, -2.8833, -2.6634,  3.4304, -1.6149, -3.0087,  2.5907,
             -2.4975, -1.5544],
            [-0.0447,  0.5706, -3.5842,  3.1203,  1.5453, -7.5281, 10.2569, -5.6176,
             -1.3006,  0.4612],
            [ 0.4072, -1.7910,  4.9973, -3.4995,  8.5590, -2.5274, -0.7606,  0.2875,
             -1.9516,  1.0098],
            [ 0.3985, -1.3452,  2.3771,  1.5443,  1.5042,  2.5555, -2.8223,  4.2143,
             -5.2246, -0.1415],
            [-0.5542,  0.9939, -0.6750,  1.6912,  0.8715,  2.6616,  2.1001, -3.7928,
              2.7724,  3.0990],
            [ 0.1505,  0.0987, -1.8557,  4.5780, -4.6402,  0.8381, -0.2959, -3.7400,
             -0.9740, -1.4956],
            [ 0.0189, -0.4794,  1.0093, -0.5960, -2.2278, -0.2817,  1.7844, -1.1970,
              2.0013,  0.0433],
            [-0.0163,  0.1196,  0.1611, -0.3435, -0.5081, -0.3398,  0.0246,  0.3364,
              1.1491,  0.2616]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.513 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
