.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.9552, 14.9401,  4.7713, 11.7022,  1.1893],
            [11.8357,  6.3139,  7.7991,  6.8338, 13.1557],
            [ 1.3437,  5.9481,  7.7650,  9.5678,  5.5657],
            [ 1.0170,  2.2035,  6.9898,  3.7579,  9.3810],
            [ 3.9927,  8.4373,  4.4822,  4.8783,  4.3588],
            [ 1.0170,  7.4358, 14.5392,  8.3820,  9.3810],
            [ 1.3437,  6.5907,  8.9993, 10.8405,  5.5657],
            [11.8357, 10.8870,  6.5752, 11.8916, 13.1557]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.8427, -1.3487,  0.2582,  2.3503, -0.7497,  0.3728,  0.0523,  0.2217],
            [ 1.3510, -0.7137, -0.7620,  0.0035,  0.1997, -1.4419,  1.0943, -1.6818],
            [ 0.5667, -0.3383,  1.3546, -2.0634, -1.7252, -1.1330,  0.0285,  0.6219],
            [-0.6497, -1.0729,  0.3652,  0.5033, -0.0598, -0.9575, -1.9004,  0.5325],
            [-0.9212,  0.8627,  1.5322, -0.9137, -0.4789, -0.0474, -0.2991, -0.3254],
            [-0.1832,  1.1288,  0.8566,  1.4381, -0.1662,  0.9597, -2.5256, -0.6222],
            [ 0.7714,  0.9077,  1.1740, -0.7040,  0.8725,  0.8060, -1.7272,  0.6978],
            [-1.0956,  0.4683,  2.2517,  0.7027, -0.9151,  0.0453, -0.4851,  0.8578]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.3443,  1.6253,  2.0413],
            [ 0.0460,  1.7629,  1.2626],
            [ 0.4962, -0.8638, -0.7151]], requires_grad=True), Parameter containing:
    tensor([[-0.5303]], requires_grad=True)]
    Output from the convolution:  tensor([[ -6.5840,  -6.2698,  -2.3713,   4.2332,   4.9411,  -1.4614,  -6.9810,
              -7.9545],
            [ -0.9259,   2.6148,  -2.8345,  -1.8305,  -7.9512,  -3.5147,   2.6396,
              -5.3184],
            [  4.4385,   6.6277,   0.7070,  -8.6218, -10.2655,  -7.7666, -14.4424,
              -0.9522],
            [ -3.3625,  -1.8393,  -5.3428,  -3.6357,  -3.3366, -10.6666,  -8.0554,
              -6.4283],
            [  1.7982,  -3.7200,  -1.5356,  -2.5059,  -3.3529,  -2.9059,   3.6218,
               1.4733],
            [ -2.0069,   0.4992,   0.7635,  -1.6176,  -0.9271,  -2.4005,  -4.8941,
              -0.2577],
            [ -0.4529,  -5.3973,  -2.7881,  -3.5802,   0.9697,  -0.7106,   0.9438,
              -3.6818],
            [  1.8977,   0.1421,  -5.3366,  -1.4632,   2.3102,   3.2503,   1.9327,
              -6.5129]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-3.1225e-01, -3.2573e+00, -1.4454e+00, -4.7828e-01,  5.2801e+00,
              3.1917e+00,  2.6478e+00,  2.4106e+00,  4.2161e-01, -1.2218e-01],
            [-8.5152e-01, -1.2284e+00, -4.6283e+00,  1.5345e+00,  6.6339e+00,
              4.2708e+00,  5.0800e+00,  1.4023e+00,  5.9920e-01,  1.3126e+00],
            [ 1.2414e-01,  3.0182e-01,  5.8306e+00,  2.4773e+00, -4.3401e+00,
             -1.4617e+00, -1.8798e-01,  4.2563e-01,  3.2495e+00,  2.0784e+00],
            [ 2.4646e-01,  2.9302e+00,  3.7773e+00,  3.6797e+00, -2.9361e+00,
             -6.1719e+00, -7.0312e+00, -1.5974e+00, -9.7075e-02, -2.8760e-01],
            [ 2.0380e+00,  2.2103e+00,  3.1827e+00, -4.7291e+00,  3.7508e+00,
              1.4222e+00, -1.9603e+00, -5.8464e+00, -1.6466e+00,  8.9251e-01],
            [ 3.0239e-01, -2.7934e-01, -5.6238e+00, -6.1358e+00, -5.5453e+00,
             -7.7020e+00, -4.2604e+00, -2.8588e+00,  5.6797e+00,  3.5004e+00],
            [ 9.6630e-01, -4.2134e-01, -1.3946e+00,  1.9396e+00,  1.8897e+00,
             -2.6484e+00, -9.3011e+00, -4.1546e+00,  1.3251e+00,  7.8841e-01],
            [ 3.9680e-02, -4.5761e-02,  3.9243e+00,  3.0098e+00,  6.5411e+00,
              4.8071e+00,  2.3741e+00, -7.3871e-01, -1.5090e+00, -3.2207e-01],
            [ 9.5235e-02,  2.7881e-01,  1.6705e-01,  8.4238e-01, -3.1572e+00,
             -1.7314e+00,  2.2545e+00,  2.4760e+00,  1.3803e+00,  3.4856e-01],
            [ 6.7072e-03,  2.2650e-01, -4.9714e-01, -3.4681e-01,  6.8660e-01,
             -3.8027e-01, -4.3312e-01, -2.2748e-01, -4.5831e-01, -1.8437e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.504 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
