.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.1415,  5.4396, 10.8820,  6.9428,  1.5098],
            [ 8.9750, 12.9393,  6.1315,  2.9400,  2.0611],
            [ 6.5714,  4.4515,  3.9783,  4.4798,  1.9097],
            [ 3.9865,  4.8991,  3.4407,  2.5301,  3.5003],
            [15.2415, 12.5941,  2.7088,  4.6227,  4.2378],
            [ 3.9865,  3.4110,  9.0856, 12.9526,  3.5003],
            [ 6.5714, 14.9159,  3.2300,  8.9027,  1.9097],
            [ 8.9750,  5.8747,  6.1528,  8.9861,  2.0611]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1984, -0.0669, -0.5615, -0.4163,  0.4269,  0.1811,  0.9773,  2.2163],
            [-0.2742, -1.5831, -0.9715, -1.1203,  1.3876, -0.3466, -0.6684,  0.6997],
            [ 0.8385, -0.1468,  0.6743,  0.2621, -0.2172,  1.1822, -0.1606, -0.0448],
            [-0.0871, -0.4902, -0.4511,  1.4252,  0.8096,  0.5824, -0.2308, -1.6443],
            [ 1.6802,  1.7393,  0.2036, -0.9455,  2.0035,  0.1291,  0.0285,  1.9332],
            [ 1.6728,  0.3804, -0.3916, -0.6740, -0.2146,  0.7957,  0.1188,  0.2402],
            [ 0.9354,  1.5368, -0.0066,  0.5067, -0.1846, -2.0218, -1.0258,  0.7329],
            [-1.2050, -0.5830, -0.0262, -0.9306,  0.7166,  0.2345, -0.2731,  0.0522]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.1167,  0.6803,  0.1307],
            [ 0.8652,  0.9942,  0.7417],
            [ 0.1960,  0.6564,  0.9858]], requires_grad=True), Parameter containing:
    tensor([[1.9581]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.1842,  1.8982,  3.1313,  4.8406, -1.0559,  1.2921,  1.4644, -1.8077],
            [-1.7942,  1.5800,  7.3652,  2.9964,  5.9442,  0.5368,  2.2204,  3.1006],
            [ 2.2851,  6.6822,  2.7500,  4.4934,  2.2553,  1.8987,  2.7683,  3.9182],
            [ 3.6977,  3.4154,  6.2503,  5.6204,  6.0141,  3.8540,  2.7950,  3.8457],
            [ 3.0647,  4.0449,  2.2663,  2.2058, -0.3259,  2.9694, -1.3324,  1.2134],
            [ 3.9935,  1.1918,  0.7323, -1.5877, -5.4397, -3.8501, -0.4145,  1.0011],
            [ 5.3803,  3.8804,  2.3113, -0.1955, -1.0092, -2.7090,  2.3091, -0.1559],
            [ 1.8334,  3.9532,  3.6539,  3.1565,  1.6103,  1.7326,  1.9423,  1.0753]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-1.7570e-01,  7.7827e-01, -3.1066e+00,  1.4631e+00,  8.3789e-01,
              2.2341e+00, -4.2863e-01, -1.0286e+00, -1.0982e-01,  4.6316e-03],
            [ 2.7244e-01, -1.2360e+00,  3.1137e+00,  1.2795e+00,  2.2683e+00,
             -2.9594e+00, -2.5470e+00, -2.7054e+00, -1.0284e+00, -1.5341e-02],
            [-3.1728e-01,  1.0015e+00,  1.4635e+00, -9.6505e-01,  5.4126e-01,
              1.3711e+00, -3.6284e+00, -4.1462e+00, -1.4972e+00, -1.4636e-01],
            [ 9.6294e-01, -1.0344e+00, -1.4444e-01, -7.0722e-01, -1.8897e+00,
              2.3827e+00, -1.6570e+00,  2.4765e-02, -9.0086e-01, -1.0461e-01],
            [-8.1139e-01, -1.6493e+00, -1.3735e+00, -4.4370e-01, -5.0090e-01,
             -1.8540e-01,  6.0968e-01, -5.1271e+00,  4.0198e-01,  1.9758e-02],
            [-1.0465e+00,  3.0126e+00,  1.4777e+00,  2.4026e+00, -3.6243e+00,
             -6.6871e-01, -1.5574e+00, -9.2861e-01, -4.8469e-01,  1.9075e-01],
            [-1.0682e-01,  1.6356e+00,  1.7592e+00, -3.1150e-01,  3.5000e+00,
             -2.7784e+00, -1.6967e+00, -2.2234e+00, -6.0370e-01,  9.6433e-01],
            [ 1.0207e+00, -1.1673e+00,  2.1435e+00, -3.8317e+00, -5.5565e+00,
             -2.1297e+00, -1.7006e+00,  5.7841e-01, -2.0751e-01, -2.8790e-01],
            [ 1.2628e-01,  1.8941e+00,  6.3452e-01, -1.6946e+00, -2.2201e+00,
             -1.9892e+00, -2.8927e+00, -8.3406e-01,  2.5127e-01,  2.2681e-01],
            [-1.0816e-02,  2.9955e-01,  7.7494e-01,  6.7395e-01, -1.3771e+00,
              3.7935e-01,  5.2835e-01, -7.5250e-01, -2.4924e-01, -5.2332e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.492 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
