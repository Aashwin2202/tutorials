.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 7.8055, 10.3845,  2.8920, 11.8122,  1.1117],
            [14.0222, 10.8287,  3.8189,  8.1633,  9.1938],
            [ 8.1686,  5.0859,  3.3120, 14.6757,  4.1175],
            [11.1517,  2.8483, 12.0455,  3.2363,  8.8209],
            [ 5.4694, 11.7546,  6.9170,  9.2371,  7.7479],
            [11.1517,  4.0219,  2.7016, 10.2202,  8.8209],
            [ 8.1686, 10.2007,  4.4224, 12.8640,  4.1175],
            [14.0222,  1.9551,  2.3952,  4.7342,  9.1938]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.4093,  1.1015,  0.8072,  1.7244, -0.3382,  1.4028,  1.2755,  0.2041],
            [-0.2527,  0.1180,  1.4396,  0.6321,  1.4053,  0.5721, -0.8056, -0.7220],
            [-1.2251,  0.6339,  1.9857,  0.4155,  0.2317,  0.4273, -1.8240,  0.7729],
            [-1.0931, -0.5943,  0.9232, -1.5259,  2.1583, -0.8661,  0.3381,  0.4771],
            [ 1.0251, -0.1463, -0.2463, -0.3778, -0.1248, -0.5942, -1.6079, -0.9061],
            [-0.2488,  0.3904,  0.3012,  0.8473,  0.2118, -0.8369,  1.0182, -0.0531],
            [-0.7513, -0.3534,  0.3747, -2.2588,  0.0641,  0.3873, -2.6864,  0.3658],
            [-0.6469, -1.2273, -1.0826,  1.6439,  1.2272,  1.3770,  0.0845,  1.4273]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7617,  0.6088, -1.5104],
            [-0.8150, -0.1954, -1.2484],
            [-0.1563, -0.7994, -0.3617]], requires_grad=True), Parameter containing:
    tensor([[-1.4394]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.0231, -1.8346,  0.4963, -5.2888, -1.4760, -4.2221,  0.2566, -3.5381],
            [-1.7336, -0.2311,  1.5627, -4.1293,  0.7547, -5.2210, -0.5153, -1.0948],
            [ 1.9977, -0.5693,  0.8142, -4.8740, -1.3873, -3.8283, -3.0193, -0.7578],
            [ 0.9082,  1.0066, -3.9678, -4.0681, -3.1420, -4.6062, -0.8054, -2.3867],
            [-1.2791, -2.6837, -6.5153, -3.0477, -1.4985, -5.5645,  2.2166,  0.2911],
            [-1.8904, -6.3722, -1.9170,  0.1772, -5.2212,  0.8103,  0.1260,  4.6166],
            [-1.9933, -4.1036, -0.9011, -3.1234, -5.6363,  2.2435,  0.2782,  2.1084],
            [-0.1195, -4.3104, -2.5684, -6.2747, -4.7658, -1.5682, -0.6023, -0.4220]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-8.2898e-01,  1.4633e+00, -1.4964e+00,  1.9479e+00, -2.7439e-01,
              3.4923e+00, -3.8165e+00,  2.8988e+00, -2.8121e+00,  1.1291e+00],
            [-1.2086e+00,  4.4741e-01, -1.1047e+00,  1.9804e+00, -3.1894e-01,
              1.7229e+00, -1.9734e+00,  7.1776e-01, -6.3954e-01,  2.0136e-01],
            [ 6.7190e-01, -1.9234e+00,  1.5770e+00,  4.5693e-01,  1.2763e+00,
             -2.1993e+00,  2.0208e+00, -2.7541e+00,  1.9972e+00, -1.3571e+00],
            [ 1.1730e+00,  7.7031e-01,  3.0567e+00, -2.6374e+00,  4.5814e+00,
             -1.5894e+00, -3.0228e-01, -4.0214e-01,  3.3970e+00, -3.7841e+00],
            [ 8.5264e-01,  2.1267e+00,  4.2738e+00,  3.7439e+00,  1.1617e+00,
              2.9058e+00,  6.6403e-01,  1.8219e-01,  8.7241e-01, -2.5358e+00],
            [ 6.5716e-01, -1.0473e+00,  4.9923e+00, -8.0732e-04,  2.8314e+00,
             -6.4333e-02,  3.3421e-01,  3.5484e-01, -2.1505e+00, -8.6389e-02],
            [-6.1612e-01, -3.2356e-01,  1.6358e-01, -2.0383e+00,  3.0024e+00,
              1.5814e+00, -2.2048e+00,  9.8986e-01,  1.5111e+00,  2.0345e+00],
            [ 1.1021e-01, -1.6880e-02, -2.1498e+00,  3.0886e+00, -1.0319e+00,
             -8.8998e-01,  2.2042e+00,  6.2784e-01,  4.0177e+00,  1.6250e+00],
            [ 8.0244e-01,  3.9320e-01,  1.1076e+00,  1.5129e+00, -8.8914e-02,
             -1.3620e+00,  2.5457e+00,  1.4974e+00,  2.7477e+00,  5.3776e-01],
            [ 1.8240e-01,  1.0887e+00,  1.0497e+00, -6.1320e-01, -8.3015e-01,
              1.2464e-01, -2.3996e-01,  5.2692e-01,  4.6022e-01,  4.7848e-02]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.471 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
