.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 5.4306,  8.6415,  4.8563,  4.0285,  0.1323],
            [ 6.3687,  2.2827,  7.7718,  5.3967,  9.9516],
            [ 2.6064,  8.1277,  0.1925,  3.0915,  3.7919],
            [ 3.7752,  7.4186,  2.6472,  4.6924,  6.3394],
            [12.7420,  3.6632,  6.9190,  6.2418,  2.4749],
            [ 3.7752,  2.6840,  6.8663,  9.4986,  6.3394],
            [ 2.6064, 10.5260,  7.5483, 10.7474,  3.7919],
            [ 6.3687,  6.3378,  3.5499,  5.3438,  9.9516]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0959,  0.2694,  0.2739,  1.1749, -1.4153,  0.3163,  0.6851, -0.0123],
            [-2.3011,  0.4410, -2.2424, -1.3169,  0.4579,  0.6815,  0.0312, -0.0551],
            [ 0.1273, -0.2919,  0.9505, -0.6814, -1.1659,  0.9787, -0.0435, -0.3003],
            [ 0.6013, -1.0353, -0.0602, -0.5894, -1.6218,  0.6077, -0.2996,  0.1436],
            [ 1.1155, -0.0204, -0.5948,  0.5151,  0.3663,  0.0377, -0.1028,  0.3381],
            [ 0.9479, -0.7153, -0.3970, -1.6335,  0.7301,  0.5504,  0.9352,  0.1502],
            [-0.0662, -0.2461,  0.0435, -0.1750, -0.0911, -0.2015,  1.2555,  0.7122],
            [ 0.0697,  0.2029,  0.7576, -0.8364, -0.4600, -1.0383, -1.0400, -0.7521]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 2.9481, -1.6172, -2.5369],
            [ 0.6953, -0.1386, -0.5932],
            [-0.4955,  0.7415,  1.8216]], requires_grad=True), Parameter containing:
    tensor([[-1.6214]], requires_grad=True)]
    Output from the convolution:  tensor([[ 0.3063, -6.9284, -2.6584, -2.9314, -7.9328, -1.5121,  2.4915,  7.5782],
            [-5.5039, -3.8558, -0.8661, -7.7409,  2.4232,  2.4262, -1.7393, -0.2916],
            [ 2.7372,  0.3506, -0.8866, -3.5268,  2.6865, -8.0359, -7.3452,  2.9522],
            [-5.0920,  9.1342,  0.2907, -4.1400, -3.1232, -9.7689, -0.2472,  1.1059],
            [-3.1087,  6.4324,  7.3698, -3.7128, -9.5793, -1.3917, -0.9988, -7.5313],
            [-5.0890,  4.0724, -8.7228, -3.2881,  3.5814, -0.7370, -0.5843, -3.9894],
            [-4.7312, -6.7422, -5.2356, -2.3728,  4.2805,  1.9907,  1.1111, -2.2987],
            [-0.4149, -3.4263, -4.9778, -2.2008, -2.3835, -3.0092,  0.7685,  0.3268]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 3.9272,  0.4637, -8.3728, -2.3429,  3.8467,  4.6462,  3.5002, -4.5164,
             -4.2560, -0.3352],
            [-1.1016,  2.9833, -1.5904, -1.5051,  1.8578,  0.4894, -1.6649,  1.0662,
              0.9083, -0.3318],
            [-1.2416, -1.5376,  4.1182,  2.8782,  3.1529, -6.1638, -7.7097,  9.0311,
              7.0843, -0.6506],
            [-1.6661,  3.7727, -0.9679, -2.1583,  0.7837, -2.5449, -2.2025,  2.4352,
              0.1976, -0.4453],
            [-0.8215,  1.2917, -1.4949, -4.9156, -0.4100,  7.2317,  3.1813, -3.6563,
             -3.0033, -0.2384],
            [ 0.4708, -1.7595,  2.1776,  2.5192, -4.5016,  7.0467, -0.0350, -8.7871,
             -0.8367,  1.5478],
            [ 1.6099, -1.4131,  2.0079, -4.3470, -3.4802, -3.9935, -0.0606,  6.2794,
              2.4676,  0.5407],
            [-0.4701, -4.3207,  1.5479, -0.7104,  5.5134,  2.2978,  1.9803, 10.2187,
             -1.6266, -4.3163],
            [-0.4362, -0.6174,  0.4081,  0.8362,  1.1454, -0.9699, -1.0595, -3.0555,
             -2.1264, -0.5283],
            [ 0.1319,  0.5917, -1.4017, -2.4823, -2.1201, -2.8449, -0.7308, -1.3653,
              1.3652,  2.3197]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.477 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
