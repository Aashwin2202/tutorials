.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 3.4235, 10.8397, 13.0940, 13.3649,  2.5841],
            [ 2.7899, 11.9207,  2.1687,  1.5011,  8.0648],
            [ 4.9912,  9.9953, 10.0727, 16.5175,  2.6432],
            [ 8.6105,  5.8830,  3.1153,  4.7208,  7.7253],
            [ 4.8724,  9.1427,  1.3066,  7.5925,  1.2898],
            [ 8.6105,  3.4058,  9.1722,  6.7449,  7.7253],
            [ 4.9912, 10.2748,  4.2349,  8.9367,  2.6432],
            [ 2.7899,  5.0385, 12.8377,  6.8705,  8.0648]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.0577, -0.4925,  1.5468,  0.3020, -0.4330, -0.9415,  0.1196, -0.2152],
            [ 2.0992,  0.6858,  0.3623,  0.7045, -1.2119, -0.4269, -0.7433, -0.0959],
            [ 0.5616, -0.6486,  0.4807,  0.8263, -0.5509,  2.4888, -1.8823, -1.3214],
            [ 0.9368,  0.9499, -0.2691, -1.0565,  0.8538, -0.4392, -0.8482,  1.0985],
            [ 2.3789,  0.3804, -1.3977,  0.1686, -0.4215,  1.2070, -0.6933,  1.1659],
            [ 0.2617,  0.0182, -1.1160, -0.0437, -2.0592,  0.7575, -0.1208, -1.8408],
            [ 0.0139,  0.3997,  1.5291, -0.0740,  1.1732,  1.0691, -0.7325, -1.9173],
            [-0.1190,  1.3391,  1.0927, -0.9517,  0.7432,  0.2795, -1.1928, -0.3720]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.9510,  1.8178, -0.2928],
            [ 0.4588,  1.9640, -1.0674],
            [ 0.3336,  0.2547,  0.7163]], requires_grad=True), Parameter containing:
    tensor([[0.4349]], requires_grad=True)]
    Output from the convolution:  tensor([[ 5.6735,  4.8883, -1.0988,  2.1151, -2.5356, -0.9333,  1.0903,  5.8500],
            [ 3.3120,  2.7904, -3.0099,  0.2946, -4.4923, -2.2895,  2.2360,  3.2407],
            [ 1.8411, -0.7212, -4.9726,  0.0651, -0.1462, -0.8193,  1.3573,  1.1074],
            [ 4.5605, -5.8635,  3.5652, -1.7424, -2.5412, -2.7428,  2.1041,  1.7230],
            [-2.9239,  0.4193,  0.1224,  3.6569, -5.5147, -2.8571,  1.9079,  0.3387],
            [-0.3772,  1.3174,  3.3392,  1.5294, -0.6249,  1.5226, -3.0326, -2.7562],
            [ 4.0134, -2.2475,  1.7814, -2.9343,  5.1238,  3.6102, -1.6814, -1.5449],
            [ 1.9962, -2.5026, -6.3762,  3.5878,  1.9953,  1.8298, -2.1877,  0.3827]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4231,  0.6718,  4.1487,  2.1325,  0.6625,  1.7412,  1.5377, -2.0810,
             -2.1884,  0.3673],
            [-0.6277, -3.2481,  0.8870,  3.5567, -0.4401,  2.1701,  2.4931, -2.2663,
             -2.8104,  1.4352],
            [-1.9147, -4.0963, -3.1900,  3.0363, -0.2855,  1.7728,  0.4233,  1.7088,
              0.4374, -0.8684],
            [-0.0444, -2.3868,  3.1647,  0.2182,  0.7408, -1.8259,  2.6029,  1.0656,
             -0.6730, -0.9890],
            [-1.1198, -0.8495, -2.6838,  4.4969, -1.7409, -5.6942,  6.5946,  2.4894,
             -1.4369,  1.9858],
            [ 0.9329,  0.6743,  1.8987,  0.7035,  3.3358, -2.3246,  3.0608,  2.1658,
              0.5690, -2.0857],
            [ 0.8179,  2.6381, -2.9277, -1.2998,  0.6044, -2.4021,  4.3130, -1.9370,
             -0.6637,  1.2202],
            [-0.5019,  0.5056,  1.8375,  2.3014,  3.3677,  3.1741, -0.7153, -0.5552,
              0.0070,  0.5423],
            [-0.3554, -1.9114,  4.4622, -0.9763,  2.3708,  2.9821, -4.3130,  1.4910,
              0.9406, -1.3897],
            [-0.4188,  0.1473, -0.4281,  1.4368,  1.2559,  1.0304,  1.3874, -0.3598,
              0.1923,  0.5266]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.526 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
