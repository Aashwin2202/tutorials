.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.3883,  3.1594,  4.7784,  9.6616,  5.9489],
            [ 7.2552,  8.5793, 16.3896,  2.3565, 12.2499],
            [ 5.9752,  5.8738,  4.3497,  5.3399,  6.3225],
            [ 4.1194,  5.7770,  8.6307,  5.7523,  5.1226],
            [ 3.0970,  2.9014,  6.5150,  3.7060,  2.7077],
            [ 4.1194,  8.1831, 10.8306,  5.9863,  5.1226],
            [ 5.9752,  5.7900, 10.7844,  3.8240,  6.3225],
            [ 7.2552,  7.2308,  1.7226,  4.6302, 12.2499]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.4066,  0.9011,  0.9444,  1.1514,  0.2642, -1.3093, -0.5037, -0.2728],
            [ 0.1723, -0.3068,  0.0850,  0.9902,  0.2016, -1.8393,  0.3904,  0.2035],
            [ 0.8748, -0.3079, -0.3023,  1.8253,  0.0563, -1.3882,  0.0512,  1.2986],
            [-0.8411,  0.4744,  0.2000, -0.5729, -1.1958,  1.6071, -0.4927, -0.8338],
            [-1.2744, -1.0203, -0.6227,  0.1570, -1.2393, -0.2914,  0.4431, -0.0290],
            [-0.6067,  0.5388, -0.5320,  0.8140,  0.1921, -0.4433,  0.6652, -1.0917],
            [ 0.9024, -0.8299,  0.5134, -1.0014,  1.1709,  0.8239,  1.1562, -1.1941],
            [ 1.2464, -0.4042, -1.8990, -0.1858,  1.6838, -0.0952,  0.6694, -0.5365]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6834, -0.6295, -2.5411],
            [-0.0677, -1.4332, -0.0778],
            [-1.3569,  0.2667, -0.7408]], requires_grad=True), Parameter containing:
    tensor([[0.6220]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.0872, -3.6340,  3.2270, -0.8763,  2.9671, -4.3790, -2.2175,  1.0646],
            [-2.9001, -1.5970, -0.7080, -2.3072, -6.0901, -1.0988, -0.4494,  0.9328],
            [-2.1512,  1.4602, -2.8601, -2.9845, -0.8567, -3.7096, -4.0875,  2.4489],
            [ 1.9384,  5.7545, -3.4522, -1.2315, -2.6801,  0.7602,  2.3692,  2.7555],
            [-1.1745, -0.9635,  3.3622, -6.5446,  2.5452,  1.1723,  0.4993,  3.6395],
            [ 2.1818, -3.1004, -1.3218,  6.0611,  2.7351, -2.9304,  6.7514,  1.0292],
            [ 2.6816, -0.6312,  3.8527, -3.0193, -6.3450,  3.3313,  1.5267, -0.2844],
            [ 5.7730, -1.2626, -1.2307, -0.4673,  1.8368,  3.5105,  1.3571, -1.6719]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.6605,  2.4337,  0.1083, -5.6064,  1.8858, -3.3509,  2.5925,  3.1680,
             -3.5705,  2.4680],
            [-0.2289,  1.0576, -2.1698,  2.2262, -0.3715,  2.0520,  2.1236, -6.4247,
             -5.8397, -0.0830],
            [ 1.0800, -1.9151,  3.9140, -7.1416,  0.4397, -1.8647, -2.9892,  4.1563,
             -1.5268, -0.0104],
            [ 1.2647,  0.4160, -3.6137, -0.1692, -3.6562,  0.3100, -6.6291,  2.4663,
              0.0702, -5.3256],
            [ 0.9784, -3.2281, -2.9804, -5.8461,  2.5033, -1.5012, -0.4669,  2.4393,
             -3.2700, -2.0761],
            [-1.9704, -0.6004, -0.6470,  2.7723, -5.6062,  4.5530, -3.4495, -8.7717,
              1.7760,  1.4385],
            [-1.2932,  0.6121,  2.9472, -4.6657,  0.3837, -3.2793, -2.7217, -6.1212,
              3.8183,  4.1474],
            [ 0.4252,  1.5743,  0.7725,  5.1585, -1.2070, -3.2310,  0.6863,  3.5422,
             -1.8991,  1.9809],
            [ 0.6994,  0.8229,  1.3215,  0.2368, -0.1651, -2.4891,  3.5025, -1.2376,
              0.1751,  1.3563],
            [ 1.6565,  0.8201,  2.3868, -0.5118,  1.4891,  1.7259, -2.6308,  2.2101,
             -1.4154,  0.2799]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.504 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
