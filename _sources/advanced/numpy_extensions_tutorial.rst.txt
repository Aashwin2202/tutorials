.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.1759,  1.6492,  2.5305,  5.0326, 14.7257],
            [ 4.0698,  6.1818,  5.8282,  8.2491,  6.4554],
            [ 7.4373,  1.7428, 12.1345,  2.0718, 15.9490],
            [ 4.5764,  2.2850,  6.5353,  9.0540,  6.2253],
            [15.7067,  2.3475,  7.1236,  1.3713,  4.0053],
            [ 4.5764,  1.8771,  8.4169,  1.5672,  6.2253],
            [ 7.4373, 15.1930,  7.4546,  5.2081, 15.9490],
            [ 4.0698,  5.6893,  3.2246,  1.2975,  6.4554]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5212, -0.0240, -1.0497,  0.5671,  0.2098, -0.2790, -0.1602,  0.3224],
            [ 0.0325,  1.4773,  1.9189, -0.1937, -1.4024,  0.1150,  0.4873, -1.1514],
            [ 0.0109, -0.8097,  1.0715,  0.7323,  1.2112, -0.2759, -1.1132,  0.0354],
            [ 1.0411, -1.4002,  0.9631,  0.6560,  0.9122,  0.2776,  1.0060,  0.4027],
            [-0.4079, -1.0580,  0.1529, -0.6091, -1.6461,  0.3921,  0.1589,  0.9304],
            [-0.7393,  1.6219,  0.3048, -0.8108,  0.2032,  0.3631, -0.2516,  0.5435],
            [ 0.1872, -1.0271,  0.1961, -1.0574,  1.0449, -0.6974,  0.6600, -1.4551],
            [ 1.4381, -1.0413,  1.1566, -0.3237,  2.2269,  0.4125,  1.6060,  0.5894]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0145,  2.0174,  0.1407],
            [ 0.0607, -0.1749, -2.1801],
            [-2.3639, -0.4717,  0.5883]], requires_grad=True), Parameter containing:
    tensor([[-1.3135]], requires_grad=True)]
    Output from the convolution:  tensor([[-8.0109e+00,  5.5308e+00, -1.7798e-01, -1.4244e+00,  3.0928e+00,
             -5.2326e+00, -6.4702e+00, -5.0450e+00],
            [-9.2594e+00,  6.0528e+00, -6.2953e+00,  1.6268e+00, -5.6856e+00,
             -6.6289e+00, -2.4775e+00,  1.5067e+00],
            [-2.4127e+00, -6.8409e+00, -2.1614e+00, -3.6933e+00,  1.1551e+00,
              2.1140e+00,  5.9232e+00, -5.1497e-01],
            [-1.9880e+00,  5.1172e-01, -6.9909e-01, -3.2885e+00,  4.6663e+00,
             -4.4006e+00, -1.7137e+00,  1.6138e+00],
            [-3.7988e-01, -8.9702e-01,  3.4412e+00, -2.1801e+00,  1.3956e+00,
             -4.0146e+00, -5.7390e-01, -2.1023e+00],
            [ 2.7531e+00,  5.2497e+00, -1.3638e-03, -2.8667e+00,  2.2813e+00,
              2.3109e+00, -9.1221e+00,  4.4612e+00],
            [-2.1249e+00, -1.3843e+00,  1.8803e+00, -2.6226e+00, -3.5150e+00,
              5.2681e+00, -8.1795e+00,  1.9325e-01],
            [-1.8876e+00, -8.9876e-01, -3.3689e-01, -2.1031e-01, -9.1701e+00,
              4.4752e-02, -1.6676e+00,  1.5481e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  0.2879,  -1.2975,   2.3815,  -1.0038,  -1.9758,   0.6593,  -2.0197,
               0.7230,   3.0957,   0.2049],
            [  0.3951,  -0.9988,   0.5333,   0.5917,  -1.1813,   1.8804,   2.1297,
               3.3647,  -1.4195,  -3.0991],
            [  0.5502,  -2.1364,   3.2320,   4.8067,  -2.8646,   4.8440,  -3.3224,
              -8.8356,  -1.5884,  -0.2102],
            [ -0.1086,  -0.8347,   3.7062,   0.3475,  -3.3201,  -1.8340,  -8.9476,
              -1.5683,  -0.0718,  -1.3722],
            [ -0.2736,  -0.6789,  -9.3220,  -2.3249,  -3.3750,  -2.0673,  -3.3343,
               5.3425,  -0.8216,   0.8579],
            [ -4.9386,  -2.5428,   1.1576,   2.4568,  -4.8990,   2.0633,   0.3823,
              -1.7356,  -3.9209,  -0.0812],
            [  1.4526,  -1.7184,  -3.1973, -10.2798,   0.5532,  -2.2861,  -5.6193,
              -2.5148,   3.1015,  -0.4650],
            [ -6.2338,  -2.8378,   7.0879,  -5.8326,   6.4079,  -2.3515,  -0.1754,
              -0.6891,  -2.5848,  -1.0524],
            [  3.6920,  -1.3818,   4.3106,  -3.5690,   2.1696,  -2.1330,  -4.4468,
               0.8931,   0.8379,   0.9935],
            [ -1.0576,  -2.5527,   3.6255,  -1.4120,  -4.3028,   2.6476,   1.8773,
               0.2477,  -0.0211,  -0.1840]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.505 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
