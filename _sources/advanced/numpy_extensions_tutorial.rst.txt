.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.6144,  7.3246,  2.8590,  7.8812,  4.1836],
            [ 1.4036,  3.1696, 12.9811,  8.5340,  4.2992],
            [ 9.2739,  8.0442, 10.6200,  8.0999,  8.0107],
            [ 6.3416, 12.0557, 10.0535, 13.6710, 14.4268],
            [ 8.4735,  8.0332, 11.7309,  9.1036,  5.4177],
            [ 6.3416,  5.2469, 10.9620,  4.1808, 14.4268],
            [ 9.2739,  9.9596,  3.8415,  6.5808,  8.0107],
            [ 1.4036,  3.2745, 12.0939,  0.5656,  4.2992]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.5157,  0.4339, -0.7084,  1.1200, -0.7150,  1.7322, -0.7393,  0.8644],
            [-2.2878,  0.4112,  0.7530, -0.2124,  0.0571,  0.5634,  1.2259, -0.9879],
            [ 0.2936, -0.1678, -0.8603, -1.2759,  0.3751,  1.0868, -1.3728, -1.5383],
            [-0.8419, -0.1784,  0.5569,  0.9936,  0.5828,  1.0036,  2.0650,  0.3433],
            [ 0.8694,  0.8670,  0.0078, -0.5308, -0.6977, -1.2797,  1.4248, -0.4733],
            [ 1.2378, -0.8214, -2.2526,  2.2164, -0.1081,  0.9987, -0.2552, -0.1187],
            [-0.6638, -0.6870,  0.3669,  0.2904,  0.9305,  0.7924, -2.3917,  0.2015],
            [ 2.0696, -1.4388, -0.5815,  0.5911, -0.1243, -1.4687,  1.4838,  1.0685]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.6528,  1.4704,  0.7509],
            [ 1.8681, -0.7656,  1.4141],
            [-0.7086,  0.9784,  1.1323]], requires_grad=True), Parameter containing:
    tensor([[0.1488]], requires_grad=True)]
    Output from the convolution:  tensor([[ 3.2485, -2.9623,  6.4586,  5.2518,  1.8457,  0.4792, -2.8648, -4.8557],
            [-1.8807,  6.3514, -0.7756, -0.3416, -0.7769, -5.3516,  1.6502, -0.7753],
            [ 3.9654,  2.2954,  1.5141,  0.5831,  4.8670,  0.6389, -1.6212, -2.7242],
            [ 4.5922, -2.6270,  3.0315,  2.6470, -0.9075, -2.7280, -0.1535, -4.7380],
            [-2.2431,  5.0571,  1.3955,  1.3015,  1.7995,  5.2866, -2.8164,  1.5357],
            [ 6.6486, -0.0859, -1.4427,  2.1122,  1.9872, -4.1532,  1.9229,  1.1077],
            [-2.8457, -2.3543,  6.7689,  1.6552, -1.8225,  1.6444, -0.8411, -0.5496],
            [-0.3943,  1.7759,  0.5230,  2.4150, -3.2646,  0.9938, -1.4157, -5.7626]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.1072,  1.8044, -2.7308, -5.8302, -1.6747,  1.2183,  1.0903,  0.5457,
              0.5632,  0.3970],
            [ 3.3792, -1.6894, -1.1438,  4.4499, -4.5208,  4.3478,  0.7857,  1.4323,
             -2.8223,  0.1903],
            [ 0.0830,  7.2626,  5.0343,  1.4258, -2.6582,  5.0397, -3.8447,  1.4207,
             -0.6881, -0.1226],
            [ 1.1602, -1.9536,  4.3043,  0.9477,  0.9558, -3.9018,  0.1625,  1.1724,
             -2.6331, -0.0227],
            [-1.9705,  1.0341, -1.6904,  0.7609, -1.8108, -0.3712, -2.4201, -3.1127,
             -0.4783,  0.4493],
            [ 1.2432, -4.0341,  0.5401, -5.6774,  3.9459, -5.3053,  0.7531, -5.7284,
              0.8200, -0.7780],
            [-1.0937,  3.1654, -2.4269,  4.5920, -0.3094,  3.7437, -2.0797, -1.0049,
             -0.1949, -1.3244],
            [ 2.6089, -0.1784,  0.9579, -1.2456, -0.4407,  1.2016,  2.9572, -2.3092,
             -1.8025, -1.6693],
            [ 0.7495, -1.3547,  1.1306, -1.6616,  1.6403,  1.2788,  1.2844, -3.1264,
              1.6785, -2.0248],
            [-0.5216,  1.2703,  0.6071, -1.2350, -1.6973, -0.0081,  0.0791,  0.9495,
             -0.8961, -1.4383]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.532 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
