.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 0.4370,  1.7317,  5.8650,  4.4766,  6.6690],
            [ 1.6678,  6.9662,  3.7642,  2.8074,  4.5520],
            [10.2473, 15.3194,  3.4496,  6.2488,  7.3514],
            [ 4.7294,  7.3720,  2.6220,  6.6249,  6.3442],
            [ 5.2698,  1.1496,  4.1763,  6.3546,  6.8542],
            [ 4.7294, 11.6138,  7.7901,  5.3161,  6.3442],
            [10.2473,  8.4797,  5.3277,  1.3188,  7.3514],
            [ 1.6678,  2.8686,  4.5318,  9.7199,  4.5520]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.9755e-01, -3.3487e-01, -1.9745e-01,  1.0136e+00,  9.0289e-01,
             -6.4787e-01, -4.7385e-02,  2.6545e-01],
            [ 8.3654e-02, -9.1958e-01, -1.5673e+00, -1.8288e+00, -2.2464e-01,
              3.6381e-01, -5.6142e-01,  2.3525e-01],
            [ 1.1897e+00, -1.0609e+00,  1.3493e+00, -7.6968e-02, -7.9390e-01,
              2.1729e-01, -3.4008e-01,  7.0310e-01],
            [ 2.0638e-01, -8.3748e-01,  9.5130e-01,  1.4170e+00,  1.5448e+00,
             -4.6709e-02, -2.8042e-01, -1.5558e-01],
            [ 7.4269e-01,  3.6379e-02,  1.4893e+00, -5.7301e-01, -2.5069e-01,
             -6.9978e-01, -1.6392e-01, -1.3712e+00],
            [-8.5844e-02,  9.4843e-01, -8.2948e-01, -3.4989e-01, -1.5362e+00,
             -5.4170e-01, -2.3650e-01,  6.5253e-01],
            [ 2.9079e-01, -9.9680e-01, -1.2293e+00,  3.7651e-01,  4.7193e-02,
              5.7909e-01,  1.7974e+00,  3.9729e-01],
            [-1.0313e-03,  5.6729e-02,  1.1100e+00, -2.8945e-01,  7.7778e-01,
             -5.9525e-01, -8.2409e-01,  5.1033e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.0721, -0.1302,  0.6088],
            [ 2.2211,  1.6423, -0.7326],
            [-0.2049, -0.3603,  1.2123]], requires_grad=True), Parameter containing:
    tensor([[-0.8189]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.7912, -1.8941, -4.6393, -2.9801, -1.5448, -7.3436,  0.0822, -1.4551],
            [ 0.7373,  3.0156,  5.3195, -1.1127,  1.1880, -0.9233, -0.6238, -5.4834],
            [ 2.2231,  5.5918, -2.2489, -6.9735, -1.7318,  4.4038, -0.2217, -0.2753],
            [-4.2370, -0.1777, -1.4844,  0.5294, -2.6941, -5.8908,  2.8155, -2.0324],
            [-4.4983, -2.3307, -5.2270,  0.4094,  0.8304, -4.4660, -1.1691,  0.9556],
            [-0.9406, -5.6847,  0.0603,  1.7009, -2.8478, -0.2530, -0.2644, -1.8709],
            [-1.8239,  4.2917, -3.9226, -1.6587,  2.3328, -0.4816, -8.3194, -2.3814],
            [-2.4448,  1.9725,  0.1882,  2.3159,  4.5063, -2.6141,  0.9882, -0.8633]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.2966, -1.0713, -0.8433, -0.5609,  1.0107, -0.3008,  1.9710, -1.9117,
              0.8473, -0.9740],
            [-0.3296, -1.9877, -2.6564, -0.8253,  4.4540,  2.6758,  3.6831, -1.4102,
             -2.0795,  1.1811],
            [ 1.4487,  2.6983,  1.1609, -0.1540, -2.7851,  2.7062,  7.7076,  0.8084,
              0.5522, -2.5552],
            [ 1.3227,  0.8233, -3.0879,  2.7276,  2.8020, -4.6039, -0.5820, -1.7762,
              1.5809, -0.0819],
            [-0.5913, -3.3701, -0.4497,  2.8895,  0.4521,  1.9661,  2.5974, -3.4141,
             -2.5416, -0.4199],
            [-0.2278, -0.9105, -1.1719, -0.3574,  1.5207,  2.9502,  0.2036, -1.7446,
              1.5774, -1.4431],
            [-0.5776, -1.1953, -1.3266,  3.4296, 11.4060,  0.2108, -1.9455,  0.1245,
             -1.6023, -1.1513],
            [ 2.4275,  2.8213,  0.0975, -2.0487,  4.6776,  6.6734, -2.3476, -5.6447,
             -0.8264,  1.3178],
            [ 1.7615,  0.4639, -0.5559,  1.9426, -0.0576, -0.3341,  3.3151,  2.2283,
             -0.1211, -2.1334],
            [-0.1744, -0.2573,  1.1270, -0.3393, -0.1963,  0.2268,  0.1998,  0.2627,
             -0.5549,  0.9285]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.465 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
