.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.4281, 14.3986,  9.7718,  0.6526,  8.3152],
            [ 9.6343, 11.3799,  7.3604, 10.1518, 10.7607],
            [ 6.6774,  4.6860,  5.4921,  4.5200,  9.1512],
            [ 9.0574, 12.2131,  8.0996,  2.8687, 13.7019],
            [ 4.3478,  9.8083,  1.8696,  5.5330,  2.2759],
            [ 9.0574, 15.1010,  0.2596,  7.9424, 13.7019],
            [ 6.6774, 10.1830, 15.1961,  3.4552,  9.1512],
            [ 9.6343,  5.0592,  7.9274,  5.0849, 10.7607]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.3580, -0.3055,  0.4081, -0.8890,  2.4065, -0.5968,  0.6169, -0.8237],
            [ 1.2206, -2.1942, -0.9226, -0.4421,  1.6448,  0.6775,  1.3328, -0.0453],
            [ 0.9716,  0.5864, -1.0302,  2.0015,  0.2310, -0.1158, -0.8572, -0.6580],
            [-0.9199, -0.7264,  1.3181, -0.3910,  1.2472,  0.3614,  0.3534, -2.3454],
            [ 0.5415, -0.2176, -1.2327, -1.4515, -1.2574,  1.1118,  2.0100,  0.2286],
            [-1.0554, -1.3105, -0.7864,  0.3221, -0.4876, -0.5512, -0.8845,  1.2065],
            [ 0.3191, -0.4793, -0.9120, -1.3524, -0.6762, -0.3690, -1.3653,  0.1265],
            [ 0.7443,  0.4522, -1.4757, -0.9699,  1.5486,  2.4949,  0.2503,  1.2935]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.7768,  0.5256, -0.0121],
            [ 1.3465,  1.3550, -0.0471],
            [-0.3117,  0.8504, -1.0323]], requires_grad=True), Parameter containing:
    tensor([[-1.2266]], requires_grad=True)]
    Output from the convolution:  tensor([[-3.4004, -2.1465, -3.2489, -1.5703, -0.2734, -3.5425, -2.4229, -5.4230],
            [ 2.1846,  3.5318, -4.3337, -1.5432,  2.8498, -3.1796, -2.2358,  1.1912],
            [ 0.7488, -0.0246, -2.3766, -3.8741, -0.9259, -1.5999, -1.5760, -4.6073],
            [-1.7143, -1.3232, -6.8700, -5.5793, -2.3960,  0.8248, -2.0400, -2.1514],
            [ 1.5880,  2.1525, -1.9702,  1.8140,  0.0369, -2.6850, -3.3365, -2.2327],
            [-4.7546, -0.3197, -5.0813, -4.2329, -2.0152, -2.4804, -3.7061,  2.9937],
            [-3.5869, -1.2074, -3.9284, -1.8704,  0.6139,  1.5951, -3.6521, -0.7249],
            [-1.7166, -0.4524, -1.2770, -3.0500, -4.0186, -1.7491, -0.5663,  1.0493]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-3.7959e-01, -1.5354e+00,  1.6450e+00,  8.5466e-01, -1.8389e+00,
              1.2837e+00, -9.8001e-01,  7.3850e-01, -2.3407e-01,  5.1632e-03],
            [ 7.0168e-01,  2.5243e+00,  2.7332e+00, -1.6506e+00, -1.4529e+00,
              2.6091e+00, -9.1294e-01,  9.2215e-01, -8.8954e-01,  2.6424e-02],
            [-2.7024e+00,  4.2669e+00,  5.0641e+00, -3.7853e+00, -1.4824e+00,
              8.8542e-01, -3.9344e+00,  9.9610e-01, -2.0038e+00,  4.6986e-01],
            [ 3.9517e+00,  2.1147e+00, -1.8506e+00, -2.4234e+00, -4.2715e+00,
              2.9182e+00, -4.5110e+00,  1.3204e+00, -1.9155e-01,  5.3546e-01],
            [-6.2529e-01,  5.5530e+00, -3.6486e+00, -3.3118e+00, -8.9231e-01,
             -4.3121e+00,  2.4167e+00,  5.7334e+00,  1.2704e+00,  2.5444e-01],
            [ 2.0629e+00, -1.2748e+00, -5.0101e+00, -2.0204e-01, -2.4944e+00,
              1.3744e+00,  2.1868e+00,  3.7130e+00, -3.0403e+00, -1.3233e+00],
            [-2.3935e+00, -4.7907e+00, -3.3442e-01,  1.4364e+00, -1.7221e+00,
              8.1717e-01,  1.2236e+00, -1.3981e+00, -3.3356e+00,  9.6502e-01],
            [-1.5116e+00, -1.9953e+00, -4.6903e-01,  3.5895e+00,  1.5864e+00,
              1.1533e+00, -1.4700e+00, -3.0952e+00, -5.6219e-01,  7.9942e-01],
            [ 1.8151e+00,  3.1614e-01,  2.9992e+00,  3.9726e+00,  8.0469e-01,
              4.7351e-01, -9.5310e-01,  3.1553e+00,  1.1369e+00,  8.5917e-01],
            [-3.4737e-01,  1.0176e+00, -1.8577e+00,  1.1930e+00, -2.8299e-01,
             -2.0959e+00,  5.6678e-01,  2.0220e-01,  3.3095e-02, -1.0509e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.489 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
