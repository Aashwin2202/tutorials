.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[10.0143,  4.9020,  2.7777,  0.8498,  8.9435],
            [ 9.3754, 15.1575, 15.5767,  7.8620,  9.0591],
            [ 6.6219,  7.6867,  1.3719,  2.0922, 12.2219],
            [ 5.0679,  6.7477, 10.5305,  0.8238,  1.8731],
            [ 3.7992,  5.1589,  4.6114,  2.4828, 11.7812],
            [ 5.0679,  2.7515,  9.7243,  1.8026,  1.8731],
            [ 6.6219,  0.4795,  8.9551,  7.3702, 12.2219],
            [ 9.3754,  1.8698, 10.8789,  6.6836,  9.0591]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1607,  0.5427,  0.1494,  0.9751, -0.3526, -0.7745, -0.5482, -0.1276],
            [ 2.7938,  1.3785, -0.0336, -1.2205,  0.5833, -0.3681,  0.3056, -1.0540],
            [ 1.8954, -1.5181, -0.2728,  0.2705,  0.1559, -1.2666,  1.4636,  1.1952],
            [ 1.1711, -0.2269,  0.0996,  0.7915,  1.5009, -1.0864,  0.3281,  0.9797],
            [ 0.3748,  0.5008, -1.3105, -0.4274, -0.1239,  1.0701, -0.9291,  2.0864],
            [-0.0775, -0.3095,  1.7073, -0.0912,  0.2947,  1.2558,  0.8457,  0.6976],
            [-0.7293,  0.1012,  0.5503, -0.6605, -0.1576,  1.2555,  0.8395, -0.9595],
            [-1.2321,  0.1609,  0.0518, -0.5367,  0.1810, -0.6212,  0.1147, -1.4772]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.0026,  1.4823, -0.6083],
            [-0.7529, -0.1048, -0.2114],
            [-0.1359, -0.7617, -0.2791]], requires_grad=True), Parameter containing:
    tensor([[2.4646]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.1854,  0.5216,  1.6867,  0.3961,  0.1555,  3.7978,  6.7631,  5.0994],
            [ 7.0993,  2.7413,  3.0803,  2.5631,  3.4027,  4.7046,  3.2981,  2.5278],
            [ 1.5661,  3.4779,  2.3849,  5.3488,  0.6023, -1.4073,  1.9513,  2.6785],
            [ 4.2603,  1.9129,  3.3225, -1.0952,  2.2442,  5.1366,  3.2429,  2.2973],
            [ 2.1859,  3.1760,  2.8779,  2.4841,  1.7005,  1.7768,  2.8815,  0.3005],
            [ 0.8788,  1.1746,  3.1154,  0.4674,  0.4635,  1.1802, -2.3324,  5.4429],
            [ 2.3281,  0.6243,  3.9895,  1.6256, -1.7736,  3.4878,  4.5792,  5.3085],
            [ 6.3859,  2.0092,  1.3797,  3.5528,  6.7365,  3.3436,  5.6111,  3.2030]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1921, -0.2499, -1.2548,  0.3564,  1.2872, -0.6958, -2.6881, -1.5913,
              0.9079, -0.0214],
            [-0.3326,  1.9924,  2.6419, -3.1238, -1.3174,  2.5702,  3.6690,  1.0563,
              3.3079, -1.2195],
            [ 0.2081, -0.9323,  2.1666,  1.9954, -1.0158, -2.2335,  0.3543, -2.0910,
             -0.3739, -0.0562],
            [ 2.4791,  3.5819, -2.9624,  2.0422,  4.3359,  0.1657, -0.0156, -0.7235,
             -0.9104, -0.5381],
            [-0.6579, -0.1079, -5.7287, -4.4454,  0.1670, -0.4172,  0.0320,  1.4498,
              1.8299, -0.3902],
            [-2.0310, -1.6287,  2.6620, -0.2035, -4.3254, -0.0551, -1.4843, -0.2761,
             -1.1428,  0.0540],
            [-0.0495, -2.9818, -1.8151,  4.1574,  2.2563, -1.0836, -2.0003, -0.9726,
             -0.1150, -0.1314],
            [-0.4090, -0.2551,  0.1826, -0.4434,  2.8472,  0.9367, -2.0855, -1.6393,
             -0.6537,  0.8287],
            [ 0.6941,  0.9465,  1.1924,  0.1989, -1.8682,  0.5189,  1.2066,  2.1537,
              0.6173,  0.2451],
            [ 0.1144,  0.7053,  0.5669, -0.0834, -0.5864, -0.9195,  0.6308,  1.1663,
              1.1253,  0.3183]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.461 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
