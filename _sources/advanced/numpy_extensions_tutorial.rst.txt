.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.3131,  1.2942,  8.6992,  6.7195,  3.0053],
            [ 9.0043,  7.1407,  8.6228, 11.6116, 11.1686],
            [ 2.3618, 17.2805, 12.1727,  9.1650,  5.0000],
            [11.8054,  5.5014, 11.8769,  4.9900,  5.5812],
            [ 5.6143, 15.3605,  6.9362,  4.1605,  1.0429],
            [11.8054,  7.7894, 16.9931,  6.1694,  5.5812],
            [ 2.3618,  6.4293,  1.1999, 15.5509,  5.0000],
            [ 9.0043, 10.4129,  9.9376,  9.6825, 11.1686]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-9.7617e-01, -8.7189e-01, -1.0311e-01, -6.3344e-01, -1.8149e+00,
              1.3160e+00,  7.5996e-01,  3.0535e+00],
            [ 1.5183e-01, -8.0964e-01, -1.2032e+00, -1.1087e+00,  1.6954e+00,
              6.5729e-01, -3.3528e+00,  1.6756e+00],
            [ 4.0329e-01, -1.9348e+00, -2.5128e-01,  2.5689e-01,  8.8413e-01,
              5.1890e-01, -8.6493e-01,  1.1510e+00],
            [-8.0905e-01, -3.0837e-01,  1.7379e-01,  8.7994e-01, -3.3542e-01,
             -2.3865e+00,  1.4261e-03, -1.2559e-01],
            [ 1.7645e+00,  1.0821e+00, -4.2616e-01, -2.1482e+00, -5.7239e-01,
             -9.2133e-01,  1.2245e-01, -3.4335e-01],
            [-1.1139e-01, -3.5325e-01,  2.3249e+00,  1.7043e+00,  8.8789e-01,
              1.6829e+00, -3.9109e-01, -2.9265e-01],
            [-4.9791e-01, -8.9706e-01,  5.6030e-02,  1.6851e+00, -6.3450e-01,
             -8.8465e-01,  8.3509e-01, -7.6355e-01],
            [ 9.2943e-01,  1.9341e+00,  4.3025e-01,  9.0370e-01,  6.4412e-01,
             -4.6214e-01, -6.6255e-02, -5.9703e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.5641,  2.1777,  0.9766],
            [ 0.6625, -1.2151, -0.3146],
            [ 1.3404,  0.0214, -0.6268]], requires_grad=True), Parameter containing:
    tensor([[-0.3315]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.9488, -1.5776, -0.1417, -3.8671,  1.0741,  0.5749,  3.4692,  3.9510],
            [ 0.2710, -4.8261, -0.9326,  2.8551, -2.7398,  5.0780,  4.0786,  4.3094],
            [ 2.5104,  0.1244, -2.7878,  3.8086,  2.1489, -1.8063,  3.4800, -0.9273],
            [-5.9121,  1.1974, -3.7753, -5.1529,  2.0943,  4.9646, -6.0572, -2.5133],
            [ 0.9186, -3.7800, -1.0407,  2.4328,  0.2215, -4.2594, -1.8471, -3.4521],
            [ 1.5331, -3.0656, -0.5628,  3.1823,  1.3294, -2.4060, -0.8205,  4.6454],
            [ 0.0616,  0.9137,  5.1202, -1.9426, -2.3798,  0.7946, -4.9948,  1.1784],
            [ 1.4815,  0.9183, -1.1004,  2.2726, -2.0721, -6.2727,  2.3015, -0.2555]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.1380, -1.5587,  4.1168, -0.0397,  0.2798,  0.9330,  0.6641,  2.1119,
              2.1383,  0.5509],
            [-1.0249,  5.5087, -2.4603, -5.3069, -2.9573,  0.7793, -0.2801,  3.1419,
              0.9738, -0.1038],
            [ 0.9987, -0.9485, -4.1210,  3.7978,  1.9171,  0.1504,  1.9103, -2.6922,
             -2.4987, -0.7537],
            [ 1.5971, -1.0673, -2.3731, -1.0330,  5.6143,  1.7084,  2.2036, -1.4434,
              0.1623,  0.6615],
            [-1.1035,  0.4977,  1.9055,  0.8864, -1.7295, -1.5422, -1.9114, -0.5417,
             -3.1136, -0.9130],
            [ 0.8562, -0.5829, -4.6488,  0.7859,  0.8499, -4.2833, -3.0185,  0.1751,
              3.7767,  0.8480],
            [-0.2427,  3.0244,  5.1851,  0.3497,  0.0096,  1.9097, -2.8910,  2.0633,
              4.3129,  1.7727],
            [ 0.8895, -5.0724,  3.9885,  1.8997, -6.0355, -5.8496,  7.4398,  1.5530,
             -0.3225, -0.0272],
            [ 3.1446,  1.0488, -3.7178, -0.0841,  1.0189,  1.6964, -0.2934,  2.9139,
             -2.2838, -1.2594],
            [ 0.5917,  2.1979, -1.1689, -2.8537, -0.9249,  3.9871,  0.2447, -0.0764,
              0.2223, -0.6583]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.465 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
