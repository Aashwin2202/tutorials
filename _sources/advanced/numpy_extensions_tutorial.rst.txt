.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.2314,  9.1831,  2.1246, 10.0140,  7.2513],
            [ 4.0917, 11.1894,  4.6518,  6.3897,  4.8942],
            [ 6.8368, 17.0527,  2.8100,  9.9335, 14.8965],
            [ 4.7076,  8.0320,  0.0838,  8.2818,  1.1825],
            [ 3.2047,  9.4732, 16.1951,  5.2377,  3.7192],
            [ 4.7076,  8.4401,  7.0314,  6.2217,  1.1825],
            [ 6.8368,  5.3051,  5.2401,  8.0871, 14.8965],
            [ 4.0917, 11.5764,  8.0784,  6.1908,  4.8942]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 1.3913e-01,  2.3466e-01,  1.1473e+00, -1.2179e-01, -4.5924e-01,
             -8.1036e-02,  2.5969e-01, -1.2684e+00],
            [-3.7626e-01,  1.1148e-01, -1.1697e+00,  3.8579e-01,  1.0945e+00,
              6.3299e-01, -3.7067e-01,  4.6725e-01],
            [-3.2525e+00,  2.0507e-01,  1.8926e+00,  8.4208e-01,  1.4657e+00,
              2.1221e+00, -5.9916e-01, -6.6298e-01],
            [-8.3960e-01, -1.3757e-01,  1.9018e+00, -3.9070e-01,  5.1825e-01,
             -2.0735e+00, -1.5090e+00,  1.0454e+00],
            [-9.0954e-01, -5.3636e-01,  2.5405e-01, -4.5692e-01,  4.5139e-02,
             -1.4084e+00,  8.1751e-01, -8.7871e-01],
            [ 1.6421e+00,  6.1032e-02, -9.8592e-01, -3.5400e-01, -1.3181e+00,
              1.5766e+00, -2.9438e-03,  1.6405e+00],
            [-1.2878e+00,  1.4419e+00,  8.8355e-02,  2.0648e-01, -4.4621e-01,
              2.9593e-01, -2.8135e-01,  7.0605e-01],
            [ 4.5458e-01,  1.2500e-01,  1.8199e-01,  6.3297e-01,  1.3192e+00,
              2.6458e-01, -1.9237e+00,  1.1378e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 0.3485,  1.9267,  0.3262],
            [ 0.2019,  0.3489, -0.7563],
            [ 0.1180,  0.9833, -0.1991]], requires_grad=True), Parameter containing:
    tensor([[0.8257]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.2467, -0.3265, -1.5384,  0.5192,  2.9074,  3.0881, -0.3505,  1.7209],
            [ 1.7882, -0.8924, -0.4247,  0.8863, -0.2229, -0.2100, -0.3107,  0.3634],
            [-1.9130,  0.8093, -0.7262,  1.0873,  3.1703,  3.3855,  2.2773, -1.4279],
            [ 0.7630,  2.4591,  2.1111,  0.6660,  1.3572, -0.9223,  0.6663, -1.3800],
            [ 1.5261,  2.3056, -1.2628, -2.2667,  1.0950,  0.9803,  0.8267, -4.1173],
            [-2.8038,  2.7579,  0.8843, -1.9414, -0.2343,  0.0228, -1.8874,  2.6005],
            [-0.5863,  1.4908,  0.4357, -1.6707,  0.9272,  0.3893, -3.6147,  0.2010],
            [ 0.5743, -0.9478,  0.2581, -0.2584,  0.5254,  1.1687,  1.0344,  2.5663]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-2.3408e-01, -1.3310e+00, -7.9791e-01, -2.2506e+00, -1.0959e+00,
             -8.0626e-02, -1.1778e+00, -1.0394e+00, -3.9369e+00, -6.6295e-01],
            [ 8.9726e-02,  9.5960e-01,  2.8177e-01, -4.8093e-01,  3.7340e-01,
             -1.8978e+00, -1.5298e+00,  4.3554e-01,  8.9050e-01,  1.7912e+00],
            [ 5.2075e-02, -4.7293e-01, -6.4669e-01, -1.3866e+00, -3.1346e+00,
              2.0616e+00,  1.8065e+00, -1.6877e+00, -2.1534e+00, -1.7249e-01],
            [ 1.4430e-01,  1.2471e+00,  1.5843e+00,  1.1607e+00, -3.5562e+00,
             -4.9876e-01,  7.1981e-01, -3.0105e+00, -2.9812e-01, -4.5328e-01],
            [ 2.9183e-04, -7.1969e-01, -4.3170e+00, -4.3031e+00, -1.6542e+00,
              5.1119e+00,  7.9580e-01, -5.7665e+00,  2.4961e+00,  9.7196e-01],
            [-3.5765e-01, -1.9417e+00,  4.4821e-01,  4.9820e-01, -1.6629e+00,
             -1.6786e+00, -5.9984e-01, -2.4755e+00, -1.5060e+00, -1.0889e+00],
            [-6.2051e-01, -2.5767e+00, -2.7137e-01, -8.0564e-01,  8.2624e-01,
              2.9062e+00,  1.0385e+00, -2.6215e+00, -2.9954e-01,  5.9371e-01],
            [ 4.2047e-01,  2.8425e+00,  1.9903e+00,  1.2807e+00, -2.6840e+00,
              5.0924e-01,  2.6543e+00,  2.2098e+00,  5.2632e-01,  8.7315e-01],
            [ 3.1259e-01, -4.0875e-01, -6.5670e-01,  1.2143e+00, -2.1735e+00,
              2.2583e+00,  1.2590e+00, -1.4634e+00, -1.1611e+00, -3.3534e-01],
            [ 2.6175e-01,  2.1062e+00, -8.8500e-01,  1.5571e+00, -1.4264e+00,
              3.0119e-01,  1.7684e+00,  9.7042e-01,  3.3169e-01, -1.1734e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.466 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
