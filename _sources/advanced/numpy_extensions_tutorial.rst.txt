.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.9251, 10.9433,  7.4352,  2.5976,  2.0708],
            [ 2.3791,  8.4622,  6.0583,  7.1094,  4.8919],
            [ 4.6368,  6.8877,  6.3169, 12.8678, 10.7621],
            [ 7.4151,  2.0796,  1.0194,  8.4174,  5.0207],
            [ 8.8961,  0.4017,  4.4505, 12.9662,  5.6792],
            [ 7.4151,  9.4527,  7.7742,  4.3984,  5.0207],
            [ 4.6368,  8.7041,  9.3171,  5.4848, 10.7621],
            [ 2.3791,  7.8812,  7.3558,  7.2128,  4.8919]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.0389, -2.1628, -0.1926, -0.1060, -0.9847, -0.1459, -0.5270,  1.2592],
            [-0.2426,  0.6894,  0.5254,  0.4809,  1.2546,  0.1793, -1.1074,  0.1681],
            [-0.8137, -0.1390,  1.1461,  1.6987,  1.4418,  1.8459, -2.2688, -0.4771],
            [-0.2972,  0.4585, -0.6134,  0.3497,  1.1203, -0.8335,  0.6775, -1.0970],
            [ 0.3916,  0.2361, -0.3162, -0.2742,  0.6220, -0.7127,  0.6952, -1.5253],
            [ 0.9246,  0.2393, -0.5142,  0.3620,  0.1214,  0.8365, -0.1412, -0.4544],
            [ 0.5648,  0.2010, -0.1589, -0.8467,  0.4382,  0.2822, -2.3939,  0.2760],
            [-0.6737,  0.8099,  0.9838,  0.3154,  1.1079, -1.0981,  1.7669, -0.3884]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4195,  0.4846,  0.3959],
            [ 0.3255,  1.4660, -1.2346],
            [ 0.1967,  1.8149,  1.8077]], requires_grad=True), Parameter containing:
    tensor([[-1.0322]], requires_grad=True)]
    Output from the convolution:  tensor([[  2.9855,   0.8369,   6.7064,   0.6991,   3.9983,  -5.2025,   1.0185,
               0.1216],
            [ -1.6813,  -0.5377,   3.2245,   3.0669,  -0.8508,   3.7828,  -1.1026,
               1.6674],
            [ -0.0765,  -0.2159,  -2.8349,   2.0033,  -4.7634,  -5.6933,  -0.6970,
              -4.8390],
            [ -4.1014,   2.3373,  -3.8652,  -2.3009,  -0.4136,  -5.0564,   0.2491,
              -5.8082],
            [ -7.7994,   0.3647,   4.9203,  -2.2084,  -0.0435,  -3.5921,   3.4513,
              -1.9961],
            [  2.6228,  -6.4782,  -6.5790,   1.2933,  -2.7982,  -5.7410,  -5.5029,
              -1.1624],
            [ -2.4816,  -0.0654,   4.2810,  -0.9361,   0.7646,   2.1348,  -0.3396,
               4.7070],
            [ -1.9619, -10.2769,  -5.9135,  -0.0443,  -1.9120,  -5.8177,  -1.1292,
               4.0224]], grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[  0.1558,   0.4292,  -1.4538,   0.0347,  -0.2722,   0.8808,   1.4062,
               0.0313,  -0.1403,   0.0272],
            [  0.0417,  -0.8064,  -1.7985,   3.7010,  -0.0652,   2.7123,  -3.5652,
              -1.2399,   0.2979,  -0.5426],
            [ -0.2204,  -2.1678,  -2.7100,   0.2384,   1.6135,   2.8459,   5.2312,
               1.9878,  -3.4904,   1.2285],
            [  0.2849,  -0.5319,  -2.4910,  -6.3403,   2.5016,  -4.6810, -10.9238,
              -0.4661,  -0.6538,  -0.2458],
            [ -1.0312,   0.6582,   0.5509,  -2.3738,  -3.4793,   1.1062,  -3.7854,
               0.0216,   0.6040,  -4.0518],
            [ -0.3572,   0.8229,  -8.4123,   0.0858,   0.4354,   2.5636,  -9.6334,
               4.6757,   4.5985,   3.8530],
            [  0.5835,   6.2856,  -1.6429,  -6.9560,  -4.5635,   4.7340,   3.3056,
               0.8670,   2.3528,  -0.0544],
            [  0.4191,   5.5803,   3.5350,  -0.1096,  -0.9576,  -0.4944,  -1.7013,
              -0.5467,   4.5208,   0.3519],
            [  0.3891,   2.4715,   0.3047,  -0.0486,  -2.2864,   0.6711,   2.4900,
              -1.5951,   1.1397,  -0.2911],
            [  0.1227,   1.0169,   0.1125,  -0.5739,   0.7058,   0.2716,   0.6851,
               0.6911,   1.6080,   1.8964]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.531 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
