.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[18.0044,  2.0648,  3.0139,  7.6725,  5.9344],
            [ 9.0479,  9.3287,  8.8953,  5.2908,  1.4740],
            [ 4.6607,  1.5502,  8.7731,  2.5195,  6.6692],
            [ 6.5781,  0.6219, 17.0310,  8.7787,  5.6200],
            [ 0.1840,  4.5276,  9.6625, 10.2878,  8.1229],
            [ 6.5781,  5.7468,  5.4974,  9.3989,  5.6200],
            [ 4.6607, 10.3878, 11.0214,  8.6327,  6.6692],
            [ 9.0479,  6.7136,  9.4474,  6.9880,  1.4740]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 2.5492e+00, -3.8051e-01,  7.7370e-02,  1.7755e-01, -4.5803e-01,
              2.4357e+00,  2.9191e-01,  5.8343e-01],
            [-8.3901e-02,  1.8368e+00,  6.2749e-01,  3.2724e-01, -8.2206e-01,
             -1.3347e-01,  2.7182e+00, -9.6116e-01],
            [-2.6155e-01,  7.6088e-01,  6.0205e-01, -1.5459e-01,  1.0506e+00,
              1.4110e+00, -2.7985e-01, -4.8546e-01],
            [-1.3896e+00, -8.9434e-01,  1.1051e+00,  2.9181e+00, -1.4881e-01,
              1.1102e+00,  1.1031e+00,  1.2928e+00],
            [ 1.6264e-01,  6.9087e-01, -6.1227e-02, -7.6258e-01,  1.1135e+00,
              6.4625e-01,  6.4503e-01, -8.3384e-01],
            [ 1.1508e+00,  6.5427e-01, -1.2471e+00,  3.2399e-01,  7.0355e-01,
              3.9900e-01, -1.0130e+00, -3.2362e-03],
            [ 2.4359e-01,  2.8005e-03,  4.3558e-01, -9.7782e-02, -6.5440e-01,
             -9.1569e-01, -3.6226e-01,  9.2194e-01],
            [ 6.4879e-02,  8.4463e-02, -7.8604e-01,  1.6969e+00, -6.8944e-01,
             -2.9727e-01, -3.5228e-01, -3.8487e-01]], requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.4015,  1.7649, -0.3642],
            [-0.7711,  0.1513, -0.2637],
            [ 1.1940,  1.6317, -1.4043]], requires_grad=True), Parameter containing:
    tensor([[-0.0693]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.4576e+00, -3.5390e+00,  4.5074e-02,  5.7546e-02, -8.2306e-01,
             -3.2368e+00,  7.6595e-01,  1.7950e+00],
            [ 1.2076e+00, -9.3075e+00,  7.8603e+00, -6.2239e-01,  8.3245e-01,
             -1.6830e+00, -1.4966e+00, -3.7550e-01],
            [ 2.7192e+00, -5.0636e+00,  3.6201e+00, -2.1121e+00, -2.3028e+00,
              2.3498e+00,  6.4213e+00, -7.1047e+00],
            [-3.3464e+00, -2.2340e+00,  8.0059e+00, -1.9493e+00,  6.0901e+00,
             -4.8626e+00,  1.8737e-01, -4.2121e-01],
            [-8.4061e+00,  2.2140e+00,  4.1454e+00, -2.3500e+00, -7.5052e+00,
              1.2290e+00,  4.5765e+00, -7.2111e+00],
            [ 3.8657e+00,  6.7297e+00,  2.8714e-01, -4.4559e-03,  4.9053e+00,
             -3.7070e+00,  2.7785e+00, -3.5803e+00],
            [ 1.2410e-01,  4.4412e-01,  9.9637e-01, -5.9806e+00, -2.5108e+00,
              5.9606e+00, -3.9221e+00, -7.3029e-01],
            [ 4.2136e+00,  3.5769e+00, -2.1972e+00, -3.5248e+00, -2.6737e-02,
              1.5729e+00,  1.8254e+00,  3.0862e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.1560e-01, -6.2281e-01,  2.7316e-01,  8.6420e-01,  2.3015e+00,
             -2.4361e+00,  1.5967e+00,  5.5976e-01, -3.2251e-01,  3.1507e-02],
            [ 5.4064e-01, -1.9266e+00,  5.5595e-01,  4.5953e-01, -2.5150e-01,
              1.1637e+00, -1.5547e+00,  2.5556e-01, -1.2958e+00,  2.7009e-01],
            [ 4.0329e-01, -1.6184e+00,  3.0208e+00,  1.1158e+00,  5.9180e-03,
             -2.4592e+00, -1.0139e-01,  3.0208e+00, -1.8981e-01,  5.1580e-02],
            [ 5.1580e-02, -4.2515e+00,  3.7570e+00,  5.8987e-01,  4.9809e+00,
              2.1177e-02, -4.2182e+00,  1.7145e+00, -1.6874e+00,  7.9852e-01],
            [ 1.0656e+00, -5.1970e-01,  3.1617e+00, -5.8210e+00,  3.8795e+00,
             -5.0540e+00, -1.9570e+00,  5.5343e+00, -4.3712e+00, -2.2760e-01],
            [-1.7257e+00, -5.6134e+00,  3.5518e+00,  4.6247e+00,  2.2131e+00,
             -3.8627e+00,  5.1190e+00,  2.0454e+00, -1.4048e+00,  6.2230e-01],
            [ 7.2690e-01,  7.3131e-01,  1.6120e+00, -3.3807e+00,  5.4802e+00,
             -8.6679e+00, -1.1491e+00, -3.5141e+00, -1.3896e+00,  2.6550e+00],
            [-1.4903e+00, -7.6590e-02,  9.9173e-01,  1.4075e+00,  2.2586e+00,
              2.1786e+00, -4.0310e-01, -3.2417e+00,  2.4682e+00, -3.9785e-01],
            [-1.5536e+00,  1.1622e-01, -2.8939e-01, -3.1101e-01,  5.6987e-01,
             -3.8723e+00,  1.5739e+00, -8.4583e-01,  1.6654e+00, -6.5481e-01],
            [ 1.7988e+00,  2.6522e+00, -1.0556e+00,  1.3551e+00, -7.4292e-01,
             -3.4054e+00, -2.6373e+00,  3.3209e+00,  1.8866e+00, -1.3540e+00]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.494 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
