.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[12.2934,  7.6198, 11.6441, 12.0487,  7.6896],
            [ 7.2353,  6.1175,  9.8203, 11.3064,  2.4920],
            [10.0897,  9.4710, 11.2899, 10.0269,  6.4003],
            [ 9.2298,  4.2040,  1.4642,  9.9107,  8.8441],
            [ 3.5542,  6.9785,  6.7271,  9.2745, 10.1945],
            [ 9.2298, 12.4036,  9.3929,  3.9634,  8.8441],
            [10.0897,  4.2558, 13.4948, 10.3819,  6.4003],
            [ 7.2353, 12.6480, 11.9327,  7.9451,  2.4920]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.7960, -0.8076, -1.1872, -1.1293,  0.6288, -0.4684, -2.6201, -0.7485],
            [-0.3291,  0.3187,  0.1876,  0.2673, -0.2333, -0.3196, -0.2842, -0.0213],
            [ 0.8328, -0.3586, -0.5736, -0.5887,  0.8823,  0.8646, -0.3906,  1.1303],
            [ 1.3656,  0.8288, -2.5513, -1.1744,  0.9448, -0.1089, -1.9813, -0.0558],
            [-0.7685,  1.5956,  0.9320, -0.1572,  1.2243, -1.5007, -1.5272, -0.2960],
            [-2.6066,  0.6496, -0.6375,  0.3486,  0.7340, -0.2950, -0.3462,  2.3047],
            [-1.4820, -0.0255,  1.5062, -0.4427,  0.1941, -1.4419,  0.8092, -0.2136],
            [ 0.4422, -2.5789, -1.5089,  2.2485,  0.6103,  1.0496, -0.4621, -1.1757]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.6219,  1.4739,  0.8463],
            [-0.1273,  0.8930,  0.4140],
            [ 0.6161, -0.0387,  0.3205]], requires_grad=True), Parameter containing:
    tensor([[-1.3462]], requires_grad=True)]
    Output from the convolution:  tensor([[-2.4928, -1.3352, -3.2078,  1.0174, -1.9806, -1.7891,  3.2786, -2.1214],
            [ 0.4334,  1.2005, -4.3897,  2.6692, -0.1489, -3.3773, -0.2939,  2.2480],
            [ 0.1000,  1.6846, -2.6726,  1.4869, -2.0048, -2.0349, -1.5189,  1.1217],
            [-2.2202, -2.9410,  3.3855, -0.7457, -4.5217, -1.8547,  1.2989, -5.1795],
            [-1.5475, -1.1778,  3.1485,  2.1728, -4.6189, -1.1099, -2.9226, -3.3760],
            [ 2.8665, -2.4115,  1.3747, -3.3506, -0.1643, -2.7604, -2.3593,  1.7764],
            [ 3.9592, -4.4260, -0.5994, -3.1467,  0.9316, -3.4535,  0.5825,  2.9718],
            [-5.5012, -3.6619, -2.8805,  4.2449, -0.9209,  0.2512,  0.4313, -2.1247]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.6346, -0.4968, -0.6358,  0.5464,  1.8586,  2.9946, -0.5457,  1.5091,
             -2.4125, -1.2976],
            [ 0.3835,  1.1583,  0.8956, -1.4707,  3.0493, -1.2496, -2.2085,  1.7001,
             -1.5058, -1.0026],
            [ 1.4535,  0.0862,  0.6411, -2.1301, -0.3664, -2.0558,  2.0616, -1.2103,
             -2.7285, -1.4253],
            [-1.0206,  0.7623, -1.7545, -3.3673,  1.0668, -0.1297,  0.1531, -5.1454,
              0.3266,  0.7336],
            [-0.3826, -1.2901, -0.4328, -0.8278,  0.5647,  1.2895,  0.4699, -1.9232,
             -0.6440,  0.0164],
            [-0.9756,  2.2103,  3.0742, -2.2434,  2.1826, -5.0541, -0.4708,  6.0729,
             -3.8210, -1.5783],
            [ 0.2281,  0.8095, -0.1009,  0.1304,  0.6729, -5.2010, -0.2373,  0.2123,
             -0.1645, -0.0837],
            [ 4.5860, -4.1912, -4.5297,  0.3677, -1.6765,  2.3239, -1.7349, -1.6201,
              0.7525, -0.4633],
            [ 0.1705, -2.0932, -1.4327,  0.2174, -0.0646,  0.6054, -1.2319,  0.1347,
             -0.3099,  0.2591],
            [-1.5361, -0.0337, -0.2672,  0.0944,  0.3907, -0.6746, -0.0504, -0.5449,
             -0.0769, -0.0811]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.558 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
