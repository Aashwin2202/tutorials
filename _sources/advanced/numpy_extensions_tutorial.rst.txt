.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 2.5647,  1.5219,  4.3685,  5.6269, 13.7454],
            [ 3.0950, 11.3131,  6.3741,  2.5790,  4.1071],
            [ 2.1418,  8.6743, 11.6988,  9.1869,  9.7275],
            [ 2.8884,  9.5462,  4.4694,  1.3293,  6.7272],
            [ 0.8439,  2.3098,  7.4459, 10.1099, 21.2119],
            [ 2.8884,  4.9601,  6.2311,  3.7907,  6.7272],
            [ 2.1418,  9.1358,  9.1343,  8.5131,  9.7275],
            [ 3.0950,  4.6384, 11.7548,  2.0072,  4.1071]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.8755,  0.8683,  0.0728, -0.8083,  0.6498,  0.3123,  0.5143, -1.3347],
            [ 1.9956,  0.4373, -0.4938,  0.2186,  0.2194, -0.1162, -1.9305,  0.0121],
            [ 2.1775, -0.8243, -0.1535, -1.8033, -0.7859,  0.0697,  1.4815,  0.0835],
            [ 0.3207, -1.1238,  0.7935, -0.2109, -0.8109,  0.2514,  0.0630,  0.2168],
            [-1.4330,  0.4639,  1.2165,  0.5417,  0.6980, -0.7966,  1.4048, -0.8749],
            [-0.5887, -1.1129, -0.3504,  0.2182,  0.6994,  0.4899, -0.7842,  0.4456],
            [ 2.0605, -1.8964,  0.3572, -0.0739,  0.8726, -1.7009,  0.0515, -1.3960],
            [ 0.1753,  0.6636, -0.0295, -0.1876, -0.6293,  0.9205, -1.3684, -0.1081]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-3.0726e-01, -2.2379e+00,  1.2031e-03],
            [ 5.0875e-01, -9.5018e-02,  1.1588e+00],
            [-1.2317e+00, -1.0623e+00,  2.4519e-01]], requires_grad=True), Parameter containing:
    tensor([[-1.0038]], requires_grad=True)]
    Output from the convolution:  tensor([[ 4.7167,  1.4642,  1.8910,  5.7053,  3.3141,  1.2715,  0.5652,  3.0360],
            [-4.3591, -0.3401, -2.7004, -6.1423, -4.1763, -2.1362, -5.6618, -1.9861],
            [-1.4374, -2.7651, -0.5779, -1.6413, -1.6141,  1.8900, -3.0075,  3.3372],
            [ 3.5956,  3.5160,  1.0656, -4.1309, -2.0749, -1.4594, -0.9410,  2.6247],
            [-7.8636, -2.8636, -0.2081,  1.2490, -1.6054, -3.3301, -2.2124, -0.6303],
            [-1.1996, -0.9188, -1.4693, -4.7377,  2.4797,  2.6096,  1.8364, -1.2375],
            [-1.7775, -1.0198,  1.5723,  0.5421,  0.3112, -8.3373, -3.5446,  0.0956],
            [-0.6640, -2.4881, -3.5467,  2.5390,  3.9152, -0.3497,  0.5586, -2.6624]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.6829e-01,  1.8646e+00,  4.7378e+00,  1.5958e+00,  7.1168e+00,
             -1.4896e-01, -1.2068e-01,  7.6476e-01, -3.0530e-01,  1.6389e-04],
            [-4.2893e-01, -2.4296e+00, -3.0475e+00, -4.2902e+00,  2.0722e+00,
             -1.5893e+00, -3.7484e-01,  7.0046e-01, -2.3782e+00,  1.5891e-01],
            [ 1.2817e+00,  6.5528e+00,  5.3750e+00,  5.7755e+00,  2.9470e+00,
             -1.2552e+00, -1.5301e+00,  3.5828e+00,  8.5690e-01,  1.0409e+00],
            [-1.4628e+00, -4.2415e+00, -3.5890e+00, -1.7624e+00,  1.5996e+00,
              3.0902e+00, -1.4971e+00,  1.7704e+00, -3.6470e+00, -5.9335e-01],
            [ 1.8279e+00,  1.6982e+00, -4.5269e-01, -1.7497e+00,  1.0500e+00,
              1.2578e+00,  5.7962e+00,  6.3257e+00, -2.2012e+00,  5.6699e-01],
            [-1.2287e+00, -2.8416e+00, -4.3165e+00,  1.2852e+00,  1.7250e+00,
              6.8739e-01,  2.8463e+00, -5.0212e+00, -1.0141e+00,  8.5986e-01],
            [-4.1038e-01, -5.3249e+00, -1.4580e+00,  1.6925e+00, -2.5276e+00,
             -1.4831e+00,  2.6539e+00, -3.7598e+00,  2.0719e+00, -7.7216e-01],
            [-1.5571e-01, -4.8842e+00,  2.2523e-01, -6.9055e-01, -2.4174e+00,
              4.9443e+00,  3.1204e+00, -6.1482e-01,  2.1515e+00, -9.6394e-01],
            [-2.1151e+00, -1.6638e+00,  1.6020e+00,  1.5486e-01, -3.4641e+00,
             -1.2562e+00, -1.9434e+00, -2.3310e-01,  1.1357e+00, -1.1988e-01],
            [-7.7441e-01, -1.0798e+00, -5.1631e-01, -2.2284e+00, -1.1100e+00,
              1.2853e+00, -2.9483e-02, -3.2360e-01,  7.6527e-03,  9.0729e-03]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.478 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
