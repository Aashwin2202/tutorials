.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.5333, 14.3119,  5.9281, 11.4441,  3.6515],
            [ 8.7719, 16.8429, 10.2092,  6.3001,  4.9054],
            [ 6.3945,  6.9470,  3.1886,  9.6843,  5.6620],
            [10.0745,  8.1155,  9.8834,  2.4379,  5.8777],
            [ 2.8106,  6.6519,  4.6558,  4.9268,  6.2980],
            [10.0745,  4.6385,  6.5127,  5.1847,  5.8777],
            [ 6.3945,  6.1154,  7.5329, 11.0064,  5.6620],
            [ 8.7719,  4.8185,  7.3855, 11.5006,  4.9054]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.4863, -0.7597, -0.2336,  1.5880, -0.1630,  0.1803,  0.2301, -0.0196],
            [-1.1933, -0.2382,  1.1055,  1.4568,  0.2267, -0.2132,  1.6925,  0.6321],
            [-0.9691,  0.1307,  1.4426, -0.4241, -0.1382,  0.9972, -0.6210,  1.5962],
            [ 0.0979, -0.5929,  1.0131, -0.0825,  1.5758,  1.0648, -0.8055,  1.1391],
            [ 0.5136,  0.8264,  0.8314, -0.9970, -0.8100,  0.0890, -1.4302,  0.7155],
            [-0.4942, -0.5896, -2.2389, -0.6955, -0.9726,  0.7825,  0.4765, -0.9183],
            [ 0.2707, -2.4636, -0.2293,  0.6375,  1.1691,  1.0579,  0.9718,  1.1688],
            [ 0.2922, -2.1199, -0.2882, -1.4088,  0.0250,  1.9960,  0.5799, -0.4433]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.1635, -0.3947,  0.3801],
            [-0.1315, -1.4445, -0.5173],
            [-1.5104, -0.3451, -0.5481]], requires_grad=True), Parameter containing:
    tensor([[0.4415]], requires_grad=True)]
    Output from the convolution:  tensor([[-0.3275, -1.5147, -1.7234, -2.3127, -2.2243, -0.6074,  1.5901,  1.1965],
            [ 0.1338, -3.2262, -1.9083,  0.8114, -2.5024,  0.6008,  2.3238,  2.5817],
            [-1.6126, -0.7710,  0.1341,  1.3335, -2.2297,  0.7017,  1.9872,  2.3352],
            [ 1.3940,  2.3293,  0.3905, -0.3966, -0.1826,  0.4187, -1.0251, -1.3308],
            [ 2.8885, -0.5299,  2.1943,  3.6180, -0.5756, -0.4627,  0.5177,  0.6356],
            [ 1.7984,  0.8548,  2.0568, -1.7348,  4.7809,  2.9818, -1.4696,  1.6278],
            [-1.8465, -0.4027,  1.2163,  3.0681,  6.9403,  4.3126,  1.3236,  0.0787],
            [ 1.2606,  0.1832,  2.0238,  5.5724,  5.8725, -0.7542,  2.9613, -1.4511]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.0491, -0.0251,  0.5138,  0.4877,  0.1475, -1.1830, -0.3651, -0.1558,
              0.1970,  0.2696],
            [ 0.1508,  0.1713,  0.6590,  2.3509,  3.1019, -0.3579, -1.7105, -3.5818,
             -0.4555, -1.0835],
            [-0.4323,  2.0547,  2.8308,  4.6971,  2.0047, -0.3503,  0.4796, -2.7435,
              1.7870,  0.3588],
            [ 1.5621, -0.4485,  0.3191,  0.1789,  0.8652,  3.2011, -0.7286,  1.5429,
              0.6363,  0.8510],
            [-1.2681, -2.0055, -2.2378, -2.3446, -1.6426, -0.6294,  0.9863,  2.1114,
              1.8496,  0.9470],
            [-0.5812,  0.2898, -0.7835,  0.0862, -1.7969,  3.2382,  3.0635,  2.4214,
              1.3783,  0.4794],
            [ 0.5505,  4.1304, -1.6594, -0.8481,  1.3391, -2.2645,  1.2612,  0.2943,
              0.3031,  0.5712],
            [ 2.2617,  0.1735,  1.2466,  0.8007, -1.2254,  1.9409, -2.5297,  2.6304,
              0.4134, -0.1009],
            [ 1.6132,  0.8376,  0.5358,  2.7134, -1.0072, -2.0887, -1.7449, -1.7349,
              1.4523,  0.4357],
            [-0.1458, -0.3360,  0.4438, -1.1191, -1.7660, -2.4567, -1.9779,  0.8208,
              0.0203,  0.5967]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.540 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
