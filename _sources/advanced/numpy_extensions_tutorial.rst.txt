.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 9.3403, 11.9483,  5.5697,  1.1003,  2.1683],
            [ 7.8490,  5.5057,  3.2880,  9.3981, 17.2444],
            [ 7.5710,  0.5912, 10.3138,  5.2095,  6.3480],
            [ 6.3519,  7.5596, 10.4887, 10.6042,  3.5876],
            [ 2.4185,  6.8711,  1.3934, 11.1172,  4.2349],
            [ 6.3519,  2.9828,  8.1475, 11.3765,  3.5876],
            [ 7.5710, 10.8906, 15.4403,  9.0977,  6.3480],
            [ 7.8490,  1.9167,  1.9312,  1.9405, 17.2444]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-0.1341,  0.2008,  1.1034, -0.4876,  0.9514,  0.1807,  1.8048, -0.6077],
            [ 0.2026,  1.2539, -0.6525,  1.5375,  1.4505,  0.2166, -0.5773, -0.3416],
            [ 1.4850,  1.2549,  0.7902,  1.1062, -1.1375,  0.7453, -0.2352, -0.9539],
            [-2.6891,  0.2309,  1.5784,  0.3519,  0.3989,  1.0080, -0.4263,  0.7149],
            [ 1.0095, -1.2464,  0.1706,  1.7404, -1.7129,  0.3605, -0.5948,  0.5778],
            [ 0.2573,  1.9077, -0.1167, -0.4313,  0.7345,  0.4629,  0.0510,  0.4219],
            [-0.8931,  0.0119,  0.5565, -0.5710,  0.7399, -1.0711, -0.5727, -1.1109],
            [-1.0081, -2.4083,  2.0761,  0.3565,  0.4380, -1.2651,  0.7059, -0.5601]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-0.2598, -0.5017, -0.5774],
            [-1.2786,  0.5011, -0.3060],
            [ 0.3592, -1.5837,  0.4662]], requires_grad=True), Parameter containing:
    tensor([[0.0964]], requires_grad=True)]
    Output from the convolution:  tensor([[ 1.7704,  0.5513, -1.3260, -1.5851, -1.1222, -0.9190,  3.6280, -0.6822],
            [ 0.0685, -4.2436, -0.5277,  0.6875,  0.6783,  0.3929,  3.2682,  2.2691],
            [ 0.5355,  0.4939,  1.9252, -0.9096,  2.0552,  3.3590, -0.8542,  0.6924],
            [-1.5801,  4.0303, -1.0837,  3.3945, -0.7298, -0.9258,  1.9117,  1.5039],
            [-2.6251, -0.8451,  0.7672,  2.0979,  0.5889, -0.8550, -2.2986,  0.8831],
            [ 2.4979, -2.3800,  1.9340, -3.3708,  1.2250,  0.4329, -1.1405, -1.2961],
            [-0.7370, -0.6806, -3.4660,  1.7661,  1.1255, -0.5077, -2.0777, -1.5136],
            [ 0.7856,  4.4728, -2.2941,  1.6638, -0.4164,  0.3051, -0.9468,  0.9372]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 0.3807,  0.4042,  0.1147, -1.0572, -0.3368, -0.2826, -0.0074, -0.4050,
              0.0570, -0.2990],
            [ 1.6139, -2.9919, -0.4777, -1.6048,  0.8099, -0.8208,  1.7396, -1.8479,
             -0.4380, -0.6433],
            [-1.6185,  3.0975, -3.3844,  1.7930,  0.5885,  1.9245, -2.2139,  0.9328,
              0.2037,  0.8803],
            [ 1.3447, -0.9229,  0.5230, -0.5249,  1.9193, -0.3164,  1.4131,  0.8803,
             -0.5472,  0.8974],
            [-0.0756,  1.2893, -1.1554, -0.0870, -0.1335, -1.0392, -1.2435, -0.8407,
              3.3210, -1.0128],
            [-1.3866,  0.8637, -0.4774, -0.9531, -1.8586, -0.7730,  0.4170,  1.1929,
              0.6839, -0.4408],
            [-1.0626, -2.5164,  0.9414, -1.3727,  0.9047, -4.6784,  0.0914,  1.8241,
             -0.1631,  0.5501],
            [-2.5573,  1.9885, -0.6325,  0.1357,  0.7561, -1.4062, -2.5517,  2.5296,
             -1.9391, -0.2408],
            [ 2.2160, -3.6579,  2.6096, -0.3469, -3.3697,  0.1597, -0.6129, -1.3074,
              1.6921, -0.7121],
            [-0.3821,  1.4284,  0.5495,  0.1120, -0.0928, -0.8387, -2.4148,  2.0055,
             -2.0909,  0.5469]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.493 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
