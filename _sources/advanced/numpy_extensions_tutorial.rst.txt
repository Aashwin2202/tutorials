.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 8.0910,  6.2307,  2.3922,  4.4973,  1.3222],
            [ 7.5896,  5.3401,  7.9813,  3.0714, 10.1889],
            [ 4.6994, 13.8918,  7.6691, 10.1494, 10.9886],
            [ 2.4029, 10.3407,  5.5200,  2.2700,  4.0104],
            [ 3.7008,  3.6849,  3.6591,  8.1041,  2.1797],
            [ 2.4029,  5.5692,  6.1647,  8.4230,  4.0104],
            [ 4.6994,  8.2232,  7.3067, 10.0990, 10.9886],
            [ 7.5896,  7.3850,  5.3253,  3.1259, 10.1889]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[-1.0878, -1.0247,  0.1440, -1.5661,  0.7083,  1.2018, -0.4135,  0.0698],
            [ 0.3934, -0.8526,  0.2136,  1.3630, -0.9216, -1.5560, -0.2723, -0.1304],
            [ 0.6491,  0.3602, -0.0258,  0.0575, -2.3741, -0.9523, -0.0973,  0.8517],
            [-0.4258,  0.6728, -0.9403,  0.1801, -1.3315,  0.5465, -0.7106, -0.4817],
            [-1.7077, -0.1128, -0.7124, -0.4339,  0.2594, -0.0581, -0.6293,  0.2286],
            [ 0.2692, -0.5534, -0.4109, -1.3593,  0.9284,  0.1165,  1.6413, -0.8266],
            [ 1.8193, -0.4226,  0.7882,  0.5913, -1.0521, -0.1038, -0.0917, -0.7590],
            [ 0.7467,  0.8276, -1.4869, -0.8389,  0.3441,  1.3349,  1.0803,  0.2453]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[-1.0273, -1.5208,  0.5527],
            [ 0.2605,  1.4323, -0.6455],
            [ 0.4291, -1.2814,  0.7075]], requires_grad=True), Parameter containing:
    tensor([[-0.0380]], requires_grad=True)]
    Output from the convolution:  tensor([[-4.8298e-01, -4.5594e+00, -4.9644e-04,  2.2532e+00, -4.0343e+00,
              1.6916e+00,  2.6045e+00,  4.3437e-01],
            [-7.1038e-01,  4.1304e+00, -7.4807e-01, -4.3953e+00,  9.7575e-01,
              5.7694e-01, -2.9398e-01, -5.2255e-01],
            [ 2.0753e+00, -4.6086e+00,  2.9948e+00,  6.1451e+00,  9.4046e-01,
              4.0872e+00,  1.2745e+00, -2.1122e+00],
            [-6.8877e+00,  1.8064e+00, -4.6949e+00, -2.6017e+00,  5.9858e-01,
             -2.4077e+00,  2.7826e+00, -2.6683e-01],
            [ 1.9743e+00, -1.6396e+00,  4.0021e+00,  1.5155e-02, -2.0182e+00,
              1.2117e+00, -4.1655e-01,  1.5062e+00],
            [-7.2680e-01,  1.5682e+00, -2.8678e+00,  1.1137e+00, -4.1529e-01,
              1.5531e+00, -6.6367e-01, -3.5865e-01],
            [-4.9266e+00,  1.0597e+00, -3.3070e+00, -1.8441e+00, -2.6348e-01,
             -1.5210e+00,  2.8668e+00,  1.3002e+00],
            [ 5.5055e+00, -2.9338e+00,  5.9038e+00,  2.7140e+00, -2.7821e+00,
              1.4017e-01, -7.2252e-01, -2.9613e+00]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[ 1.4472e-01, -2.2320e+00, -5.3380e+00, -1.1901e+00,  5.0238e-01,
             -1.8834e-01,  5.2339e-01,  1.3811e+00,  1.7463e+00, -6.6490e-01],
            [ 1.2047e-01,  1.8563e+00,  6.8809e+00,  2.7442e+00,  3.5856e-01,
              1.3200e+00, -8.7665e-01, -2.1561e+00, -2.6051e+00,  1.2278e+00],
            [-6.1269e-01,  1.3750e+00, -1.6532e+00, -1.8253e-01,  1.2563e+00,
             -3.8891e+00,  1.7137e+00, -1.3586e+00,  2.0491e+00, -1.1324e+00],
            [-4.5232e-01, -1.5317e+00, -2.0720e+00,  1.4201e+00, -1.4703e+00,
              5.2647e+00, -9.3876e-01,  2.2097e+00, -2.3755e+00,  7.0305e-01],
            [-2.2645e-01, -5.2251e-01,  4.6821e+00, -3.2746e+00,  6.2992e-01,
             -4.9629e+00, -2.0325e-01, -1.7804e+00,  4.0460e+00, -8.4478e-01],
            [ 6.2600e-01,  1.5175e+00, -3.1187e-01,  4.4805e+00,  5.3981e+00,
             -6.7190e-01,  3.4754e+00,  4.3806e+00, -5.4283e+00,  1.4313e+00],
            [ 1.5000e+00,  1.2484e-02, -6.1170e-01,  1.8732e+00, -6.4191e+00,
              9.1831e-01, -1.4997e+00, -3.3503e+00,  1.6602e+00, -3.8894e-01],
            [-1.7098e+00, -2.5685e+00,  4.6703e+00, -7.2735e-01,  3.7619e+00,
             -3.6295e-01, -2.9968e+00,  1.1306e+00, -1.6041e+00,  1.0018e-01],
            [-2.3488e-01,  3.3162e+00, -4.2842e+00,  4.6931e-01, -1.9253e-01,
             -1.4529e+00,  1.8400e+00,  1.0988e+00, -8.9881e-02, -7.6944e-04],
            [ 5.2713e-01, -2.0146e+00,  1.8346e+00, -4.5399e-02,  3.4348e-01,
              3.1941e-01, -1.5255e+00,  1.1819e+00, -1.5312e+00,  8.5607e-01]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.503 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
