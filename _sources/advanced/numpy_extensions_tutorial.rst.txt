.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_advanced_numpy_extensions_tutorial.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_advanced_numpy_extensions_tutorial.py:


Creating Extensions Using numpy and scipy
=========================================
**Author**: `Adam Paszke <https://github.com/apaszke>`_

**Updated by**: `Adam Dziedzic <https://github.com/adam-dziedzic>`_

In this tutorial, we shall go through two tasks:

1. Create a neural network layer with no parameters.

    -  This calls into **numpy** as part of its implementation

2. Create a neural network layer that has learnable weights

    -  This calls into **SciPy** as part of its implementation


.. code-block:: default


    import torch
    from torch.autograd import Function







Parameter-less example
----------------------

This layer doesnâ€™t particularly do anything useful or mathematically
correct.

It is aptly named BadFFTFunction

**Layer Implementation**


.. code-block:: default


    from numpy.fft import rfft2, irfft2


    class BadFFTFunction(Function):
        @staticmethod
        def forward(ctx, input):
            numpy_input = input.detach().numpy()
            result = abs(rfft2(numpy_input))
            return input.new(result)

        @staticmethod
        def backward(ctx, grad_output):
            numpy_go = grad_output.numpy()
            result = irfft2(numpy_go)
            return grad_output.new(result)

    # since this layer does not have any parameters, we can
    # simply declare this as a function, rather than as an nn.Module class


    def incorrect_fft(input):
        return BadFFTFunction.apply(input)







**Example usage of the created layer:**


.. code-block:: default


    input = torch.randn(8, 8, requires_grad=True)
    result = incorrect_fft(input)
    print(result)
    result.backward(torch.randn(result.size()))
    print(input)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tensor([[ 4.1993,  8.5204,  4.5671,  9.6180,  2.0365],
            [ 2.8854, 20.8816,  8.0154,  9.9668,  4.5656],
            [ 2.9233,  7.3164,  6.7138, 11.6621,  9.1381],
            [10.1088,  7.6460,  3.8804,  1.6096,  0.8710],
            [ 1.0245,  7.3113,  2.6209,  5.6487,  8.2013],
            [10.1088,  5.8840,  2.0595,  8.9494,  0.8710],
            [ 2.9233,  8.5052,  9.1919,  1.7041,  9.1381],
            [ 2.8854,  6.9553, 11.9427, 12.3373,  4.5656]],
           grad_fn=<BadFFTFunctionBackward>)
    tensor([[ 0.6579, -0.2439, -0.1483,  0.7990, -0.9538, -1.2276, -0.3992, -1.2162],
            [ 1.4672,  0.5786,  0.5261,  0.6450, -1.8940, -0.2906, -0.2149, -2.8170],
            [ 0.3379,  0.2119,  0.7377, -1.0939,  0.4240,  0.6841,  0.4672, -0.3663],
            [-0.3478, -0.8981, -2.2190, -1.3072,  0.1940,  1.9228, -0.3360,  1.3949],
            [-0.7160,  0.3587,  0.3321,  0.3939,  0.5574,  0.7015,  0.1450, -0.1590],
            [-1.0378, -0.5163,  1.2083, -0.2408, -0.2236,  1.0940,  0.1917, -0.7192],
            [-0.6649, -1.5983,  2.6130,  0.7910, -0.3086, -0.9701, -1.8280, -0.9302],
            [ 0.4978,  0.5679,  0.1504,  2.0936, -0.6237, -1.0210,  0.3264,  0.2607]],
           requires_grad=True)


Parametrized example
--------------------

In deep learning literature, this layer is confusingly referred
to as convolution while the actual operation is cross-correlation
(the only difference is that filter is flipped for convolution,
which is not the case for cross-correlation).

Implementation of a layer with learnable weights, where cross-correlation
has a filter (kernel) that represents weights.

The backward pass computes the gradient wrt the input and the gradient wrt the filter.


.. code-block:: default


    from numpy import flip
    import numpy as np
    from scipy.signal import convolve2d, correlate2d
    from torch.nn.modules.module import Module
    from torch.nn.parameter import Parameter


    class ScipyConv2dFunction(Function):
        @staticmethod
        def forward(ctx, input, filter, bias):
            # detach so we can cast to NumPy
            input, filter, bias = input.detach(), filter.detach(), bias.detach()
            result = correlate2d(input.numpy(), filter.numpy(), mode='valid')
            result += bias.numpy()
            ctx.save_for_backward(input, filter, bias)
            return torch.as_tensor(result, dtype=input.dtype)

        @staticmethod
        def backward(ctx, grad_output):
            grad_output = grad_output.detach()
            input, filter, bias = ctx.saved_tensors
            grad_output = grad_output.numpy()
            grad_bias = np.sum(grad_output, keepdims=True)
            grad_input = convolve2d(grad_output, filter.numpy(), mode='full')
            # the previous line can be expressed equivalently as:
            # grad_input = correlate2d(grad_output, flip(flip(filter.numpy(), axis=0), axis=1), mode='full')
            grad_filter = correlate2d(input.numpy(), grad_output, mode='valid')
            return torch.from_numpy(grad_input), torch.from_numpy(grad_filter).to(torch.float), torch.from_numpy(grad_bias).to(torch.float)


    class ScipyConv2d(Module):
        def __init__(self, filter_width, filter_height):
            super(ScipyConv2d, self).__init__()
            self.filter = Parameter(torch.randn(filter_width, filter_height))
            self.bias = Parameter(torch.randn(1, 1))

        def forward(self, input):
            return ScipyConv2dFunction.apply(input, self.filter, self.bias)








**Example usage:**


.. code-block:: default


    module = ScipyConv2d(3, 3)
    print("Filter and bias: ", list(module.parameters()))
    input = torch.randn(10, 10, requires_grad=True)
    output = module(input)
    print("Output from the convolution: ", output)
    output.backward(torch.randn(8, 8))
    print("Gradient for the input map: ", input.grad)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Filter and bias:  [Parameter containing:
    tensor([[ 1.4182, -0.8265, -0.2242],
            [ 0.0911, -0.6179, -0.8477],
            [-0.0771, -1.1489, -0.1841]], requires_grad=True), Parameter containing:
    tensor([[-1.2285]], requires_grad=True)]
    Output from the convolution:  tensor([[-1.3239, -2.5716, -2.3807,  0.4166,  3.7143, -2.6492,  3.9269, -2.3965],
            [-3.8772, -0.6183, -2.8744, -0.8650,  1.5709,  0.3653, -4.6438,  0.5502],
            [-2.0179, -3.0604, -0.8044, -2.0949, -0.3267, -1.5754, -1.8170, -3.4319],
            [-0.1995, -1.3976, -4.8826,  0.6837,  0.7333,  0.9132, -4.6395, -0.0657],
            [-3.2340, -3.3231,  1.4880,  0.1389,  4.7619, -0.3276, -3.8799, -0.7894],
            [-2.8514, -1.6372, -1.9894,  2.0108, -0.5899, -4.9828, -6.0405, -1.9588],
            [ 1.8383,  1.9321, -3.0342, -0.4126, -0.7339, -6.6812, -5.0682, -1.3319],
            [ 5.7088, -3.1556, -2.3780,  4.2178,  0.4284, -2.5916, -3.9733,  0.0256]],
           grad_fn=<ScipyConv2dFunctionBackward>)
    Gradient for the input map:  tensor([[-0.4456, -0.4644,  1.9080, -1.7759,  1.0040,  0.9892, -2.8844,  1.8080,
             -0.1147, -0.1213],
            [-0.5678,  0.5806,  1.0787, -0.9542,  0.9741, -0.8116, -0.9200,  0.1520,
              1.1174, -0.4118],
            [ 2.9207,  1.1218, -0.2401, -2.1406,  4.6156, -4.8654,  0.1892,  0.3672,
              0.4739,  0.2867],
            [-1.0678, -0.0505, -2.8836, -3.2598,  0.9629, -2.2196, -1.9334,  2.0943,
              0.0123,  0.7226],
            [ 0.1827, -3.5184, -2.5842,  1.6251,  1.1154, -4.0779,  2.0644, -2.4846,
              2.7937,  0.2013],
            [-2.0794,  1.4629, -0.2532,  3.8867, -0.3254,  1.7928,  2.0034,  1.1291,
             -0.1247,  1.3868],
            [-1.7529,  2.4628,  2.8781,  3.5965, -2.3084, -0.5332,  0.6836, -2.4450,
              2.5887,  0.2359],
            [ 2.2760,  3.0046, -0.8942,  3.1714, -0.2719, -0.0871, -1.2455,  0.0174,
              1.6679,  1.4978],
            [ 0.2317,  0.3688, -2.7348, -1.1471, -1.4941, -1.6511, -0.6269,  2.1078,
              2.9647,  0.3783],
            [-0.1229, -1.9272, -1.6818,  0.3885, -1.9807, -2.2881, -0.6656,  0.5892,
              0.1439,  0.0064]])


**Check the gradients:**


.. code-block:: default


    from torch.autograd.gradcheck import gradcheck

    moduleConv = ScipyConv2d(3, 3)

    input = [torch.randn(20, 20, dtype=torch.double, requires_grad=True)]
    test = gradcheck(moduleConv, input, eps=1e-6, atol=1e-4)
    print("Are the gradients correct: ", test)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Are the gradients correct:  True



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.555 seconds)


.. _sphx_glr_download_advanced_numpy_extensions_tutorial.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: numpy_extensions_tutorial.py <numpy_extensions_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: numpy_extensions_tutorial.ipynb <numpy_extensions_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
